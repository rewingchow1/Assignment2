// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_batch_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        batch_size_dout,
        batch_size_empty_n,
        batch_size_read,
        num_outputs_dout,
        num_outputs_empty_n,
        num_outputs_read,
        num_inputs_dout,
        num_inputs_empty_n,
        num_inputs_read,
        p_read,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        p_read1,
        p_read2,
        p_read3,
        p_read4
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_pp0_stage0 = 37'd16384;
parameter    ap_ST_fsm_pp0_stage1 = 37'd32768;
parameter    ap_ST_fsm_pp0_stage2 = 37'd65536;
parameter    ap_ST_fsm_pp0_stage3 = 37'd131072;
parameter    ap_ST_fsm_pp0_stage4 = 37'd262144;
parameter    ap_ST_fsm_pp0_stage5 = 37'd524288;
parameter    ap_ST_fsm_pp0_stage6 = 37'd1048576;
parameter    ap_ST_fsm_pp0_stage7 = 37'd2097152;
parameter    ap_ST_fsm_pp0_stage8 = 37'd4194304;
parameter    ap_ST_fsm_state39 = 37'd8388608;
parameter    ap_ST_fsm_state40 = 37'd16777216;
parameter    ap_ST_fsm_state41 = 37'd33554432;
parameter    ap_ST_fsm_state42 = 37'd67108864;
parameter    ap_ST_fsm_state43 = 37'd134217728;
parameter    ap_ST_fsm_state44 = 37'd268435456;
parameter    ap_ST_fsm_state45 = 37'd536870912;
parameter    ap_ST_fsm_state46 = 37'd1073741824;
parameter    ap_ST_fsm_state47 = 37'd2147483648;
parameter    ap_ST_fsm_state48 = 37'd4294967296;
parameter    ap_ST_fsm_state49 = 37'd8589934592;
parameter    ap_ST_fsm_state50 = 37'd17179869184;
parameter    ap_ST_fsm_state51 = 37'd34359738368;
parameter    ap_ST_fsm_state52 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] batch_size_dout;
input   batch_size_empty_n;
output   batch_size_read;
input  [31:0] num_outputs_dout;
input   num_outputs_empty_n;
output   num_outputs_read;
input  [31:0] num_inputs_dout;
input   num_inputs_empty_n;
output   num_inputs_read;
input  [63:0] p_read;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [0:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
input  [63:0] p_read4;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg batch_size_read;
reg num_outputs_read;
reg num_inputs_read;
reg m_axi_mem_AWVALID;
reg m_axi_mem_WVALID;
reg[31:0] m_axi_mem_WDATA;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg m_axi_mem_RREADY;
reg m_axi_mem_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    batch_size_blk_n;
reg    num_outputs_blk_n;
reg    num_inputs_blk_n;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state13;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state40;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state41;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1_flag00000000;
reg   [0:0] tmp_19_i_i_reg_610;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_flag00000000;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_flag00000000;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
reg   [31:0] tmp_18_i_i_reg_196;
reg   [30:0] i_i_i_reg_207;
reg   [63:0] reg_243;
wire    ap_CS_fsm_state39;
reg   [31:0] batch_size_read_reg_483;
reg    ap_block_state1;
reg  signed [31:0] num_outputs_read_reg_488;
reg  signed [31:0] num_inputs_read_reg_495;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp5_fu_260_p2;
reg   [63:0] tmp5_reg_533;
wire   [63:0] grp_fu_254_p2;
reg   [63:0] bound_reg_538;
wire   [63:0] indvar_flatten_next_fu_280_p2;
reg   [63:0] indvar_flatten_next_reg_546;
wire    ap_CS_fsm_state5;
wire   [30:0] o_i_i_mid2_fu_286_p3;
reg   [30:0] o_i_i_mid2_reg_551;
wire   [0:0] exitcond_flatten_fu_275_p2;
wire   [30:0] tmp_9_i_i_cast_mid2_s_fu_300_p3;
reg   [30:0] tmp_9_i_i_cast_mid2_s_reg_557;
wire   [63:0] tmp_13_i_i_fu_308_p1;
reg   [63:0] tmp_13_i_i_reg_563;
reg   [63:0] mem_addr_reg_568;
wire   [31:0] tmp_9_i_i_cast_mid2_1_fu_328_p1;
reg   [31:0] tmp_9_i_i_cast_mid2_1_reg_574;
reg    ap_sig_ioackin_m_axi_mem_ARREADY;
wire   [31:0] grp_fu_331_p2;
reg   [31:0] tmp_11_i_i_mid2_v_v_reg_580;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_11_i_i_mid2_fu_339_p2;
reg   [63:0] tmp_11_i_i_mid2_reg_585;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
reg   [31:0] output_element_reg_595;
wire  signed [32:0] tmp_9_i_i_cast_mid2_fu_356_p1;
reg  signed [32:0] tmp_9_i_i_cast_mid2_reg_600;
wire    ap_CS_fsm_state14;
wire  signed [32:0] tmp_17_i_i_cast_fu_360_p1;
reg  signed [32:0] tmp_17_i_i_cast_reg_605;
wire   [0:0] tmp_19_i_i_fu_368_p2;
wire    ap_block_state15_pp0_stage0_iter0;
reg    ap_block_state24_pp0_stage0_iter1;
wire    ap_block_state33_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_tmp_19_i_i_reg_610;
reg   [0:0] ap_reg_pp0_iter2_tmp_19_i_i_reg_610;
wire   [30:0] i_fu_373_p2;
reg   [30:0] i_reg_614;
reg   [63:0] mem_addr_1_reg_619;
reg   [63:0] mem_addr_2_reg_625;
reg   [31:0] input_element_reg_631;
reg    ap_block_state23_pp0_stage8_iter0;
wire    ap_block_state32_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_flag00011001;
reg   [31:0] weight_element_reg_636;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] tmp_27_i_i_reg_641;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state20_pp0_stage5_iter0;
wire    ap_block_state29_pp0_stage5_iter1;
wire    ap_block_state38_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_flag00011001;
wire   [31:0] grp_fu_218_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] tmp_30_i_i_fu_470_p3;
reg   [31:0] tmp_30_i_i_reg_651;
reg    ap_sig_ioackin_m_axi_mem_AWREADY;
wire   [30:0] o_fu_478_p2;
reg    ap_block_state46;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state15;
reg    ap_block_pp0_stage8_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
reg   [63:0] indvar_flatten_reg_163;
reg   [30:0] b_i_i_reg_174;
reg   [30:0] o_i_i_reg_185;
reg   [30:0] i_i_i_phi_fu_211_p4;
wire   [63:0] grp_fu_233_p2;
wire   [63:0] tmp_15_i_i_fu_317_p2;
wire   [63:0] tmp_24_i_i_fu_397_p2;
wire   [63:0] tmp_26_i_i_fu_417_p2;
reg    ap_reg_ioackin_m_axi_mem_ARREADY;
wire    ap_block_state16_pp0_stage1_iter0;
wire    ap_block_state25_pp0_stage1_iter1;
wire    ap_block_state34_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_flag00001001;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage1_flag00011001;
wire    ap_block_state17_pp0_stage2_iter0;
wire    ap_block_state26_pp0_stage2_iter1;
wire    ap_block_state35_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_flag00001001;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage2_flag00011001;
reg    ap_reg_ioackin_m_axi_mem_AWREADY;
reg    ap_reg_ioackin_m_axi_mem_WREADY;
reg    ap_sig_ioackin_m_axi_mem_WREADY;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_flag00000000;
wire   [31:0] grp_fu_254_p0;
wire   [31:0] grp_fu_254_p1;
wire   [31:0] o_cast_i_i_fu_266_p1;
wire   [0:0] tmp_12_i_i_fu_270_p2;
wire   [30:0] b_fu_294_p2;
wire   [63:0] tmp_fu_312_p2;
wire   [30:0] grp_fu_331_p1;
wire  signed [63:0] tmp_11_i_i_mid2_v_fu_336_p1;
wire   [30:0] grp_fu_344_p1;
wire   [30:0] grp_fu_351_p1;
wire   [31:0] grp_fu_344_p2;
wire   [31:0] grp_fu_351_p2;
wire   [31:0] i_cast_i_i_fu_364_p1;
wire   [32:0] tmp_20_i_i_cast_fu_379_p1;
wire   [32:0] tmp7_fu_383_p2;
wire  signed [63:0] tmp7_cast_fu_388_p1;
wire   [63:0] tmp6_fu_392_p2;
wire   [32:0] tmp8_fu_408_p2;
wire  signed [63:0] tmp8_cast_fu_413_p1;
wire   [31:0] tmp_18_i_i_to_int_fu_428_p1;
wire   [7:0] tmp_1_fu_432_p4;
wire   [22:0] tmp_2_fu_442_p1;
wire   [0:0] notrhs_fu_452_p2;
wire   [0:0] notlhs_fu_446_p2;
wire   [0:0] tmp_3_fu_458_p2;
wire   [0:0] grp_fu_227_p2;
wire   [0:0] tmp_5_fu_464_p2;
reg    grp_fu_218_ce;
wire    ap_block_state21_pp0_stage6_iter0;
wire    ap_block_state30_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_block_state22_pp0_stage7_iter0;
wire    ap_block_state31_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state18_pp0_stage3_iter0;
wire    ap_block_state27_pp0_stage3_iter1;
wire    ap_block_state36_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_flag00011001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state19_pp0_stage4_iter0;
wire    ap_block_state28_pp0_stage4_iter1;
wire    ap_block_state37_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_CS_fsm_pp0_stage4;
reg    grp_fu_223_ce;
reg    grp_fu_227_ce;
reg    grp_fu_331_ce;
wire    ap_CS_fsm_state7;
reg    grp_fu_344_ce;
reg    grp_fu_351_ce;
reg   [36:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_flag00011011;
reg    ap_block_pp0_stage2_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_pp0_stage7_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_254_p00;
wire   [63:0] grp_fu_254_p10;
wire   [31:0] grp_fu_331_p10;
wire   [31:0] grp_fu_351_p10;
reg    ap_condition_477;
reg    ap_condition_499;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 37'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_WREADY = 1'b0;
end

fc_layer_fadd_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fadd_32ncud_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_i_i_reg_196),
    .din1(tmp_27_i_i_reg_641),
    .ce(grp_fu_218_ce),
    .dout(grp_fu_218_p2)
);

fc_layer_fmul_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fmul_32ndEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_element_reg_631),
    .din1(weight_element_reg_636),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p2)
);

fc_layer_fcmp_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fc_layer_fcmp_32neOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_i_i_reg_196),
    .din1(32'd0),
    .ce(grp_fu_227_ce),
    .opcode(5'd2),
    .dout(grp_fu_227_p2)
);

fc_layer_mul_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fc_layer_mul_32nsfYi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_254_p0),
    .din1(grp_fu_254_p1),
    .ce(1'b1),
    .dout(grp_fu_254_p2)
);

fc_layer_mul_32s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(num_outputs_read_reg_488),
    .din1(grp_fu_331_p1),
    .ce(grp_fu_331_ce),
    .dout(grp_fu_331_p2)
);

fc_layer_mul_32s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_g8j_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(num_inputs_read_reg_495),
    .din1(grp_fu_344_p1),
    .ce(grp_fu_344_ce),
    .dout(grp_fu_344_p2)
);

fc_layer_mul_32s_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_g8j_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(num_inputs_read_reg_495),
    .din1(grp_fu_351_p1),
    .ce(grp_fu_351_ce),
    .dout(grp_fu_351_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_flatten_fu_275_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state15))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state15)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state15 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state6) & (1'b1 == m_axi_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == m_axi_mem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == m_axi_mem_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state40) & (1'b1 == m_axi_mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state47) & (1'b1 == m_axi_mem_AWREADY)))) begin
            ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_m_axi_mem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_m_axi_mem_WREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_mem_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state41) & (1'b1 == m_axi_mem_WREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b1 == m_axi_mem_WREADY)))) begin
            ap_reg_ioackin_m_axi_mem_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID))))) begin
        b_i_i_reg_174 <= tmp_9_i_i_cast_mid2_s_reg_557;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_i_i_reg_174 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_i_i_reg_207 <= i_reg_614;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_i_i_reg_207 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID))))) begin
        indvar_flatten_reg_163 <= indvar_flatten_next_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_163 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID))))) begin
        o_i_i_reg_185 <= o_fu_478_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        o_i_i_reg_185 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter2_tmp_19_i_i_reg_610))) begin
        tmp_18_i_i_reg_196 <= grp_fu_218_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_18_i_i_reg_196 <= output_element_reg_595;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_19_i_i_reg_610 <= tmp_19_i_i_reg_610;
        ap_reg_pp0_iter2_tmp_19_i_i_reg_610 <= ap_reg_pp0_iter1_tmp_19_i_i_reg_610;
        tmp_19_i_i_reg_610 <= tmp_19_i_i_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n)))) begin
        batch_size_read_reg_483 <= batch_size_dout;
        num_inputs_read_reg_495 <= num_inputs_dout;
        num_outputs_read_reg_488 <= num_outputs_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_538 <= grp_fu_254_p2;
        tmp5_reg_533 <= tmp5_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_614 <= i_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_next_reg_546 <= indvar_flatten_next_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        input_element_reg_631 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == tmp_19_i_i_fu_368_p2))) begin
        mem_addr_1_reg_619 <= tmp_24_i_i_fu_397_p2;
        mem_addr_2_reg_625 <= tmp_26_i_i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_flatten_fu_275_p2))) begin
        mem_addr_reg_568 <= tmp_15_i_i_fu_317_p2;
        o_i_i_mid2_reg_551 <= o_i_i_mid2_fu_286_p3;
        tmp_13_i_i_reg_563[30 : 0] <= tmp_13_i_i_fu_308_p1[30 : 0];
        tmp_9_i_i_cast_mid2_s_reg_557 <= tmp_9_i_i_cast_mid2_s_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_mem_RVALID == 1'b1))) begin
        output_element_reg_595 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((p_read1 == 1'd0) & (1'b1 == ap_CS_fsm_state39)) | ((p_read1 == 1'd1) & (1'b1 == ap_CS_fsm_state39)))) begin
        reg_243 <= grp_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_11_i_i_mid2_reg_585 <= tmp_11_i_i_mid2_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_11_i_i_mid2_v_v_reg_580 <= grp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_17_i_i_cast_reg_605 <= tmp_17_i_i_cast_fu_360_p1;
        tmp_9_i_i_cast_mid2_reg_600 <= tmp_9_i_i_cast_mid2_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_19_i_i_reg_610))) begin
        tmp_27_i_i_reg_641 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1))) begin
        tmp_30_i_i_reg_651 <= tmp_30_i_i_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1))) begin
        tmp_9_i_i_cast_mid2_1_reg_574[30 : 0] <= tmp_9_i_i_cast_mid2_1_fu_328_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        weight_element_reg_636 <= m_axi_mem_RDATA;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_19_i_i_fu_368_p2)) begin
        ap_condition_pp0_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_flatten_fu_275_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_flatten_fu_275_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) begin
        ap_sig_ioackin_m_axi_mem_ARREADY = m_axi_mem_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_AWREADY)) begin
        ap_sig_ioackin_m_axi_mem_AWREADY = m_axi_mem_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_WREADY)) begin
        ap_sig_ioackin_m_axi_mem_WREADY = m_axi_mem_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        batch_size_blk_n = batch_size_empty_n;
    end else begin
        batch_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n)))) begin
        batch_size_read = 1'b1;
    end else begin
        batch_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_218_ce = 1'b1;
    end else begin
        grp_fu_218_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1)))) begin
        grp_fu_227_ce = 1'b1;
    end else begin
        grp_fu_227_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_331_ce = 1'b1;
    end else begin
        grp_fu_331_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state13) & (m_axi_mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_344_ce = 1'b1;
    end else begin
        grp_fu_344_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state13) & (m_axi_mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_i_i_phi_fu_211_p4 = i_reg_614;
    end else begin
        i_i_i_phi_fu_211_p4 = i_i_i_reg_207;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) begin
        if ((ap_condition_499 == 1'b1)) begin
            m_axi_mem_ARADDR = mem_addr_2_reg_625;
        end else if ((ap_condition_477 == 1'b1)) begin
            m_axi_mem_ARADDR = mem_addr_1_reg_619;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_mem_ARADDR = mem_addr_reg_568;
        end else begin
            m_axi_mem_ARADDR = 'bx;
        end
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (1'b0 == ap_reg_ioackin_m_axi_mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state47) & (1'b0 == ap_reg_ioackin_m_axi_mem_AWREADY)))) begin
        m_axi_mem_AWVALID = 1'b1;
    end else begin
        m_axi_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state46) & (p_read1 == 1'd0) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID)))) | ((1'b1 == ap_CS_fsm_state46) & (p_read1 == 1'd1) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID)))))) begin
        m_axi_mem_BREADY = 1'b1;
    end else begin
        m_axi_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (m_axi_mem_RVALID == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state48)) begin
            m_axi_mem_WDATA = tmp_18_i_i_reg_196;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            m_axi_mem_WDATA = tmp_30_i_i_reg_651;
        end else begin
            m_axi_mem_WDATA = 'bx;
        end
    end else begin
        m_axi_mem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_reg_ioackin_m_axi_mem_WREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == ap_reg_ioackin_m_axi_mem_WREADY)))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (tmp_19_i_i_reg_610 == 1'd1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state47))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state46) & (p_read1 == 1'd0)) | ((1'b1 == ap_CS_fsm_state46) & (p_read1 == 1'd1)))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state48))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        num_inputs_blk_n = num_inputs_empty_n;
    end else begin
        num_inputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n)))) begin
        num_inputs_read = 1'b1;
    end else begin
        num_inputs_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        num_outputs_blk_n = num_outputs_empty_n;
    end else begin
        num_outputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n)))) begin
        num_outputs_read = 1'b1;
    end else begin
        num_outputs_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_flatten_fu_275_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (m_axi_mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_19_i_i_fu_368_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_19_i_i_fu_368_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((ap_block_pp0_stage5_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage5_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((p_read1 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_m_axi_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & ~(((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID))))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_m_axi_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == m_axi_mem_RVALID));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state16_io));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state16_io));
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state17_io));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state17_io));
end

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage8_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == batch_size_empty_n) | (1'b0 == num_outputs_empty_n) | (1'b0 == num_inputs_empty_n));
end

assign ap_block_state15_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == ap_sig_ioackin_m_axi_mem_ARREADY));
end

assign ap_block_state16_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == ap_sig_ioackin_m_axi_mem_ARREADY));
end

assign ap_block_state17_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage8_iter0 = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_state24_pp0_stage0_iter1 = ((tmp_19_i_i_reg_610 == 1'd1) & (1'b0 == m_axi_mem_RVALID));
end

assign ap_block_state25_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46 = (((p_read1 == 1'd0) & (1'b0 == m_axi_mem_BVALID)) | ((p_read1 == 1'd1) & (1'b0 == m_axi_mem_BVALID)));
end

always @ (*) begin
    ap_condition_477 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (ap_block_pp0_stage1_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_499 = ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_19_i_i_reg_610 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_fu_294_p2 = (b_i_i_reg_174 + 31'd1);

assign exitcond_flatten_fu_275_p2 = ((indvar_flatten_reg_163 == bound_reg_538) ? 1'b1 : 1'b0);

assign grp_fu_233_p2 = (tmp_11_i_i_mid2_reg_585 + tmp_13_i_i_reg_563);

assign grp_fu_254_p0 = grp_fu_254_p00;

assign grp_fu_254_p00 = $unsigned(num_outputs_read_reg_488);

assign grp_fu_254_p1 = grp_fu_254_p10;

assign grp_fu_254_p10 = batch_size_read_reg_483;

assign grp_fu_331_p1 = grp_fu_331_p10;

assign grp_fu_331_p10 = tmp_9_i_i_cast_mid2_s_reg_557;

assign grp_fu_344_p1 = tmp_9_i_i_cast_mid2_1_reg_574;

assign grp_fu_351_p1 = grp_fu_351_p10;

assign grp_fu_351_p10 = o_i_i_mid2_reg_551;

assign i_cast_i_i_fu_364_p1 = i_i_i_phi_fu_211_p4;

assign i_fu_373_p2 = (i_i_i_phi_fu_211_p4 + 31'd1);

assign indvar_flatten_next_fu_280_p2 = (indvar_flatten_reg_163 + 64'd1);

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd1;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = reg_243;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd1;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd15;

assign m_axi_mem_WUSER = 1'd0;

assign notlhs_fu_446_p2 = ((tmp_1_fu_432_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_452_p2 = ((tmp_2_fu_442_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_cast_i_i_fu_266_p1 = o_i_i_reg_185;

assign o_fu_478_p2 = (o_i_i_mid2_reg_551 + 31'd1);

assign o_i_i_mid2_fu_286_p3 = ((tmp_12_i_i_fu_270_p2[0:0] === 1'b1) ? o_i_i_reg_185 : 31'd0);

assign tmp5_fu_260_p2 = (p_read3 + p_read4);

assign tmp6_fu_392_p2 = ($signed(tmp7_cast_fu_388_p1) + $signed(p_read2));

assign tmp7_cast_fu_388_p1 = $signed(tmp7_fu_383_p2);

assign tmp7_fu_383_p2 = ($signed(tmp_9_i_i_cast_mid2_reg_600) + $signed(tmp_20_i_i_cast_fu_379_p1));

assign tmp8_cast_fu_413_p1 = $signed(tmp8_fu_408_p2);

assign tmp8_fu_408_p2 = ($signed(tmp_17_i_i_cast_reg_605) + $signed(tmp_20_i_i_cast_fu_379_p1));

assign tmp_11_i_i_mid2_fu_339_p2 = ($signed(tmp_11_i_i_mid2_v_fu_336_p1) + $signed(p_read));

assign tmp_11_i_i_mid2_v_fu_336_p1 = $signed(tmp_11_i_i_mid2_v_v_reg_580);

assign tmp_12_i_i_fu_270_p2 = (($signed(o_cast_i_i_fu_266_p1) < $signed(num_outputs_read_reg_488)) ? 1'b1 : 1'b0);

assign tmp_13_i_i_fu_308_p1 = o_i_i_mid2_fu_286_p3;

assign tmp_15_i_i_fu_317_p2 = (tmp_fu_312_p2 + p_read3);

assign tmp_17_i_i_cast_fu_360_p1 = $signed(grp_fu_351_p2);

assign tmp_18_i_i_to_int_fu_428_p1 = tmp_18_i_i_reg_196;

assign tmp_19_i_i_fu_368_p2 = (($signed(i_cast_i_i_fu_364_p1) < $signed(num_inputs_read_reg_495)) ? 1'b1 : 1'b0);

assign tmp_1_fu_432_p4 = {{tmp_18_i_i_to_int_fu_428_p1[30:23]}};

assign tmp_20_i_i_cast_fu_379_p1 = i_i_i_phi_fu_211_p4;

assign tmp_24_i_i_fu_397_p2 = (tmp6_fu_392_p2 + tmp5_reg_533);

assign tmp_26_i_i_fu_417_p2 = ($signed(tmp8_cast_fu_413_p1) + $signed(p_read3));

assign tmp_2_fu_442_p1 = tmp_18_i_i_to_int_fu_428_p1[22:0];

assign tmp_30_i_i_fu_470_p3 = ((tmp_5_fu_464_p2[0:0] === 1'b1) ? tmp_18_i_i_reg_196 : 32'd0);

assign tmp_3_fu_458_p2 = (notrhs_fu_452_p2 | notlhs_fu_446_p2);

assign tmp_5_fu_464_p2 = (tmp_3_fu_458_p2 & grp_fu_227_p2);

assign tmp_9_i_i_cast_mid2_1_fu_328_p1 = tmp_9_i_i_cast_mid2_s_reg_557;

assign tmp_9_i_i_cast_mid2_fu_356_p1 = $signed(grp_fu_344_p2);

assign tmp_9_i_i_cast_mid2_s_fu_300_p3 = ((tmp_12_i_i_fu_270_p2[0:0] === 1'b1) ? b_i_i_reg_174 : b_fu_294_p2);

assign tmp_fu_312_p2 = (tmp_13_i_i_fu_308_p1 + p_read2);

always @ (posedge ap_clk) begin
    tmp_13_i_i_reg_563[63:31] <= 33'b000000000000000000000000000000000;
    tmp_9_i_i_cast_mid2_1_reg_574[31] <= 1'b0;
end

endmodule //Loop_batch_loop_proc

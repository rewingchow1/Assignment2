// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=5,HLS_SYN_TPT=148745748501,HLS_SYN_MEM=2,HLS_SYN_DSP=181,HLS_SYN_FF=19219,HLS_SYN_LUT=9775}" *)

module conv_layer (
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER
);

parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
wire    mem_AWREADY;
wire    mem_WREADY;
wire    mem_ARREADY;
wire    mem_RVALID;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
wire    Block_proc4_U0_ap_start;
wire    Block_proc4_U0_ap_done;
wire    Block_proc4_U0_ap_continue;
wire    Block_proc4_U0_ap_idle;
wire    Block_proc4_U0_ap_ready;
wire   [31:0] Block_proc4_U0_id_out_din;
wire    Block_proc4_U0_id_out_write;
wire   [31:0] Block_proc4_U0_od_out_din;
wire    Block_proc4_U0_od_out_write;
wire   [31:0] Block_proc4_U0_k_out_din;
wire    Block_proc4_U0_k_out_write;
wire   [31:0] Block_proc4_U0_b_out_din;
wire    Block_proc4_U0_b_out_write;
wire   [31:0] Block_proc4_U0_ox_out_din;
wire    Block_proc4_U0_ox_out_write;
wire   [31:0] Block_proc4_U0_oy_out_din;
wire    Block_proc4_U0_oy_out_write;
wire   [31:0] Block_proc4_U0_ix_out_din;
wire    Block_proc4_U0_ix_out_write;
wire   [31:0] Block_proc4_U0_iy_out_din;
wire    Block_proc4_U0_iy_out_write;
wire   [31:0] Block_proc4_U0_s_out_din;
wire    Block_proc4_U0_s_out_write;
wire   [63:0] Block_proc4_U0_ap_return_0;
wire   [63:0] Block_proc4_U0_ap_return_1;
wire   [63:0] Block_proc4_U0_ap_return_2;
wire   [63:0] Block_proc4_U0_ap_return_3;
wire    ap_channel_done_tmp_7_loc_channel;
wire    tmp_7_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp_7_loc_channel;
wire    ap_sync_channel_write_tmp_7_loc_channel;
wire    ap_channel_done_tmp_5_loc_channel;
wire    tmp_5_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp_5_loc_channel;
wire    ap_sync_channel_write_tmp_5_loc_channel;
wire    ap_channel_done_tmp_3_loc_channel;
wire    tmp_3_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp_3_loc_channel;
wire    ap_sync_channel_write_tmp_3_loc_channel;
wire    ap_channel_done_tmp_4_loc_channel;
wire    tmp_4_loc_channel_full_n;
reg    ap_sync_reg_channel_write_tmp_4_loc_channel;
wire    ap_sync_channel_write_tmp_4_loc_channel;
wire    Loop_batch_loop_proc_U0_ap_start;
wire    Loop_batch_loop_proc_U0_ap_done;
wire    Loop_batch_loop_proc_U0_ap_continue;
wire    Loop_batch_loop_proc_U0_ap_idle;
wire    Loop_batch_loop_proc_U0_ap_ready;
wire    Loop_batch_loop_proc_U0_b_read;
wire    Loop_batch_loop_proc_U0_od_read;
wire    Loop_batch_loop_proc_U0_id_read;
wire    Loop_batch_loop_proc_U0_ix_read;
wire    Loop_batch_loop_proc_U0_iy_read;
wire    Loop_batch_loop_proc_U0_ox_read;
wire    Loop_batch_loop_proc_U0_oy_read;
wire    Loop_batch_loop_proc_U0_m_axi_mem_AWVALID;
wire   [63:0] Loop_batch_loop_proc_U0_m_axi_mem_AWADDR;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_AWID;
wire   [31:0] Loop_batch_loop_proc_U0_m_axi_mem_AWLEN;
wire   [2:0] Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE;
wire   [1:0] Loop_batch_loop_proc_U0_m_axi_mem_AWBURST;
wire   [1:0] Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE;
wire   [2:0] Loop_batch_loop_proc_U0_m_axi_mem_AWPROT;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_AWQOS;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_AWREGION;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_AWUSER;
wire    Loop_batch_loop_proc_U0_m_axi_mem_WVALID;
wire   [31:0] Loop_batch_loop_proc_U0_m_axi_mem_WDATA;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_WSTRB;
wire    Loop_batch_loop_proc_U0_m_axi_mem_WLAST;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_WID;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_WUSER;
wire    Loop_batch_loop_proc_U0_m_axi_mem_ARVALID;
wire   [63:0] Loop_batch_loop_proc_U0_m_axi_mem_ARADDR;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_ARID;
wire   [31:0] Loop_batch_loop_proc_U0_m_axi_mem_ARLEN;
wire   [2:0] Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE;
wire   [1:0] Loop_batch_loop_proc_U0_m_axi_mem_ARBURST;
wire   [1:0] Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE;
wire   [2:0] Loop_batch_loop_proc_U0_m_axi_mem_ARPROT;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_ARQOS;
wire   [3:0] Loop_batch_loop_proc_U0_m_axi_mem_ARREGION;
wire   [0:0] Loop_batch_loop_proc_U0_m_axi_mem_ARUSER;
wire    Loop_batch_loop_proc_U0_m_axi_mem_RREADY;
wire    Loop_batch_loop_proc_U0_m_axi_mem_BREADY;
wire    Loop_batch_loop_proc_U0_k_read;
wire    Loop_batch_loop_proc_U0_s_read;
wire    id_channel_full_n;
wire   [31:0] id_channel_dout;
wire    id_channel_empty_n;
wire    od_channel_full_n;
wire   [31:0] od_channel_dout;
wire    od_channel_empty_n;
wire    k_channel_full_n;
wire   [31:0] k_channel_dout;
wire    k_channel_empty_n;
wire    b_channel_full_n;
wire   [31:0] b_channel_dout;
wire    b_channel_empty_n;
wire    ox_channel_full_n;
wire   [31:0] ox_channel_dout;
wire    ox_channel_empty_n;
wire    oy_channel_full_n;
wire   [31:0] oy_channel_dout;
wire    oy_channel_empty_n;
wire    ix_channel_full_n;
wire   [31:0] ix_channel_dout;
wire    ix_channel_empty_n;
wire    iy_channel_full_n;
wire   [31:0] iy_channel_dout;
wire    iy_channel_empty_n;
wire    s_channel_full_n;
wire   [31:0] s_channel_dout;
wire    s_channel_empty_n;
wire   [63:0] tmp_4_loc_channel_dout;
wire    tmp_4_loc_channel_empty_n;
wire   [63:0] tmp_3_loc_channel_dout;
wire    tmp_3_loc_channel_empty_n;
wire   [63:0] tmp_5_loc_channel_dout;
wire    tmp_5_loc_channel_empty_n;
wire   [63:0] tmp_7_loc_channel_dout;
wire    tmp_7_loc_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_continue;
wire    ap_sync_ready;
reg    ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready;
wire    ap_sync_Loop_batch_loop_proc_U0_ap_ready;
reg   [1:0] Loop_batch_loop_proc_U0_ap_ready_count;
reg    ap_sync_reg_Block_proc4_U0_ap_ready;
wire    ap_sync_Block_proc4_U0_ap_ready;
reg   [1:0] Block_proc4_U0_ap_ready_count;
wire    Block_proc4_U0_start_full_n;
wire    Block_proc4_U0_start_write;
wire    Loop_batch_loop_proc_U0_start_full_n;
wire    Loop_batch_loop_proc_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_tmp_7_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_tmp_5_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_tmp_3_loc_channel = 1'b0;
#0 ap_sync_reg_channel_write_tmp_4_loc_channel = 1'b0;
#0 ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready = 1'b0;
#0 Loop_batch_loop_proc_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_Block_proc4_U0_ap_ready = 1'b0;
#0 Block_proc4_U0_ap_ready_count = 2'd0;
end

conv_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
conv_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

conv_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
conv_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(Loop_batch_loop_proc_U0_m_axi_mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(Loop_batch_loop_proc_U0_m_axi_mem_ARADDR),
    .I_ARID(Loop_batch_loop_proc_U0_m_axi_mem_ARID),
    .I_ARLEN(Loop_batch_loop_proc_U0_m_axi_mem_ARLEN),
    .I_ARSIZE(Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE),
    .I_ARLOCK(Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK),
    .I_ARCACHE(Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE),
    .I_ARQOS(Loop_batch_loop_proc_U0_m_axi_mem_ARQOS),
    .I_ARPROT(Loop_batch_loop_proc_U0_m_axi_mem_ARPROT),
    .I_ARUSER(Loop_batch_loop_proc_U0_m_axi_mem_ARUSER),
    .I_ARBURST(Loop_batch_loop_proc_U0_m_axi_mem_ARBURST),
    .I_ARREGION(Loop_batch_loop_proc_U0_m_axi_mem_ARREGION),
    .I_RVALID(mem_RVALID),
    .I_RREADY(Loop_batch_loop_proc_U0_m_axi_mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(Loop_batch_loop_proc_U0_m_axi_mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(Loop_batch_loop_proc_U0_m_axi_mem_AWADDR),
    .I_AWID(Loop_batch_loop_proc_U0_m_axi_mem_AWID),
    .I_AWLEN(Loop_batch_loop_proc_U0_m_axi_mem_AWLEN),
    .I_AWSIZE(Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE),
    .I_AWLOCK(Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK),
    .I_AWCACHE(Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE),
    .I_AWQOS(Loop_batch_loop_proc_U0_m_axi_mem_AWQOS),
    .I_AWPROT(Loop_batch_loop_proc_U0_m_axi_mem_AWPROT),
    .I_AWUSER(Loop_batch_loop_proc_U0_m_axi_mem_AWUSER),
    .I_AWBURST(Loop_batch_loop_proc_U0_m_axi_mem_AWBURST),
    .I_AWREGION(Loop_batch_loop_proc_U0_m_axi_mem_AWREGION),
    .I_WVALID(Loop_batch_loop_proc_U0_m_axi_mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(Loop_batch_loop_proc_U0_m_axi_mem_WDATA),
    .I_WID(Loop_batch_loop_proc_U0_m_axi_mem_WID),
    .I_WUSER(Loop_batch_loop_proc_U0_m_axi_mem_WUSER),
    .I_WLAST(Loop_batch_loop_proc_U0_m_axi_mem_WLAST),
    .I_WSTRB(Loop_batch_loop_proc_U0_m_axi_mem_WSTRB),
    .I_BVALID(mem_BVALID),
    .I_BREADY(Loop_batch_loop_proc_U0_m_axi_mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

Block_proc4 Block_proc4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_proc4_U0_ap_start),
    .ap_done(Block_proc4_U0_ap_done),
    .ap_continue(Block_proc4_U0_ap_continue),
    .ap_idle(Block_proc4_U0_ap_idle),
    .ap_ready(Block_proc4_U0_ap_ready),
    .id(id),
    .od(od),
    .k(k),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .ox(ox),
    .oy(oy),
    .ix(ix),
    .iy(iy),
    .s(s),
    .id_out_din(Block_proc4_U0_id_out_din),
    .id_out_full_n(id_channel_full_n),
    .id_out_write(Block_proc4_U0_id_out_write),
    .od_out_din(Block_proc4_U0_od_out_din),
    .od_out_full_n(od_channel_full_n),
    .od_out_write(Block_proc4_U0_od_out_write),
    .k_out_din(Block_proc4_U0_k_out_din),
    .k_out_full_n(k_channel_full_n),
    .k_out_write(Block_proc4_U0_k_out_write),
    .b_out_din(Block_proc4_U0_b_out_din),
    .b_out_full_n(b_channel_full_n),
    .b_out_write(Block_proc4_U0_b_out_write),
    .ox_out_din(Block_proc4_U0_ox_out_din),
    .ox_out_full_n(ox_channel_full_n),
    .ox_out_write(Block_proc4_U0_ox_out_write),
    .oy_out_din(Block_proc4_U0_oy_out_din),
    .oy_out_full_n(oy_channel_full_n),
    .oy_out_write(Block_proc4_U0_oy_out_write),
    .ix_out_din(Block_proc4_U0_ix_out_din),
    .ix_out_full_n(ix_channel_full_n),
    .ix_out_write(Block_proc4_U0_ix_out_write),
    .iy_out_din(Block_proc4_U0_iy_out_din),
    .iy_out_full_n(iy_channel_full_n),
    .iy_out_write(Block_proc4_U0_iy_out_write),
    .s_out_din(Block_proc4_U0_s_out_din),
    .s_out_full_n(s_channel_full_n),
    .s_out_write(Block_proc4_U0_s_out_write),
    .ap_return_0(Block_proc4_U0_ap_return_0),
    .ap_return_1(Block_proc4_U0_ap_return_1),
    .ap_return_2(Block_proc4_U0_ap_return_2),
    .ap_return_3(Block_proc4_U0_ap_return_3)
);

Loop_batch_loop_proc Loop_batch_loop_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Loop_batch_loop_proc_U0_ap_start),
    .ap_done(Loop_batch_loop_proc_U0_ap_done),
    .ap_continue(Loop_batch_loop_proc_U0_ap_continue),
    .ap_idle(Loop_batch_loop_proc_U0_ap_idle),
    .ap_ready(Loop_batch_loop_proc_U0_ap_ready),
    .b_dout(b_channel_dout),
    .b_empty_n(b_channel_empty_n),
    .b_read(Loop_batch_loop_proc_U0_b_read),
    .od_dout(od_channel_dout),
    .od_empty_n(od_channel_empty_n),
    .od_read(Loop_batch_loop_proc_U0_od_read),
    .id_dout(id_channel_dout),
    .id_empty_n(id_channel_empty_n),
    .id_read(Loop_batch_loop_proc_U0_id_read),
    .ix_dout(ix_channel_dout),
    .ix_empty_n(ix_channel_empty_n),
    .ix_read(Loop_batch_loop_proc_U0_ix_read),
    .iy_dout(iy_channel_dout),
    .iy_empty_n(iy_channel_empty_n),
    .iy_read(Loop_batch_loop_proc_U0_iy_read),
    .ox_dout(ox_channel_dout),
    .ox_empty_n(ox_channel_empty_n),
    .ox_read(Loop_batch_loop_proc_U0_ox_read),
    .oy_dout(oy_channel_dout),
    .oy_empty_n(oy_channel_empty_n),
    .oy_read(Loop_batch_loop_proc_U0_oy_read),
    .p_read(tmp_4_loc_channel_dout),
    .p_read1(tmp_3_loc_channel_dout),
    .m_axi_mem_AWVALID(Loop_batch_loop_proc_U0_m_axi_mem_AWVALID),
    .m_axi_mem_AWREADY(mem_AWREADY),
    .m_axi_mem_AWADDR(Loop_batch_loop_proc_U0_m_axi_mem_AWADDR),
    .m_axi_mem_AWID(Loop_batch_loop_proc_U0_m_axi_mem_AWID),
    .m_axi_mem_AWLEN(Loop_batch_loop_proc_U0_m_axi_mem_AWLEN),
    .m_axi_mem_AWSIZE(Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE),
    .m_axi_mem_AWBURST(Loop_batch_loop_proc_U0_m_axi_mem_AWBURST),
    .m_axi_mem_AWLOCK(Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK),
    .m_axi_mem_AWCACHE(Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE),
    .m_axi_mem_AWPROT(Loop_batch_loop_proc_U0_m_axi_mem_AWPROT),
    .m_axi_mem_AWQOS(Loop_batch_loop_proc_U0_m_axi_mem_AWQOS),
    .m_axi_mem_AWREGION(Loop_batch_loop_proc_U0_m_axi_mem_AWREGION),
    .m_axi_mem_AWUSER(Loop_batch_loop_proc_U0_m_axi_mem_AWUSER),
    .m_axi_mem_WVALID(Loop_batch_loop_proc_U0_m_axi_mem_WVALID),
    .m_axi_mem_WREADY(mem_WREADY),
    .m_axi_mem_WDATA(Loop_batch_loop_proc_U0_m_axi_mem_WDATA),
    .m_axi_mem_WSTRB(Loop_batch_loop_proc_U0_m_axi_mem_WSTRB),
    .m_axi_mem_WLAST(Loop_batch_loop_proc_U0_m_axi_mem_WLAST),
    .m_axi_mem_WID(Loop_batch_loop_proc_U0_m_axi_mem_WID),
    .m_axi_mem_WUSER(Loop_batch_loop_proc_U0_m_axi_mem_WUSER),
    .m_axi_mem_ARVALID(Loop_batch_loop_proc_U0_m_axi_mem_ARVALID),
    .m_axi_mem_ARREADY(mem_ARREADY),
    .m_axi_mem_ARADDR(Loop_batch_loop_proc_U0_m_axi_mem_ARADDR),
    .m_axi_mem_ARID(Loop_batch_loop_proc_U0_m_axi_mem_ARID),
    .m_axi_mem_ARLEN(Loop_batch_loop_proc_U0_m_axi_mem_ARLEN),
    .m_axi_mem_ARSIZE(Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE),
    .m_axi_mem_ARBURST(Loop_batch_loop_proc_U0_m_axi_mem_ARBURST),
    .m_axi_mem_ARLOCK(Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK),
    .m_axi_mem_ARCACHE(Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE),
    .m_axi_mem_ARPROT(Loop_batch_loop_proc_U0_m_axi_mem_ARPROT),
    .m_axi_mem_ARQOS(Loop_batch_loop_proc_U0_m_axi_mem_ARQOS),
    .m_axi_mem_ARREGION(Loop_batch_loop_proc_U0_m_axi_mem_ARREGION),
    .m_axi_mem_ARUSER(Loop_batch_loop_proc_U0_m_axi_mem_ARUSER),
    .m_axi_mem_RVALID(mem_RVALID),
    .m_axi_mem_RREADY(Loop_batch_loop_proc_U0_m_axi_mem_RREADY),
    .m_axi_mem_RDATA(mem_RDATA),
    .m_axi_mem_RLAST(mem_RLAST),
    .m_axi_mem_RID(mem_RID),
    .m_axi_mem_RUSER(mem_RUSER),
    .m_axi_mem_RRESP(mem_RRESP),
    .m_axi_mem_BVALID(mem_BVALID),
    .m_axi_mem_BREADY(Loop_batch_loop_proc_U0_m_axi_mem_BREADY),
    .m_axi_mem_BRESP(mem_BRESP),
    .m_axi_mem_BID(mem_BID),
    .m_axi_mem_BUSER(mem_BUSER),
    .k_dout(k_channel_dout),
    .k_empty_n(k_channel_empty_n),
    .k_read(Loop_batch_loop_proc_U0_k_read),
    .s_dout(s_channel_dout),
    .s_empty_n(s_channel_empty_n),
    .s_read(Loop_batch_loop_proc_U0_s_read),
    .p_read2(tmp_7_loc_channel_dout),
    .p_read3(tmp_5_loc_channel_dout)
);

fifo_w32_d1_A id_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_id_out_din),
    .if_full_n(id_channel_full_n),
    .if_write(Block_proc4_U0_id_out_write),
    .if_dout(id_channel_dout),
    .if_empty_n(id_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_id_read)
);

fifo_w32_d1_A od_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_od_out_din),
    .if_full_n(od_channel_full_n),
    .if_write(Block_proc4_U0_od_out_write),
    .if_dout(od_channel_dout),
    .if_empty_n(od_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_od_read)
);

fifo_w32_d1_A k_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_k_out_din),
    .if_full_n(k_channel_full_n),
    .if_write(Block_proc4_U0_k_out_write),
    .if_dout(k_channel_dout),
    .if_empty_n(k_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_k_read)
);

fifo_w32_d1_A b_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_b_out_din),
    .if_full_n(b_channel_full_n),
    .if_write(Block_proc4_U0_b_out_write),
    .if_dout(b_channel_dout),
    .if_empty_n(b_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_b_read)
);

fifo_w32_d1_A ox_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ox_out_din),
    .if_full_n(ox_channel_full_n),
    .if_write(Block_proc4_U0_ox_out_write),
    .if_dout(ox_channel_dout),
    .if_empty_n(ox_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ox_read)
);

fifo_w32_d1_A oy_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_oy_out_din),
    .if_full_n(oy_channel_full_n),
    .if_write(Block_proc4_U0_oy_out_write),
    .if_dout(oy_channel_dout),
    .if_empty_n(oy_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_oy_read)
);

fifo_w32_d1_A ix_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ix_out_din),
    .if_full_n(ix_channel_full_n),
    .if_write(Block_proc4_U0_ix_out_write),
    .if_dout(ix_channel_dout),
    .if_empty_n(ix_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ix_read)
);

fifo_w32_d1_A iy_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_iy_out_din),
    .if_full_n(iy_channel_full_n),
    .if_write(Block_proc4_U0_iy_out_write),
    .if_dout(iy_channel_dout),
    .if_empty_n(iy_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_iy_read)
);

fifo_w32_d1_A s_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_s_out_din),
    .if_full_n(s_channel_full_n),
    .if_write(Block_proc4_U0_s_out_write),
    .if_dout(s_channel_dout),
    .if_empty_n(s_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_s_read)
);

fifo_w64_d2_A tmp_4_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_0),
    .if_full_n(tmp_4_loc_channel_full_n),
    .if_write(ap_channel_done_tmp_4_loc_channel),
    .if_dout(tmp_4_loc_channel_dout),
    .if_empty_n(tmp_4_loc_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ap_ready)
);

fifo_w64_d2_A tmp_3_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_1),
    .if_full_n(tmp_3_loc_channel_full_n),
    .if_write(ap_channel_done_tmp_3_loc_channel),
    .if_dout(tmp_3_loc_channel_dout),
    .if_empty_n(tmp_3_loc_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ap_ready)
);

fifo_w64_d2_A tmp_5_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_2),
    .if_full_n(tmp_5_loc_channel_full_n),
    .if_write(ap_channel_done_tmp_5_loc_channel),
    .if_dout(tmp_5_loc_channel_dout),
    .if_empty_n(tmp_5_loc_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ap_ready)
);

fifo_w64_d2_A tmp_7_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_3),
    .if_full_n(tmp_7_loc_channel_full_n),
    .if_write(ap_channel_done_tmp_7_loc_channel),
    .if_dout(tmp_7_loc_channel_dout),
    .if_empty_n(tmp_7_loc_channel_empty_n),
    .if_read(Loop_batch_loop_proc_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Block_proc4_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_Block_proc4_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_proc4_U0_ap_ready <= ap_sync_Block_proc4_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_sync_ready))) begin
            ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= ap_sync_Loop_batch_loop_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_3_loc_channel <= 1'b0;
    end else begin
        if ((1'b1 == (Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue))) begin
            ap_sync_reg_channel_write_tmp_3_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_3_loc_channel <= ap_sync_channel_write_tmp_3_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_4_loc_channel <= 1'b0;
    end else begin
        if ((1'b1 == (Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue))) begin
            ap_sync_reg_channel_write_tmp_4_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_4_loc_channel <= ap_sync_channel_write_tmp_4_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_5_loc_channel <= 1'b0;
    end else begin
        if ((1'b1 == (Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue))) begin
            ap_sync_reg_channel_write_tmp_5_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_5_loc_channel <= ap_sync_channel_write_tmp_5_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_tmp_7_loc_channel <= 1'b0;
    end else begin
        if ((1'b1 == (Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue))) begin
            ap_sync_reg_channel_write_tmp_7_loc_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_tmp_7_loc_channel <= ap_sync_channel_write_tmp_7_loc_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sync_ready) & (Block_proc4_U0_ap_ready == 1'b0))) begin
        Block_proc4_U0_ap_ready_count <= (Block_proc4_U0_ap_ready_count - 2'd1);
    end else if (((1'b0 == ap_sync_ready) & (1'b1 == Block_proc4_U0_ap_ready))) begin
        Block_proc4_U0_ap_ready_count <= (Block_proc4_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == Loop_batch_loop_proc_U0_ap_ready) & (1'b1 == ap_sync_ready))) begin
        Loop_batch_loop_proc_U0_ap_ready_count <= (Loop_batch_loop_proc_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Loop_batch_loop_proc_U0_ap_ready) & (1'b0 == ap_sync_ready))) begin
        Loop_batch_loop_proc_U0_ap_ready_count <= (Loop_batch_loop_proc_U0_ap_ready_count + 2'd1);
    end
end

assign Block_proc4_U0_ap_continue = (ap_sync_channel_write_tmp_7_loc_channel & ap_sync_channel_write_tmp_5_loc_channel & ap_sync_channel_write_tmp_3_loc_channel & ap_sync_channel_write_tmp_4_loc_channel);

assign Block_proc4_U0_ap_start = (ap_start & (ap_sync_reg_Block_proc4_U0_ap_ready ^ 1'b1));

assign Block_proc4_U0_start_full_n = 1'b0;

assign Block_proc4_U0_start_write = 1'b0;

assign Loop_batch_loop_proc_U0_ap_continue = 1'b1;

assign Loop_batch_loop_proc_U0_ap_start = (ap_start & tmp_4_loc_channel_empty_n & tmp_3_loc_channel_empty_n & tmp_5_loc_channel_empty_n & tmp_7_loc_channel_empty_n & (ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready ^ 1'b1));

assign Loop_batch_loop_proc_U0_start_full_n = 1'b0;

assign Loop_batch_loop_proc_U0_start_write = 1'b0;

assign ap_channel_done_tmp_3_loc_channel = (Block_proc4_U0_ap_done & (ap_sync_reg_channel_write_tmp_3_loc_channel ^ 1'b1));

assign ap_channel_done_tmp_4_loc_channel = (Block_proc4_U0_ap_done & (ap_sync_reg_channel_write_tmp_4_loc_channel ^ 1'b1));

assign ap_channel_done_tmp_5_loc_channel = (Block_proc4_U0_ap_done & (ap_sync_reg_channel_write_tmp_5_loc_channel ^ 1'b1));

assign ap_channel_done_tmp_7_loc_channel = (Block_proc4_U0_ap_done & (ap_sync_reg_channel_write_tmp_7_loc_channel ^ 1'b1));

assign ap_done = Loop_batch_loop_proc_U0_ap_done;

assign ap_idle = (Block_proc4_U0_ap_idle & Loop_batch_loop_proc_U0_ap_idle & (tmp_4_loc_channel_empty_n ^ 1'b1) & (tmp_3_loc_channel_empty_n ^ 1'b1) & (tmp_5_loc_channel_empty_n ^ 1'b1) & (tmp_7_loc_channel_empty_n ^ 1'b1));

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_Block_proc4_U0_ap_ready = (Block_proc4_U0_ap_ready | ap_sync_reg_Block_proc4_U0_ap_ready);

assign ap_sync_Loop_batch_loop_proc_U0_ap_ready = (Loop_batch_loop_proc_U0_ap_ready | ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready);

assign ap_sync_channel_write_tmp_3_loc_channel = ((ap_channel_done_tmp_3_loc_channel & tmp_3_loc_channel_full_n) | ap_sync_reg_channel_write_tmp_3_loc_channel);

assign ap_sync_channel_write_tmp_4_loc_channel = ((ap_channel_done_tmp_4_loc_channel & tmp_4_loc_channel_full_n) | ap_sync_reg_channel_write_tmp_4_loc_channel);

assign ap_sync_channel_write_tmp_5_loc_channel = ((ap_channel_done_tmp_5_loc_channel & tmp_5_loc_channel_full_n) | ap_sync_reg_channel_write_tmp_5_loc_channel);

assign ap_sync_channel_write_tmp_7_loc_channel = ((ap_channel_done_tmp_7_loc_channel & tmp_7_loc_channel_full_n) | ap_sync_reg_channel_write_tmp_7_loc_channel);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = Loop_batch_loop_proc_U0_ap_done;

assign ap_sync_ready = (ap_sync_Loop_batch_loop_proc_U0_ap_ready & ap_sync_Block_proc4_U0_ap_ready);

endmodule //conv_layer

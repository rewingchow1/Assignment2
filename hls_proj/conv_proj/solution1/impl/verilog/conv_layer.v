// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=448308803868,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=57,HLS_SYN_FF=10965,HLS_SYN_LUT=4734}" *)

module conv_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_20_fu_700_p2;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state57;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state58;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state63;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [63:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg  signed [31:0] k_read_reg_962;
reg   [31:0] s_read_reg_975;
reg  signed [31:0] iy_read_reg_981;
reg  signed [31:0] ix_read_reg_987;
reg  signed [31:0] id_read_reg_994;
reg   [31:0] oy_read_reg_1002;
reg  signed [31:0] ox_read_reg_1009;
reg  signed [31:0] od_read_reg_1017;
reg   [31:0] b_read_reg_1025;
reg   [29:0] tmp_6_reg_1030;
reg   [29:0] tmp_4_reg_1035;
wire  signed [31:0] grp_fu_479_p2;
reg  signed [31:0] tmp1_reg_1040;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_483_p2;
reg  signed [31:0] tmp2_reg_1045;
wire   [31:0] grp_fu_487_p2;
reg   [31:0] num_weights_reg_1050;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_3_fu_506_p1;
reg   [63:0] tmp_3_reg_1055;
wire    ap_CS_fsm_state8;
wire  signed [32:0] tmp_4_cast_fu_510_p1;
reg  signed [32:0] tmp_4_cast_reg_1061;
wire   [63:0] tmp_7_fu_519_p1;
reg   [63:0] tmp_7_reg_1066;
wire  signed [31:0] grp_fu_491_p2;
reg  signed [31:0] tmp3_reg_1071;
wire  signed [31:0] grp_fu_495_p2;
reg  signed [31:0] tmp5_reg_1076;
wire  signed [31:0] grp_fu_499_p2;
reg  signed [31:0] tmp8_reg_1081;
wire   [63:0] tmp4_fu_533_p2;
reg   [63:0] tmp4_reg_1086;
wire   [31:0] next_mul1_fu_539_p2;
reg   [31:0] next_mul1_reg_1091;
wire    ap_CS_fsm_state9;
wire   [31:0] next_mul3_fu_544_p2;
reg   [31:0] next_mul3_reg_1096;
wire   [30:0] b_1_fu_558_p2;
reg   [30:0] b_1_reg_1104;
wire  signed [32:0] tmp_11_cast_fu_574_p1;
reg  signed [32:0] tmp_11_cast_reg_1109;
wire    ap_CS_fsm_state11;
wire  signed [32:0] tmp_15_cast_fu_578_p1;
reg  signed [32:0] tmp_15_cast_reg_1114;
wire   [31:0] next_mul5_fu_582_p2;
reg   [31:0] next_mul5_reg_1119;
wire    ap_CS_fsm_state12;
wire   [31:0] next_mul7_fu_587_p2;
reg   [31:0] next_mul7_reg_1124;
wire   [30:0] o_d_1_fu_601_p2;
reg   [30:0] o_d_1_reg_1132;
reg   [63:0] mem_addr_reg_1137;
wire   [0:0] tmp_10_fu_596_p2;
wire   [31:0] grp_fu_631_p2;
reg   [31:0] tmp_13_reg_1143;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_636_p2;
reg   [31:0] tmp_15_reg_1148;
wire   [63:0] tmp6_fu_647_p2;
reg   [63:0] tmp6_reg_1153;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp9_fu_652_p2;
reg   [63:0] tmp9_reg_1158;
wire   [31:0] next_mul9_fu_657_p2;
reg   [31:0] next_mul9_reg_1163;
wire    ap_CS_fsm_state16;
wire   [31:0] next_mul8_fu_662_p2;
reg   [31:0] next_mul8_reg_1168;
wire   [30:0] o_y_1_fu_676_p2;
reg   [30:0] o_y_1_reg_1176;
wire   [31:0] tmp_19_fu_682_p2;
reg   [31:0] tmp_19_reg_1181;
wire   [0:0] tmp_17_fu_671_p2;
wire  signed [33:0] tmp_30_cast_fu_687_p1;
reg  signed [33:0] tmp_30_cast_reg_1186;
wire   [31:0] next_mul6_fu_691_p2;
reg   [31:0] next_mul6_reg_1191;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_block_state17_io;
wire   [30:0] o_x_1_fu_705_p2;
reg   [30:0] o_x_1_reg_1199;
reg   [31:0] output_element_reg_1204;
wire   [31:0] tmp_22_fu_711_p2;
reg   [31:0] tmp_22_reg_1209;
wire    ap_CS_fsm_state25;
wire   [31:0] next_mul4_fu_716_p2;
reg   [31:0] next_mul4_reg_1214;
wire    ap_CS_fsm_state26;
wire   [31:0] next_mul2_fu_721_p2;
reg   [31:0] next_mul2_reg_1219;
wire   [30:0] i_d_1_fu_735_p2;
reg   [30:0] i_d_1_reg_1227;
reg   [63:0] mem_addr_1_reg_1232;
wire   [0:0] tmp_24_fu_730_p2;
wire   [31:0] grp_fu_741_p2;
reg   [31:0] tmp_26_reg_1237;
wire    ap_CS_fsm_state28;
wire  signed [33:0] tmp_40_cast_fu_787_p1;
reg  signed [33:0] tmp_40_cast_reg_1242;
wire    ap_CS_fsm_state29;
wire  signed [33:0] tmp16_cast_fu_796_p1;
reg  signed [33:0] tmp16_cast_reg_1247;
wire   [31:0] next_mul_fu_800_p2;
reg   [31:0] next_mul_reg_1252;
wire    ap_CS_fsm_state30;
wire  signed [32:0] tmp_51_cast_fu_815_p1;
reg  signed [32:0] tmp_51_cast_reg_1260;
wire    ap_CS_fsm_state32;
wire  signed [32:0] tmp_53_cast_fu_819_p1;
reg  signed [32:0] tmp_53_cast_reg_1265;
wire   [31:0] iix_1_fu_828_p2;
reg   [31:0] iix_1_reg_1273;
wire    ap_CS_fsm_state33;
reg   [63:0] mem_addr_2_reg_1278;
wire   [0:0] tmp_40_fu_823_p2;
reg   [63:0] mem_addr_3_reg_1284;
wire   [31:0] i_x_1_fu_900_p2;
reg   [31:0] i_x_1_reg_1290;
wire   [31:0] i_y_1_fu_906_p2;
reg   [31:0] mem_addr_2_read_reg_1300;
reg   [31:0] mem_addr_3_read_reg_1305;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] tmp_44_reg_1310;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_444_p2;
wire    ap_CS_fsm_state56;
wire   [31:0] tmp_33_fu_954_p3;
reg   [31:0] tmp_33_reg_1320;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [30:0] b_s_reg_203;
reg  signed [31:0] phi_mul2_reg_214;
reg  signed [31:0] phi_mul4_reg_226;
reg   [30:0] o_d_reg_238;
reg  signed [31:0] phi_mul6_reg_249;
reg  signed [31:0] phi_mul8_reg_261;
reg   [30:0] o_y_reg_273;
reg   [31:0] i_y_reg_284;
reg   [31:0] phi_mul9_reg_296;
reg   [30:0] o_x_reg_307;
reg   [31:0] i_x_reg_319;
reg   [31:0] tmp_23_reg_331;
wire   [0:0] tmp_36_fu_805_p2;
reg   [30:0] i_d_reg_341;
reg  signed [31:0] phi_mul1_reg_352;
reg  signed [31:0] phi_mul3_reg_364;
reg   [31:0] tmp_35_reg_376;
reg  signed [31:0] i_y1_reg_388;
reg   [31:0] phi_mul_reg_399;
reg   [31:0] tmp_39_reg_411;
reg   [31:0] i_x1_reg_423;
reg   [31:0] iix_reg_433;
wire   [63:0] tmp_12_fu_620_p2;
wire   [63:0] tmp_34_fu_768_p2;
wire   [63:0] tmp_42_fu_856_p2;
wire   [63:0] tmp_43_fu_889_p2;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire  signed [61:0] tmp_s_fu_503_p1;
wire  signed [61:0] tmp_5_fu_516_p1;
wire  signed [32:0] tmp_5_cast_fu_513_p1;
wire   [32:0] tmp_fu_523_p2;
wire  signed [63:0] tmp14_cast_fu_529_p1;
wire   [31:0] b_cast_fu_549_p1;
wire   [31:0] grp_fu_564_p2;
wire   [31:0] grp_fu_569_p2;
wire   [31:0] o_d_cast_fu_592_p1;
wire   [32:0] tmp_17_cast_fu_607_p1;
wire   [32:0] tmp7_fu_611_p2;
wire  signed [63:0] tmp7_cast_fu_616_p1;
wire  signed [63:0] tmp_14_fu_641_p1;
wire  signed [63:0] tmp_16_fu_644_p1;
wire   [31:0] o_y_cast_fu_667_p1;
wire   [31:0] o_x_cast_fu_696_p1;
wire   [31:0] i_d_cast_fu_726_p1;
wire   [32:0] tmp_43_cast_fu_746_p1;
wire   [32:0] tmp21_fu_750_p2;
wire  signed [33:0] tmp23_cast_fu_755_p1;
wire   [33:0] tmp22_fu_759_p2;
wire  signed [63:0] tmp22_cast_fu_764_p1;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_779_p2;
wire  signed [32:0] tmp_37_cast_fu_784_p1;
wire   [32:0] tmp10_fu_791_p2;
wire   [31:0] grp_fu_810_p2;
wire  signed [32:0] tmp_56_cast_fu_834_p1;
wire   [32:0] tmp17_fu_838_p2;
wire  signed [33:0] tmp17_cast_fu_843_p1;
wire   [33:0] tmp15_fu_847_p2;
wire  signed [63:0] tmp15_cast_fu_852_p1;
wire  signed [32:0] tmp_63_cast_fu_867_p1;
wire   [32:0] tmp20_fu_871_p2;
wire  signed [33:0] tmp20_cast_fu_876_p1;
wire   [33:0] tmp19_fu_880_p2;
wire  signed [63:0] tmp19_cast_fu_885_p1;
wire   [31:0] tmp_33_to_int_fu_912_p1;
wire   [7:0] tmp_28_fu_916_p4;
wire   [22:0] tmp_29_fu_926_p1;
wire   [0:0] notrhs_fu_936_p2;
wire   [0:0] notlhs_fu_930_p2;
wire   [0:0] tmp_30_fu_942_p2;
wire   [0:0] grp_fu_453_p2;
wire   [0:0] tmp_32_fu_948_p2;
reg    grp_fu_453_ce;
wire   [0:0] tmp_8_fu_553_p2;
reg   [62:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

conv_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
conv_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

conv_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
conv_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(mem_addr_1_reg_1232),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(tmp_33_reg_1320),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

conv_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_39_reg_411),
    .din1(tmp_44_reg_1310),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

conv_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mem_addr_2_read_reg_1300),
    .din1(mem_addr_3_read_reg_1305),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

conv_layer_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_layer_fcmp_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_23_reg_331),
    .din1(32'd0),
    .ce(grp_fu_453_ce),
    .opcode(5'd2),
    .dout(grp_fu_453_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1017),
    .din1(id_read_reg_994),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(k_read_reg_962),
    .din1(k_read_reg_962),
    .ce(1'b1),
    .dout(grp_fu_483_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp2_reg_1045),
    .din1(tmp1_reg_1040),
    .ce(1'b1),
    .dout(grp_fu_487_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ix_read_reg_987),
    .din1(id_read_reg_994),
    .ce(1'b1),
    .dout(grp_fu_491_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ox_read_reg_1009),
    .din1(od_read_reg_1017),
    .ce(1'b1),
    .dout(grp_fu_495_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_994),
    .din1(k_read_reg_962),
    .ce(1'b1),
    .dout(grp_fu_499_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul2_reg_214),
    .din1(tmp3_reg_1071),
    .ce(1'b1),
    .dout(grp_fu_564_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul4_reg_226),
    .din1(tmp5_reg_1076),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul6_reg_249),
    .din1(tmp8_reg_1081),
    .ce(1'b1),
    .dout(grp_fu_631_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul8_reg_261),
    .din1(ox_read_reg_1009),
    .ce(1'b1),
    .dout(grp_fu_636_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul1_reg_352),
    .din1(iy_read_reg_981),
    .ce(1'b1),
    .dout(grp_fu_741_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul3_reg_364),
    .din1(k_read_reg_962),
    .ce(1'b1),
    .dout(grp_fu_779_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_y1_reg_388),
    .din1(ix_read_reg_987),
    .ce(1'b1),
    .dout(grp_fu_810_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1) & (ap_block_state17_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state34) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (ap_sig_ioackin_mem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & (1'b1 == mem_ARREADY)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((1'b1 == mem_AWREADY)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((1'b1 == mem_WREADY)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_10_fu_596_p2 == 1'd0))) begin
        b_s_reg_203 <= b_1_reg_1104;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_s_reg_203 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == tmp_36_fu_805_p2))) begin
        i_d_reg_341 <= i_d_1_reg_1227;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_d_reg_341 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_x1_reg_423 <= i_x_1_reg_1290;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_x1_reg_423 <= i_x_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (mem_BVALID == 1'b1))) begin
        i_x_reg_319 <= next_mul6_reg_1191;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_17_fu_671_p2))) begin
        i_x_reg_319 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == tmp_40_fu_823_p2))) begin
        i_y1_reg_388 <= i_y_1_fu_906_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_y1_reg_388 <= i_y_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (tmp_20_fu_700_p2 == 1'd0))) begin
        i_y_reg_284 <= next_mul8_reg_1168;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_y_reg_284 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        iix_reg_433 <= iix_1_reg_1273;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        iix_reg_433 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_17_fu_671_p2 == 1'd0))) begin
        o_d_reg_238 <= o_d_1_reg_1132;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        o_d_reg_238 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (mem_BVALID == 1'b1))) begin
        o_x_reg_307 <= o_x_1_reg_1199;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_17_fu_671_p2))) begin
        o_x_reg_307 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (tmp_20_fu_700_p2 == 1'd0))) begin
        o_y_reg_273 <= o_y_1_reg_1176;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        o_y_reg_273 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == tmp_36_fu_805_p2))) begin
        phi_mul1_reg_352 <= next_mul2_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_mul1_reg_352 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_10_fu_596_p2 == 1'd0))) begin
        phi_mul2_reg_214 <= next_mul3_reg_1096;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul2_reg_214 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == tmp_36_fu_805_p2))) begin
        phi_mul3_reg_364 <= next_mul4_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_mul3_reg_364 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_10_fu_596_p2 == 1'd0))) begin
        phi_mul4_reg_226 <= next_mul1_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul4_reg_226 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_17_fu_671_p2 == 1'd0))) begin
        phi_mul6_reg_249 <= next_mul7_reg_1124;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul6_reg_249 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_17_fu_671_p2 == 1'd0))) begin
        phi_mul8_reg_261 <= next_mul5_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul8_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (tmp_20_fu_700_p2 == 1'd0))) begin
        phi_mul9_reg_296 <= next_mul9_reg_1163;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul9_reg_296 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == tmp_40_fu_823_p2))) begin
        phi_mul_reg_399 <= next_mul_reg_1252;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_mul_reg_399 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == tmp_36_fu_805_p2))) begin
        tmp_23_reg_331 <= tmp_35_reg_376;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_23_reg_331 <= output_element_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == tmp_40_fu_823_p2))) begin
        tmp_35_reg_376 <= tmp_39_reg_411;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_35_reg_376 <= tmp_23_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_39_reg_411 <= grp_fu_444_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_39_reg_411 <= tmp_35_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_1_reg_1104 <= b_1_fu_558_p2;
        next_mul1_reg_1091 <= next_mul1_fu_539_p2;
        next_mul3_reg_1096 <= next_mul3_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_read_reg_1025 <= b;
        id_read_reg_994 <= id;
        ix_read_reg_987 <= ix;
        iy_read_reg_981 <= iy;
        k_read_reg_962 <= k;
        od_read_reg_1017 <= od;
        ox_read_reg_1009 <= ox;
        oy_read_reg_1002 <= oy;
        s_read_reg_975 <= s;
        tmp_4_reg_1035 <= {{output_offset[31:2]}};
        tmp_6_reg_1030 <= {{input_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_d_1_reg_1227 <= i_d_1_fu_735_p2;
        next_mul2_reg_1219 <= next_mul2_fu_721_p2;
        next_mul4_reg_1214 <= next_mul4_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == tmp_40_fu_823_p2))) begin
        i_x_1_reg_1290 <= i_x_1_fu_900_p2;
        mem_addr_2_reg_1278 <= tmp_42_fu_856_p2;
        mem_addr_3_reg_1284 <= tmp_43_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        iix_1_reg_1273 <= iix_1_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (tmp_24_fu_730_p2 == 1'd0))) begin
        mem_addr_1_reg_1232 <= tmp_34_fu_768_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (mem_RVALID == 1'b1))) begin
        mem_addr_2_read_reg_1300 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (mem_RVALID == 1'b1))) begin
        mem_addr_3_read_reg_1305 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == tmp_10_fu_596_p2))) begin
        mem_addr_reg_1137 <= tmp_12_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        next_mul5_reg_1119 <= next_mul5_fu_582_p2;
        next_mul7_reg_1124 <= next_mul7_fu_587_p2;
        o_d_1_reg_1132 <= o_d_1_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0))) begin
        next_mul6_reg_1191 <= next_mul6_fu_691_p2;
        o_x_1_reg_1199 <= o_x_1_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        next_mul8_reg_1168 <= next_mul8_fu_662_p2;
        next_mul9_reg_1163 <= next_mul9_fu_657_p2;
        o_y_1_reg_1176 <= o_y_1_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        next_mul_reg_1252 <= next_mul_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        num_weights_reg_1050 <= grp_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (mem_RVALID == 1'b1))) begin
        output_element_reg_1204 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp16_cast_reg_1247 <= tmp16_cast_fu_796_p1;
        tmp_40_cast_reg_1242 <= tmp_40_cast_fu_787_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_1040 <= grp_fu_479_p2;
        tmp2_reg_1045 <= grp_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp3_reg_1071 <= grp_fu_491_p2;
        tmp4_reg_1086 <= tmp4_fu_533_p2;
        tmp5_reg_1076 <= grp_fu_495_p2;
        tmp8_reg_1081 <= grp_fu_499_p2;
        tmp_3_reg_1055[61 : 0] <= tmp_3_fu_506_p1[61 : 0];
        tmp_4_cast_reg_1061 <= tmp_4_cast_fu_510_p1;
        tmp_7_reg_1066[61 : 0] <= tmp_7_fu_519_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp6_reg_1153 <= tmp6_fu_647_p2;
        tmp9_reg_1158 <= tmp9_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_11_cast_reg_1109 <= tmp_11_cast_fu_574_p1;
        tmp_15_cast_reg_1114 <= tmp_15_cast_fu_578_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_13_reg_1143 <= grp_fu_631_p2;
        tmp_15_reg_1148 <= grp_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == tmp_17_fu_671_p2))) begin
        tmp_19_reg_1181 <= tmp_19_fu_682_p2;
        tmp_30_cast_reg_1186 <= tmp_30_cast_fu_687_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_22_reg_1209 <= tmp_22_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_26_reg_1237 <= grp_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        tmp_33_reg_1320 <= tmp_33_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_44_reg_1310 <= grp_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_51_cast_reg_1260 <= tmp_51_cast_fu_815_p1;
        tmp_53_cast_reg_1265 <= tmp_53_cast_fu_819_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_8_fu_553_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_8_fu_553_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_mem_AWREADY == 1'b1)))) begin
        grp_fu_453_ce = 1'b1;
    end else begin
        grp_fu_453_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            mem_ARADDR = mem_addr_3_reg_1284;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            mem_ARADDR = mem_addr_2_reg_1278;
        end else if (((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1))) begin
            mem_ARADDR = mem_addr_reg_1137;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_reg_ioackin_mem_ARREADY)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) & (1'b0 == ap_reg_ioackin_mem_AWREADY))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) & (mem_BVALID == 1'b1))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (mem_RVALID == 1'b1)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_reg_ioackin_mem_WREADY))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_8_fu_553_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (tmp_10_fu_596_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (tmp_17_fu_671_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (ap_block_state17_io == 1'b0) & (tmp_20_fu_700_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state17) & (tmp_20_fu_700_p2 == 1'd1) & (ap_block_state17_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (tmp_24_fu_730_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == tmp_36_fu_805_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == tmp_40_fu_823_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17_io = ((tmp_20_fu_700_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_558_p2 = (b_s_reg_203 + 31'd1);

assign b_cast_fu_549_p1 = b_s_reg_203;

assign i_d_1_fu_735_p2 = (i_d_reg_341 + 31'd1);

assign i_d_cast_fu_726_p1 = i_d_reg_341;

assign i_x_1_fu_900_p2 = (i_x1_reg_423 + 32'd1);

assign i_y_1_fu_906_p2 = ($signed(i_y1_reg_388) + $signed(32'd1));

assign iix_1_fu_828_p2 = (iix_reg_433 + 32'd1);

assign next_mul1_fu_539_p2 = ($signed(phi_mul4_reg_226) + $signed(oy_read_reg_1002));

assign next_mul2_fu_721_p2 = ($signed(phi_mul1_reg_352) + $signed(ix_read_reg_987));

assign next_mul3_fu_544_p2 = ($signed(phi_mul2_reg_214) + $signed(iy_read_reg_981));

assign next_mul4_fu_716_p2 = ($signed(phi_mul3_reg_364) + $signed(k_read_reg_962));

assign next_mul5_fu_582_p2 = ($signed(phi_mul8_reg_261) + $signed(oy_read_reg_1002));

assign next_mul6_fu_691_p2 = (i_x_reg_319 + s_read_reg_975);

assign next_mul7_fu_587_p2 = ($signed(phi_mul6_reg_249) + $signed(k_read_reg_962));

assign next_mul8_fu_662_p2 = (i_y_reg_284 + s_read_reg_975);

assign next_mul9_fu_657_p2 = ($signed(phi_mul9_reg_296) + $signed(ox_read_reg_1009));

assign next_mul_fu_800_p2 = ($signed(phi_mul_reg_399) + $signed(k_read_reg_962));

assign notlhs_fu_930_p2 = ((tmp_28_fu_916_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_936_p2 = ((tmp_29_fu_926_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_1_fu_601_p2 = (o_d_reg_238 + 31'd1);

assign o_d_cast_fu_592_p1 = o_d_reg_238;

assign o_x_1_fu_705_p2 = (o_x_reg_307 + 31'd1);

assign o_x_cast_fu_696_p1 = o_x_reg_307;

assign o_y_1_fu_676_p2 = (o_y_reg_273 + 31'd1);

assign o_y_cast_fu_667_p1 = o_y_reg_273;

assign tmp10_fu_791_p2 = ($signed(tmp_11_cast_reg_1109) + $signed(tmp_37_cast_fu_784_p1));

assign tmp14_cast_fu_529_p1 = $signed(tmp_fu_523_p2);

assign tmp15_cast_fu_852_p1 = $signed(tmp15_fu_847_p2);

assign tmp15_fu_847_p2 = ($signed(tmp17_cast_fu_843_p1) + $signed(tmp16_cast_reg_1247));

assign tmp16_cast_fu_796_p1 = $signed(tmp10_fu_791_p2);

assign tmp17_cast_fu_843_p1 = $signed(tmp17_fu_838_p2);

assign tmp17_fu_838_p2 = ($signed(tmp_51_cast_reg_1260) + $signed(tmp_56_cast_fu_834_p1));

assign tmp19_cast_fu_885_p1 = $signed(tmp19_fu_880_p2);

assign tmp19_fu_880_p2 = ($signed(tmp20_cast_fu_876_p1) + $signed(tmp_40_cast_reg_1242));

assign tmp20_cast_fu_876_p1 = $signed(tmp20_fu_871_p2);

assign tmp20_fu_871_p2 = ($signed(tmp_53_cast_reg_1265) + $signed(tmp_63_cast_fu_867_p1));

assign tmp21_fu_750_p2 = ($signed(tmp_15_cast_reg_1114) + $signed(tmp_43_cast_fu_746_p1));

assign tmp22_cast_fu_764_p1 = $signed(tmp22_fu_759_p2);

assign tmp22_fu_759_p2 = ($signed(tmp23_cast_fu_755_p1) + $signed(tmp_30_cast_reg_1186));

assign tmp23_cast_fu_755_p1 = $signed(tmp21_fu_750_p2);

assign tmp4_fu_533_p2 = ($signed(tmp14_cast_fu_529_p1) + $signed(tmp_3_fu_506_p1));

assign tmp6_fu_647_p2 = ($signed(tmp_3_reg_1055) + $signed(tmp_14_fu_641_p1));

assign tmp7_cast_fu_616_p1 = $signed(tmp7_fu_611_p2);

assign tmp7_fu_611_p2 = ($signed(tmp_4_cast_reg_1061) + $signed(tmp_17_cast_fu_607_p1));

assign tmp9_fu_652_p2 = ($signed(tmp_7_reg_1066) + $signed(tmp_16_fu_644_p1));

assign tmp_10_fu_596_p2 = (($signed(o_d_cast_fu_592_p1) < $signed(od_read_reg_1017)) ? 1'b1 : 1'b0);

assign tmp_11_cast_fu_574_p1 = $signed(grp_fu_564_p2);

assign tmp_12_fu_620_p2 = ($signed(tmp7_cast_fu_616_p1) + $signed(tmp_3_reg_1055));

assign tmp_14_fu_641_p1 = $signed(tmp_13_reg_1143);

assign tmp_15_cast_fu_578_p1 = $signed(grp_fu_569_p2);

assign tmp_16_fu_644_p1 = $signed(tmp_15_reg_1148);

assign tmp_17_cast_fu_607_p1 = o_d_reg_238;

assign tmp_17_fu_671_p2 = (($signed(o_y_cast_fu_667_p1) < $signed(oy_read_reg_1002)) ? 1'b1 : 1'b0);

assign tmp_19_fu_682_p2 = ($signed(i_y_reg_284) + $signed(k_read_reg_962));

assign tmp_20_fu_700_p2 = (($signed(o_x_cast_fu_696_p1) < $signed(ox_read_reg_1009)) ? 1'b1 : 1'b0);

assign tmp_22_fu_711_p2 = ($signed(i_x_reg_319) + $signed(k_read_reg_962));

assign tmp_24_fu_730_p2 = (($signed(i_d_cast_fu_726_p1) < $signed(id_read_reg_994)) ? 1'b1 : 1'b0);

assign tmp_28_fu_916_p4 = {{tmp_33_to_int_fu_912_p1[30:23]}};

assign tmp_29_fu_926_p1 = tmp_33_to_int_fu_912_p1[22:0];

assign tmp_30_cast_fu_687_p1 = $signed(phi_mul9_reg_296);

assign tmp_30_fu_942_p2 = (notrhs_fu_936_p2 | notlhs_fu_930_p2);

assign tmp_32_fu_948_p2 = (tmp_30_fu_942_p2 & grp_fu_453_p2);

assign tmp_33_fu_954_p3 = ((tmp_32_fu_948_p2[0:0] === 1'b1) ? tmp_23_reg_331 : 32'd0);

assign tmp_33_to_int_fu_912_p1 = tmp_23_reg_331;

assign tmp_34_fu_768_p2 = ($signed(tmp22_cast_fu_764_p1) + $signed(tmp9_reg_1158));

assign tmp_36_fu_805_p2 = (($signed(i_y1_reg_388) < $signed(tmp_19_reg_1181)) ? 1'b1 : 1'b0);

assign tmp_37_cast_fu_784_p1 = $signed(tmp_26_reg_1237);

assign tmp_3_fu_506_p1 = $unsigned(tmp_s_fu_503_p1);

assign tmp_40_cast_fu_787_p1 = $signed(grp_fu_779_p2);

assign tmp_40_fu_823_p2 = (($signed(i_x1_reg_423) < $signed(tmp_22_reg_1209)) ? 1'b1 : 1'b0);

assign tmp_42_fu_856_p2 = ($signed(tmp15_cast_fu_852_p1) + $signed(tmp4_reg_1086));

assign tmp_43_cast_fu_746_p1 = o_x_reg_307;

assign tmp_43_fu_889_p2 = ($signed(tmp19_cast_fu_885_p1) + $signed(tmp6_reg_1153));

assign tmp_4_cast_fu_510_p1 = $signed(num_weights_reg_1050);

assign tmp_51_cast_fu_815_p1 = $signed(grp_fu_810_p2);

assign tmp_53_cast_fu_819_p1 = $signed(phi_mul_reg_399);

assign tmp_56_cast_fu_834_p1 = $signed(i_x1_reg_423);

assign tmp_5_cast_fu_513_p1 = od_read_reg_1017;

assign tmp_5_fu_516_p1 = $signed(tmp_4_reg_1035);

assign tmp_63_cast_fu_867_p1 = $signed(iix_reg_433);

assign tmp_7_fu_519_p1 = $unsigned(tmp_5_fu_516_p1);

assign tmp_8_fu_553_p2 = (($signed(b_cast_fu_549_p1) < $signed(b_read_reg_1025)) ? 1'b1 : 1'b0);

assign tmp_fu_523_p2 = ($signed(tmp_5_cast_fu_513_p1) + $signed(tmp_4_cast_fu_510_p1));

assign tmp_s_fu_503_p1 = $signed(tmp_6_reg_1030);

always @ (posedge ap_clk) begin
    tmp_3_reg_1055[63:62] <= 2'b00;
    tmp_7_reg_1066[63:62] <= 2'b00;
end

endmodule //conv_layer

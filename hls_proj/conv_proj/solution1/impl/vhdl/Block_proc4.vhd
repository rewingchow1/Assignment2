-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    id : IN STD_LOGIC_VECTOR (31 downto 0);
    od : IN STD_LOGIC_VECTOR (31 downto 0);
    k : IN STD_LOGIC_VECTOR (31 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    output_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    ox : IN STD_LOGIC_VECTOR (31 downto 0);
    oy : IN STD_LOGIC_VECTOR (31 downto 0);
    ix : IN STD_LOGIC_VECTOR (31 downto 0);
    iy : IN STD_LOGIC_VECTOR (31 downto 0);
    s : IN STD_LOGIC_VECTOR (31 downto 0);
    id_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    id_out_full_n : IN STD_LOGIC;
    id_out_write : OUT STD_LOGIC;
    od_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    od_out_full_n : IN STD_LOGIC;
    od_out_write : OUT STD_LOGIC;
    k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_out_full_n : IN STD_LOGIC;
    k_out_write : OUT STD_LOGIC;
    b_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_out_full_n : IN STD_LOGIC;
    b_out_write : OUT STD_LOGIC;
    ox_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ox_out_full_n : IN STD_LOGIC;
    ox_out_write : OUT STD_LOGIC;
    oy_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    oy_out_full_n : IN STD_LOGIC;
    oy_out_write : OUT STD_LOGIC;
    ix_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ix_out_full_n : IN STD_LOGIC;
    ix_out_write : OUT STD_LOGIC;
    iy_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    iy_out_full_n : IN STD_LOGIC;
    iy_out_write : OUT STD_LOGIC;
    s_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_out_full_n : IN STD_LOGIC;
    s_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Block_proc4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal id_out_blk_n : STD_LOGIC;
    signal od_out_blk_n : STD_LOGIC;
    signal k_out_blk_n : STD_LOGIC;
    signal b_out_blk_n : STD_LOGIC;
    signal ox_out_blk_n : STD_LOGIC;
    signal oy_out_blk_n : STD_LOGIC;
    signal ix_out_blk_n : STD_LOGIC;
    signal iy_out_blk_n : STD_LOGIC;
    signal s_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_fu_220_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_69_i_i_fu_230_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_out_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_i_i_fu_241_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_72_i_i_fu_251_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_4_out_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_out_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_out_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_out_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_200_ce : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_206_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component conv_layer_mul_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_layer_mul_32bkb_U1 : component conv_layer_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => od,
        din1 => id,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p2);

    conv_layer_mul_32bkb_U2 : component conv_layer_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => k,
        din1 => k,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    conv_layer_mul_32bkb_U3 : component conv_layer_mul_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp4_reg_305,
        din1 => tmp_reg_300,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_0_preg <= tmp_4_out_fu_216_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
                ap_return_1_preg(8) <= '0';
                ap_return_1_preg(9) <= '0';
                ap_return_1_preg(10) <= '0';
                ap_return_1_preg(11) <= '0';
                ap_return_1_preg(12) <= '0';
                ap_return_1_preg(13) <= '0';
                ap_return_1_preg(14) <= '0';
                ap_return_1_preg(15) <= '0';
                ap_return_1_preg(16) <= '0';
                ap_return_1_preg(17) <= '0';
                ap_return_1_preg(18) <= '0';
                ap_return_1_preg(19) <= '0';
                ap_return_1_preg(20) <= '0';
                ap_return_1_preg(21) <= '0';
                ap_return_1_preg(22) <= '0';
                ap_return_1_preg(23) <= '0';
                ap_return_1_preg(24) <= '0';
                ap_return_1_preg(25) <= '0';
                ap_return_1_preg(26) <= '0';
                ap_return_1_preg(27) <= '0';
                ap_return_1_preg(28) <= '0';
                ap_return_1_preg(29) <= '0';
                ap_return_1_preg(30) <= '0';
                ap_return_1_preg(31) <= '0';
                ap_return_1_preg(32) <= '0';
                ap_return_1_preg(33) <= '0';
                ap_return_1_preg(34) <= '0';
                ap_return_1_preg(35) <= '0';
                ap_return_1_preg(36) <= '0';
                ap_return_1_preg(37) <= '0';
                ap_return_1_preg(38) <= '0';
                ap_return_1_preg(39) <= '0';
                ap_return_1_preg(40) <= '0';
                ap_return_1_preg(41) <= '0';
                ap_return_1_preg(42) <= '0';
                ap_return_1_preg(43) <= '0';
                ap_return_1_preg(44) <= '0';
                ap_return_1_preg(45) <= '0';
                ap_return_1_preg(46) <= '0';
                ap_return_1_preg(47) <= '0';
                ap_return_1_preg(48) <= '0';
                ap_return_1_preg(49) <= '0';
                ap_return_1_preg(50) <= '0';
                ap_return_1_preg(51) <= '0';
                ap_return_1_preg(52) <= '0';
                ap_return_1_preg(53) <= '0';
                ap_return_1_preg(54) <= '0';
                ap_return_1_preg(55) <= '0';
                ap_return_1_preg(56) <= '0';
                ap_return_1_preg(57) <= '0';
                ap_return_1_preg(58) <= '0';
                ap_return_1_preg(59) <= '0';
                ap_return_1_preg(60) <= '0';
                ap_return_1_preg(61) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                                        ap_return_1_preg(61 downto 0) <= tmp_3_out_fu_234_p1(61 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_2_preg <= tmp_5_out_fu_238_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg(0) <= '0';
                ap_return_3_preg(1) <= '0';
                ap_return_3_preg(2) <= '0';
                ap_return_3_preg(3) <= '0';
                ap_return_3_preg(4) <= '0';
                ap_return_3_preg(5) <= '0';
                ap_return_3_preg(6) <= '0';
                ap_return_3_preg(7) <= '0';
                ap_return_3_preg(8) <= '0';
                ap_return_3_preg(9) <= '0';
                ap_return_3_preg(10) <= '0';
                ap_return_3_preg(11) <= '0';
                ap_return_3_preg(12) <= '0';
                ap_return_3_preg(13) <= '0';
                ap_return_3_preg(14) <= '0';
                ap_return_3_preg(15) <= '0';
                ap_return_3_preg(16) <= '0';
                ap_return_3_preg(17) <= '0';
                ap_return_3_preg(18) <= '0';
                ap_return_3_preg(19) <= '0';
                ap_return_3_preg(20) <= '0';
                ap_return_3_preg(21) <= '0';
                ap_return_3_preg(22) <= '0';
                ap_return_3_preg(23) <= '0';
                ap_return_3_preg(24) <= '0';
                ap_return_3_preg(25) <= '0';
                ap_return_3_preg(26) <= '0';
                ap_return_3_preg(27) <= '0';
                ap_return_3_preg(28) <= '0';
                ap_return_3_preg(29) <= '0';
                ap_return_3_preg(30) <= '0';
                ap_return_3_preg(31) <= '0';
                ap_return_3_preg(32) <= '0';
                ap_return_3_preg(33) <= '0';
                ap_return_3_preg(34) <= '0';
                ap_return_3_preg(35) <= '0';
                ap_return_3_preg(36) <= '0';
                ap_return_3_preg(37) <= '0';
                ap_return_3_preg(38) <= '0';
                ap_return_3_preg(39) <= '0';
                ap_return_3_preg(40) <= '0';
                ap_return_3_preg(41) <= '0';
                ap_return_3_preg(42) <= '0';
                ap_return_3_preg(43) <= '0';
                ap_return_3_preg(44) <= '0';
                ap_return_3_preg(45) <= '0';
                ap_return_3_preg(46) <= '0';
                ap_return_3_preg(47) <= '0';
                ap_return_3_preg(48) <= '0';
                ap_return_3_preg(49) <= '0';
                ap_return_3_preg(50) <= '0';
                ap_return_3_preg(51) <= '0';
                ap_return_3_preg(52) <= '0';
                ap_return_3_preg(53) <= '0';
                ap_return_3_preg(54) <= '0';
                ap_return_3_preg(55) <= '0';
                ap_return_3_preg(56) <= '0';
                ap_return_3_preg(57) <= '0';
                ap_return_3_preg(58) <= '0';
                ap_return_3_preg(59) <= '0';
                ap_return_3_preg(60) <= '0';
                ap_return_3_preg(61) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                                        ap_return_3_preg(61 downto 0) <= tmp_7_out_fu_255_p1(61 downto 0);
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp4_reg_305 <= grp_fu_206_p2;
                tmp_reg_300 <= grp_fu_200_p2;
            end if;
        end if;
    end process;
    ap_return_1_preg(63 downto 62) <= "00";
    ap_return_3_preg(63 downto 62) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state6, tmp_4_out_fu_216_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_0 <= tmp_4_out_fu_216_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state6, tmp_3_out_fu_234_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_1 <= tmp_3_out_fu_234_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state6, tmp_5_out_fu_238_p1, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_2 <= tmp_5_out_fu_238_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state6, tmp_7_out_fu_255_p1, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_3 <= tmp_7_out_fu_255_p1;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    b_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, b_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            b_out_blk_n <= b_out_full_n;
        else 
            b_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_out_din <= b;

    b_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            b_out_write <= ap_const_logic_1;
        else 
            b_out_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_200_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n)))) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_200_ce <= ap_const_logic_1;
        else 
            grp_fu_200_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_206_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n)))) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_206_ce <= ap_const_logic_1;
        else 
            grp_fu_206_ce <= ap_const_logic_0;
        end if; 
    end process;


    id_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            id_out_blk_n <= id_out_full_n;
        else 
            id_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    id_out_din <= id;

    id_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            id_out_write <= ap_const_logic_1;
        else 
            id_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ix_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            ix_out_blk_n <= ix_out_full_n;
        else 
            ix_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ix_out_din <= ix;

    ix_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            ix_out_write <= ap_const_logic_1;
        else 
            ix_out_write <= ap_const_logic_0;
        end if; 
    end process;


    iy_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, iy_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            iy_out_blk_n <= iy_out_full_n;
        else 
            iy_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    iy_out_din <= iy;

    iy_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            iy_out_write <= ap_const_logic_1;
        else 
            iy_out_write <= ap_const_logic_0;
        end if; 
    end process;


    k_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, k_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            k_out_blk_n <= k_out_full_n;
        else 
            k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    k_out_din <= k;

    k_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            k_out_write <= ap_const_logic_1;
        else 
            k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    od_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, od_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            od_out_blk_n <= od_out_full_n;
        else 
            od_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    od_out_din <= od;

    od_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            od_out_write <= ap_const_logic_1;
        else 
            od_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ox_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ox_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            ox_out_blk_n <= ox_out_full_n;
        else 
            ox_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ox_out_din <= ox;

    ox_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            ox_out_write <= ap_const_logic_1;
        else 
            ox_out_write <= ap_const_logic_0;
        end if; 
    end process;


    oy_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, oy_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            oy_out_blk_n <= oy_out_full_n;
        else 
            oy_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    oy_out_din <= oy;

    oy_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            oy_out_write <= ap_const_logic_1;
        else 
            oy_out_write <= ap_const_logic_0;
        end if; 
    end process;


    s_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            s_out_blk_n <= s_out_full_n;
        else 
            s_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_out_din <= s;

    s_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, id_out_full_n, od_out_full_n, k_out_full_n, b_out_full_n, ox_out_full_n, oy_out_full_n, ix_out_full_n, iy_out_full_n, s_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = id_out_full_n) or (ap_const_logic_0 = od_out_full_n) or (ap_const_logic_0 = k_out_full_n) or (ap_const_logic_0 = b_out_full_n) or (ap_const_logic_0 = ox_out_full_n) or (ap_const_logic_0 = oy_out_full_n) or (ap_const_logic_0 = ix_out_full_n) or (ap_const_logic_0 = iy_out_full_n) or (ap_const_logic_0 = s_out_full_n))))) then 
            s_out_write <= ap_const_logic_1;
        else 
            s_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_out_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_i_i_fu_230_p1),64));
        tmp_4_out_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_212_p2),64));

    tmp_5_out_fu_238_p0 <= od;
        tmp_5_out_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_out_fu_238_p0),64));

        tmp_69_i_i_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_i_i_fu_220_p4),62));

    tmp_6_i_i_fu_220_p4 <= input_offset(31 downto 2);
    tmp_71_i_i_fu_241_p4 <= output_offset(31 downto 2);
        tmp_72_i_i_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_71_i_i_fu_241_p4),62));

    tmp_7_out_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_i_i_fu_251_p1),64));
end behav;

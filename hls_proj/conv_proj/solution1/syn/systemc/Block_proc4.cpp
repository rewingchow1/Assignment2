// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Block_proc4::ap_ST_fsm_state1 = "1";
const sc_lv<6> Block_proc4::ap_ST_fsm_state2 = "10";
const sc_lv<6> Block_proc4::ap_ST_fsm_state3 = "100";
const sc_lv<6> Block_proc4::ap_ST_fsm_state4 = "1000";
const sc_lv<6> Block_proc4::ap_ST_fsm_state5 = "10000";
const sc_lv<6> Block_proc4::ap_ST_fsm_state6 = "100000";
const sc_lv<32> Block_proc4::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Block_proc4::ap_const_lv32_2 = "10";
const sc_lv<32> Block_proc4::ap_const_lv32_5 = "101";
const sc_lv<32> Block_proc4::ap_const_lv32_3 = "11";
const sc_lv<32> Block_proc4::ap_const_lv32_1F = "11111";
const sc_lv<32> Block_proc4::ap_const_lv32_1 = "1";
const sc_lv<64> Block_proc4::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool Block_proc4::ap_const_boolean_1 = true;

Block_proc4::Block_proc4(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv_layer_mul_32bkb_U1 = new conv_layer_mul_32bkb<1,3,32,32,32>("conv_layer_mul_32bkb_U1");
    conv_layer_mul_32bkb_U1->clk(ap_clk);
    conv_layer_mul_32bkb_U1->reset(ap_rst);
    conv_layer_mul_32bkb_U1->din0(od);
    conv_layer_mul_32bkb_U1->din1(id);
    conv_layer_mul_32bkb_U1->ce(grp_fu_200_ce);
    conv_layer_mul_32bkb_U1->dout(grp_fu_200_p2);
    conv_layer_mul_32bkb_U2 = new conv_layer_mul_32bkb<1,3,32,32,32>("conv_layer_mul_32bkb_U2");
    conv_layer_mul_32bkb_U2->clk(ap_clk);
    conv_layer_mul_32bkb_U2->reset(ap_rst);
    conv_layer_mul_32bkb_U2->din0(k);
    conv_layer_mul_32bkb_U2->din1(k);
    conv_layer_mul_32bkb_U2->ce(grp_fu_206_ce);
    conv_layer_mul_32bkb_U2->dout(grp_fu_206_p2);
    conv_layer_mul_32bkb_U3 = new conv_layer_mul_32bkb<1,3,32,32,32>("conv_layer_mul_32bkb_U3");
    conv_layer_mul_32bkb_U3->clk(ap_clk);
    conv_layer_mul_32bkb_U3->reset(ap_rst);
    conv_layer_mul_32bkb_U3->din0(tmp4_reg_305);
    conv_layer_mul_32bkb_U3->din1(tmp_reg_300);
    conv_layer_mul_32bkb_U3->ce(ap_var_for_const0);
    conv_layer_mul_32bkb_U3->dout(grp_fu_212_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_4_out_fu_216_p1 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_3_out_fu_234_p1 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_out_fu_238_p1 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_out_fu_255_p1 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_b_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b_out_full_n );

    SC_METHOD(thread_b_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_b_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_grp_fu_200_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_fu_206_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_id_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );

    SC_METHOD(thread_id_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_id_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_ix_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ix_out_full_n );

    SC_METHOD(thread_ix_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ix );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_ix_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_iy_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( iy_out_full_n );

    SC_METHOD(thread_iy_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( iy );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_iy_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_k_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( k_out_full_n );

    SC_METHOD(thread_k_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( k );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_k_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_od_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( od_out_full_n );

    SC_METHOD(thread_od_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( od );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_od_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_ox_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ox_out_full_n );

    SC_METHOD(thread_ox_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ox );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_ox_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_oy_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( oy_out_full_n );

    SC_METHOD(thread_oy_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( oy );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_oy_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_s_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_s_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( s );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_s_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_METHOD(thread_tmp_3_out_fu_234_p1);
    sensitive << ( tmp_69_i_i_fu_230_p1 );

    SC_METHOD(thread_tmp_4_out_fu_216_p1);
    sensitive << ( grp_fu_212_p2 );

    SC_METHOD(thread_tmp_5_out_fu_238_p0);
    sensitive << ( od );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_5_out_fu_238_p1);
    sensitive << ( tmp_5_out_fu_238_p0 );

    SC_METHOD(thread_tmp_69_i_i_fu_230_p1);
    sensitive << ( tmp_6_i_i_fu_220_p4 );

    SC_METHOD(thread_tmp_6_i_i_fu_220_p4);
    sensitive << ( input_offset );

    SC_METHOD(thread_tmp_71_i_i_fu_241_p4);
    sensitive << ( output_offset );

    SC_METHOD(thread_tmp_72_i_i_fu_251_p1);
    sensitive << ( tmp_71_i_i_fu_241_p4 );

    SC_METHOD(thread_tmp_7_out_fu_255_p1);
    sensitive << ( tmp_72_i_i_fu_251_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( id_out_full_n );
    sensitive << ( od_out_full_n );
    sensitive << ( k_out_full_n );
    sensitive << ( b_out_full_n );
    sensitive << ( ox_out_full_n );
    sensitive << ( oy_out_full_n );
    sensitive << ( ix_out_full_n );
    sensitive << ( iy_out_full_n );
    sensitive << ( s_out_full_n );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000001";
    ap_return_0_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_return_1_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_return_2_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_return_3_preg = "0000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, id, "(port)id");
    sc_trace(mVcdFile, od, "(port)od");
    sc_trace(mVcdFile, k, "(port)k");
    sc_trace(mVcdFile, input_offset, "(port)input_offset");
    sc_trace(mVcdFile, output_offset, "(port)output_offset");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ox, "(port)ox");
    sc_trace(mVcdFile, oy, "(port)oy");
    sc_trace(mVcdFile, ix, "(port)ix");
    sc_trace(mVcdFile, iy, "(port)iy");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, id_out_din, "(port)id_out_din");
    sc_trace(mVcdFile, id_out_full_n, "(port)id_out_full_n");
    sc_trace(mVcdFile, id_out_write, "(port)id_out_write");
    sc_trace(mVcdFile, od_out_din, "(port)od_out_din");
    sc_trace(mVcdFile, od_out_full_n, "(port)od_out_full_n");
    sc_trace(mVcdFile, od_out_write, "(port)od_out_write");
    sc_trace(mVcdFile, k_out_din, "(port)k_out_din");
    sc_trace(mVcdFile, k_out_full_n, "(port)k_out_full_n");
    sc_trace(mVcdFile, k_out_write, "(port)k_out_write");
    sc_trace(mVcdFile, b_out_din, "(port)b_out_din");
    sc_trace(mVcdFile, b_out_full_n, "(port)b_out_full_n");
    sc_trace(mVcdFile, b_out_write, "(port)b_out_write");
    sc_trace(mVcdFile, ox_out_din, "(port)ox_out_din");
    sc_trace(mVcdFile, ox_out_full_n, "(port)ox_out_full_n");
    sc_trace(mVcdFile, ox_out_write, "(port)ox_out_write");
    sc_trace(mVcdFile, oy_out_din, "(port)oy_out_din");
    sc_trace(mVcdFile, oy_out_full_n, "(port)oy_out_full_n");
    sc_trace(mVcdFile, oy_out_write, "(port)oy_out_write");
    sc_trace(mVcdFile, ix_out_din, "(port)ix_out_din");
    sc_trace(mVcdFile, ix_out_full_n, "(port)ix_out_full_n");
    sc_trace(mVcdFile, ix_out_write, "(port)ix_out_write");
    sc_trace(mVcdFile, iy_out_din, "(port)iy_out_din");
    sc_trace(mVcdFile, iy_out_full_n, "(port)iy_out_full_n");
    sc_trace(mVcdFile, iy_out_write, "(port)iy_out_write");
    sc_trace(mVcdFile, s_out_din, "(port)s_out_din");
    sc_trace(mVcdFile, s_out_full_n, "(port)s_out_full_n");
    sc_trace(mVcdFile, s_out_write, "(port)s_out_write");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, id_out_blk_n, "id_out_blk_n");
    sc_trace(mVcdFile, od_out_blk_n, "od_out_blk_n");
    sc_trace(mVcdFile, k_out_blk_n, "k_out_blk_n");
    sc_trace(mVcdFile, b_out_blk_n, "b_out_blk_n");
    sc_trace(mVcdFile, ox_out_blk_n, "ox_out_blk_n");
    sc_trace(mVcdFile, oy_out_blk_n, "oy_out_blk_n");
    sc_trace(mVcdFile, ix_out_blk_n, "ix_out_blk_n");
    sc_trace(mVcdFile, iy_out_blk_n, "iy_out_blk_n");
    sc_trace(mVcdFile, s_out_blk_n, "s_out_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, grp_fu_200_p2, "grp_fu_200_p2");
    sc_trace(mVcdFile, tmp_reg_300, "tmp_reg_300");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_206_p2, "grp_fu_206_p2");
    sc_trace(mVcdFile, tmp4_reg_305, "tmp4_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_212_p2, "grp_fu_212_p2");
    sc_trace(mVcdFile, tmp_6_i_i_fu_220_p4, "tmp_6_i_i_fu_220_p4");
    sc_trace(mVcdFile, tmp_69_i_i_fu_230_p1, "tmp_69_i_i_fu_230_p1");
    sc_trace(mVcdFile, tmp_5_out_fu_238_p0, "tmp_5_out_fu_238_p0");
    sc_trace(mVcdFile, tmp_71_i_i_fu_241_p4, "tmp_71_i_i_fu_241_p4");
    sc_trace(mVcdFile, tmp_72_i_i_fu_251_p1, "tmp_72_i_i_fu_251_p1");
    sc_trace(mVcdFile, tmp_4_out_fu_216_p1, "tmp_4_out_fu_216_p1");
    sc_trace(mVcdFile, tmp_3_out_fu_234_p1, "tmp_3_out_fu_234_p1");
    sc_trace(mVcdFile, tmp_5_out_fu_238_p1, "tmp_5_out_fu_238_p1");
    sc_trace(mVcdFile, tmp_7_out_fu_255_p1, "tmp_7_out_fu_255_p1");
    sc_trace(mVcdFile, grp_fu_200_ce, "grp_fu_200_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_206_ce, "grp_fu_206_ce");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_proc4::~Block_proc4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete conv_layer_mul_32bkb_U1;
    delete conv_layer_mul_32bkb_U2;
    delete conv_layer_mul_32bkb_U3;
}

void Block_proc4::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Block_proc4::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_0_preg = tmp_4_out_fu_216_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_1_preg = tmp_3_out_fu_234_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_2_preg = tmp_5_out_fu_238_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_return_3_preg = tmp_7_out_fu_255_p1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp4_reg_305 = grp_fu_206_p2.read();
        tmp_reg_300 = grp_fu_200_p2.read();
    }
}

void Block_proc4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc4::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_proc4::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_proc4::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Block_proc4::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Block_proc4::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read()));
}

void Block_proc4::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc4::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc4::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_0 = tmp_4_out_fu_216_p1.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void Block_proc4::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_1 = tmp_3_out_fu_234_p1.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void Block_proc4::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_2 = tmp_5_out_fu_238_p1.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void Block_proc4::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_return_3 = tmp_7_out_fu_255_p1.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void Block_proc4::thread_b_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        b_out_blk_n = b_out_full_n.read();
    } else {
        b_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_b_out_din() {
    b_out_din = b.read();
}

void Block_proc4::thread_b_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        b_out_write = ap_const_logic_1;
    } else {
        b_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_grp_fu_200_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_fu_200_ce = ap_const_logic_1;
    } else {
        grp_fu_200_ce = ap_const_logic_0;
    }
}

void Block_proc4::thread_grp_fu_206_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_fu_206_ce = ap_const_logic_1;
    } else {
        grp_fu_206_ce = ap_const_logic_0;
    }
}

void Block_proc4::thread_id_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        id_out_blk_n = id_out_full_n.read();
    } else {
        id_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_id_out_din() {
    id_out_din = id.read();
}

void Block_proc4::thread_id_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        id_out_write = ap_const_logic_1;
    } else {
        id_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_ix_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ix_out_blk_n = ix_out_full_n.read();
    } else {
        ix_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_ix_out_din() {
    ix_out_din = ix.read();
}

void Block_proc4::thread_ix_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        ix_out_write = ap_const_logic_1;
    } else {
        ix_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_iy_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        iy_out_blk_n = iy_out_full_n.read();
    } else {
        iy_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_iy_out_din() {
    iy_out_din = iy.read();
}

void Block_proc4::thread_iy_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        iy_out_write = ap_const_logic_1;
    } else {
        iy_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_k_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        k_out_blk_n = k_out_full_n.read();
    } else {
        k_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_k_out_din() {
    k_out_din = k.read();
}

void Block_proc4::thread_k_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        k_out_write = ap_const_logic_1;
    } else {
        k_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_od_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        od_out_blk_n = od_out_full_n.read();
    } else {
        od_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_od_out_din() {
    od_out_din = od.read();
}

void Block_proc4::thread_od_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        od_out_write = ap_const_logic_1;
    } else {
        od_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_ox_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ox_out_blk_n = ox_out_full_n.read();
    } else {
        ox_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_ox_out_din() {
    ox_out_din = ox.read();
}

void Block_proc4::thread_ox_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        ox_out_write = ap_const_logic_1;
    } else {
        ox_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_oy_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        oy_out_blk_n = oy_out_full_n.read();
    } else {
        oy_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_oy_out_din() {
    oy_out_din = oy.read();
}

void Block_proc4::thread_oy_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        oy_out_write = ap_const_logic_1;
    } else {
        oy_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_s_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        s_out_blk_n = s_out_full_n.read();
    } else {
        s_out_blk_n = ap_const_logic_1;
    }
}

void Block_proc4::thread_s_out_din() {
    s_out_din = s.read();
}

void Block_proc4::thread_s_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
        s_out_write = ap_const_logic_1;
    } else {
        s_out_write = ap_const_logic_0;
    }
}

void Block_proc4::thread_tmp_3_out_fu_234_p1() {
    tmp_3_out_fu_234_p1 = esl_zext<64,62>(tmp_69_i_i_fu_230_p1.read());
}

void Block_proc4::thread_tmp_4_out_fu_216_p1() {
    tmp_4_out_fu_216_p1 = esl_sext<64,32>(grp_fu_212_p2.read());
}

void Block_proc4::thread_tmp_5_out_fu_238_p0() {
    tmp_5_out_fu_238_p0 = od.read();
}

void Block_proc4::thread_tmp_5_out_fu_238_p1() {
    tmp_5_out_fu_238_p1 = esl_sext<64,32>(tmp_5_out_fu_238_p0.read());
}

void Block_proc4::thread_tmp_69_i_i_fu_230_p1() {
    tmp_69_i_i_fu_230_p1 = esl_sext<62,30>(tmp_6_i_i_fu_220_p4.read());
}

void Block_proc4::thread_tmp_6_i_i_fu_220_p4() {
    tmp_6_i_i_fu_220_p4 = input_offset.read().range(31, 2);
}

void Block_proc4::thread_tmp_71_i_i_fu_241_p4() {
    tmp_71_i_i_fu_241_p4 = output_offset.read().range(31, 2);
}

void Block_proc4::thread_tmp_72_i_i_fu_251_p1() {
    tmp_72_i_i_fu_251_p1 = esl_sext<62,30>(tmp_71_i_i_fu_241_p4.read());
}

void Block_proc4::thread_tmp_7_out_fu_255_p1() {
    tmp_7_out_fu_255_p1 = esl_zext<64,62>(tmp_72_i_i_fu_251_p1.read());
}

void Block_proc4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, id_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, od_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, k_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, b_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ox_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, oy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ix_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, iy_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, s_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}


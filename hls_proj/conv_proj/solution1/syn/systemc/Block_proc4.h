// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_proc4_HH_
#define _Block_proc4_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv_layer_mul_32bkb.h"

namespace ap_rtl {

struct Block_proc4 : public sc_module {
    // Port declarations 49
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > id;
    sc_in< sc_lv<32> > od;
    sc_in< sc_lv<32> > k;
    sc_in< sc_lv<32> > input_offset;
    sc_in< sc_lv<32> > output_offset;
    sc_in< sc_lv<32> > b;
    sc_in< sc_lv<32> > ox;
    sc_in< sc_lv<32> > oy;
    sc_in< sc_lv<32> > ix;
    sc_in< sc_lv<32> > iy;
    sc_in< sc_lv<32> > s;
    sc_out< sc_lv<32> > id_out_din;
    sc_in< sc_logic > id_out_full_n;
    sc_out< sc_logic > id_out_write;
    sc_out< sc_lv<32> > od_out_din;
    sc_in< sc_logic > od_out_full_n;
    sc_out< sc_logic > od_out_write;
    sc_out< sc_lv<32> > k_out_din;
    sc_in< sc_logic > k_out_full_n;
    sc_out< sc_logic > k_out_write;
    sc_out< sc_lv<32> > b_out_din;
    sc_in< sc_logic > b_out_full_n;
    sc_out< sc_logic > b_out_write;
    sc_out< sc_lv<32> > ox_out_din;
    sc_in< sc_logic > ox_out_full_n;
    sc_out< sc_logic > ox_out_write;
    sc_out< sc_lv<32> > oy_out_din;
    sc_in< sc_logic > oy_out_full_n;
    sc_out< sc_logic > oy_out_write;
    sc_out< sc_lv<32> > ix_out_din;
    sc_in< sc_logic > ix_out_full_n;
    sc_out< sc_logic > ix_out_write;
    sc_out< sc_lv<32> > iy_out_din;
    sc_in< sc_logic > iy_out_full_n;
    sc_out< sc_logic > iy_out_write;
    sc_out< sc_lv<32> > s_out_din;
    sc_in< sc_logic > s_out_full_n;
    sc_out< sc_logic > s_out_write;
    sc_out< sc_lv<64> > ap_return_0;
    sc_out< sc_lv<64> > ap_return_1;
    sc_out< sc_lv<64> > ap_return_2;
    sc_out< sc_lv<64> > ap_return_3;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Block_proc4(sc_module_name name);
    SC_HAS_PROCESS(Block_proc4);

    ~Block_proc4();

    sc_trace_file* mVcdFile;

    conv_layer_mul_32bkb<1,3,32,32,32>* conv_layer_mul_32bkb_U1;
    conv_layer_mul_32bkb<1,3,32,32,32>* conv_layer_mul_32bkb_U2;
    conv_layer_mul_32bkb<1,3,32,32,32>* conv_layer_mul_32bkb_U3;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > id_out_blk_n;
    sc_signal< sc_logic > od_out_blk_n;
    sc_signal< sc_logic > k_out_blk_n;
    sc_signal< sc_logic > b_out_blk_n;
    sc_signal< sc_logic > ox_out_blk_n;
    sc_signal< sc_logic > oy_out_blk_n;
    sc_signal< sc_logic > ix_out_blk_n;
    sc_signal< sc_logic > iy_out_blk_n;
    sc_signal< sc_logic > s_out_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > grp_fu_200_p2;
    sc_signal< sc_lv<32> > tmp_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > grp_fu_206_p2;
    sc_signal< sc_lv<32> > tmp4_reg_305;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_212_p2;
    sc_signal< sc_lv<30> > tmp_6_i_i_fu_220_p4;
    sc_signal< sc_lv<62> > tmp_69_i_i_fu_230_p1;
    sc_signal< sc_lv<32> > tmp_5_out_fu_238_p0;
    sc_signal< sc_lv<30> > tmp_71_i_i_fu_241_p4;
    sc_signal< sc_lv<62> > tmp_72_i_i_fu_251_p1;
    sc_signal< sc_lv<64> > tmp_4_out_fu_216_p1;
    sc_signal< sc_lv<64> > tmp_3_out_fu_234_p1;
    sc_signal< sc_lv<64> > tmp_5_out_fu_238_p1;
    sc_signal< sc_lv<64> > tmp_7_out_fu_255_p1;
    sc_signal< sc_logic > grp_fu_200_ce;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_fu_206_ce;
    sc_signal< sc_lv<64> > ap_return_0_preg;
    sc_signal< sc_lv<64> > ap_return_1_preg;
    sc_signal< sc_lv<64> > ap_return_2_preg;
    sc_signal< sc_lv<64> > ap_return_3_preg;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_b_out_blk_n();
    void thread_b_out_din();
    void thread_b_out_write();
    void thread_grp_fu_200_ce();
    void thread_grp_fu_206_ce();
    void thread_id_out_blk_n();
    void thread_id_out_din();
    void thread_id_out_write();
    void thread_ix_out_blk_n();
    void thread_ix_out_din();
    void thread_ix_out_write();
    void thread_iy_out_blk_n();
    void thread_iy_out_din();
    void thread_iy_out_write();
    void thread_k_out_blk_n();
    void thread_k_out_din();
    void thread_k_out_write();
    void thread_od_out_blk_n();
    void thread_od_out_din();
    void thread_od_out_write();
    void thread_ox_out_blk_n();
    void thread_ox_out_din();
    void thread_ox_out_write();
    void thread_oy_out_blk_n();
    void thread_oy_out_din();
    void thread_oy_out_write();
    void thread_s_out_blk_n();
    void thread_s_out_din();
    void thread_s_out_write();
    void thread_tmp_3_out_fu_234_p1();
    void thread_tmp_4_out_fu_216_p1();
    void thread_tmp_5_out_fu_238_p0();
    void thread_tmp_5_out_fu_238_p1();
    void thread_tmp_69_i_i_fu_230_p1();
    void thread_tmp_6_i_i_fu_220_p4();
    void thread_tmp_71_i_i_fu_241_p4();
    void thread_tmp_72_i_i_fu_251_p1();
    void thread_tmp_7_out_fu_255_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

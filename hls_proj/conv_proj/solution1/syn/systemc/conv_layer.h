// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _conv_layer_HH_
#define _conv_layer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc4.h"
#include "Loop_batch_loop_proc.h"
#include "fifo_w32_d1_A.h"
#include "fifo_w64_d2_A.h"
#include "conv_layer_CTRL_BUS_s_axi.h"
#include "conv_layer_mem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MEM_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_MEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_MEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_BUSER_WIDTH = 1>
struct conv_layer : public sc_module {
    // Port declarations 65
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_mem_AWVALID;
    sc_in< sc_logic > m_axi_mem_AWREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_AWADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_AWID;
    sc_out< sc_lv<8> > m_axi_mem_AWLEN;
    sc_out< sc_lv<3> > m_axi_mem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_mem_AWBURST;
    sc_out< sc_lv<2> > m_axi_mem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_mem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_mem_AWPROT;
    sc_out< sc_lv<4> > m_axi_mem_AWQOS;
    sc_out< sc_lv<4> > m_axi_mem_AWREGION;
    sc_out< sc_uint<C_M_AXI_MEM_AWUSER_WIDTH> > m_axi_mem_AWUSER;
    sc_out< sc_logic > m_axi_mem_WVALID;
    sc_in< sc_logic > m_axi_mem_WREADY;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_WDATA;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH/8> > m_axi_mem_WSTRB;
    sc_out< sc_logic > m_axi_mem_WLAST;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_WID;
    sc_out< sc_uint<C_M_AXI_MEM_WUSER_WIDTH> > m_axi_mem_WUSER;
    sc_out< sc_logic > m_axi_mem_ARVALID;
    sc_in< sc_logic > m_axi_mem_ARREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_ARADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_ARID;
    sc_out< sc_lv<8> > m_axi_mem_ARLEN;
    sc_out< sc_lv<3> > m_axi_mem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_mem_ARBURST;
    sc_out< sc_lv<2> > m_axi_mem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_mem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_mem_ARPROT;
    sc_out< sc_lv<4> > m_axi_mem_ARQOS;
    sc_out< sc_lv<4> > m_axi_mem_ARREGION;
    sc_out< sc_uint<C_M_AXI_MEM_ARUSER_WIDTH> > m_axi_mem_ARUSER;
    sc_in< sc_logic > m_axi_mem_RVALID;
    sc_out< sc_logic > m_axi_mem_RREADY;
    sc_in< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_RDATA;
    sc_in< sc_logic > m_axi_mem_RLAST;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_RID;
    sc_in< sc_uint<C_M_AXI_MEM_RUSER_WIDTH> > m_axi_mem_RUSER;
    sc_in< sc_lv<2> > m_axi_mem_RRESP;
    sc_in< sc_logic > m_axi_mem_BVALID;
    sc_out< sc_logic > m_axi_mem_BREADY;
    sc_in< sc_lv<2> > m_axi_mem_BRESP;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_BID;
    sc_in< sc_uint<C_M_AXI_MEM_BUSER_WIDTH> > m_axi_mem_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    conv_layer(sc_module_name name);
    SC_HAS_PROCESS(conv_layer);

    ~conv_layer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    conv_layer_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* conv_layer_CTRL_BUS_s_axi_U;
    conv_layer_mem_m_axi<32,64,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>* conv_layer_mem_m_axi_U;
    Block_proc4* Block_proc4_U0;
    Loop_batch_loop_proc* Loop_batch_loop_proc_U0;
    fifo_w32_d1_A* id_channel_U;
    fifo_w32_d1_A* od_channel_U;
    fifo_w32_d1_A* k_channel_U;
    fifo_w32_d1_A* b_channel_U;
    fifo_w32_d1_A* ox_channel_U;
    fifo_w32_d1_A* oy_channel_U;
    fifo_w32_d1_A* ix_channel_U;
    fifo_w32_d1_A* iy_channel_U;
    fifo_w32_d1_A* s_channel_U;
    fifo_w64_d2_A* tmp_4_loc_channel_U;
    fifo_w64_d2_A* tmp_3_loc_channel_U;
    fifo_w64_d2_A* tmp_5_loc_channel_U;
    fifo_w64_d2_A* tmp_7_loc_channel_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > input_offset;
    sc_signal< sc_lv<32> > output_offset;
    sc_signal< sc_lv<32> > b;
    sc_signal< sc_lv<32> > od;
    sc_signal< sc_lv<32> > ox;
    sc_signal< sc_lv<32> > oy;
    sc_signal< sc_lv<32> > id;
    sc_signal< sc_lv<32> > ix;
    sc_signal< sc_lv<32> > iy;
    sc_signal< sc_lv<32> > s;
    sc_signal< sc_lv<32> > k;
    sc_signal< sc_logic > mem_AWREADY;
    sc_signal< sc_logic > mem_WREADY;
    sc_signal< sc_logic > mem_ARREADY;
    sc_signal< sc_logic > mem_RVALID;
    sc_signal< sc_lv<32> > mem_RDATA;
    sc_signal< sc_logic > mem_RLAST;
    sc_signal< sc_lv<1> > mem_RID;
    sc_signal< sc_lv<1> > mem_RUSER;
    sc_signal< sc_lv<2> > mem_RRESP;
    sc_signal< sc_logic > mem_BVALID;
    sc_signal< sc_lv<2> > mem_BRESP;
    sc_signal< sc_lv<1> > mem_BID;
    sc_signal< sc_lv<1> > mem_BUSER;
    sc_signal< sc_logic > Block_proc4_U0_ap_start;
    sc_signal< sc_logic > Block_proc4_U0_ap_done;
    sc_signal< sc_logic > Block_proc4_U0_ap_continue;
    sc_signal< sc_logic > Block_proc4_U0_ap_idle;
    sc_signal< sc_logic > Block_proc4_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_proc4_U0_id_out_din;
    sc_signal< sc_logic > Block_proc4_U0_id_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_od_out_din;
    sc_signal< sc_logic > Block_proc4_U0_od_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_k_out_din;
    sc_signal< sc_logic > Block_proc4_U0_k_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_b_out_din;
    sc_signal< sc_logic > Block_proc4_U0_b_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_ox_out_din;
    sc_signal< sc_logic > Block_proc4_U0_ox_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_oy_out_din;
    sc_signal< sc_logic > Block_proc4_U0_oy_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_ix_out_din;
    sc_signal< sc_logic > Block_proc4_U0_ix_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_iy_out_din;
    sc_signal< sc_logic > Block_proc4_U0_iy_out_write;
    sc_signal< sc_lv<32> > Block_proc4_U0_s_out_din;
    sc_signal< sc_logic > Block_proc4_U0_s_out_write;
    sc_signal< sc_lv<64> > Block_proc4_U0_ap_return_0;
    sc_signal< sc_lv<64> > Block_proc4_U0_ap_return_1;
    sc_signal< sc_lv<64> > Block_proc4_U0_ap_return_2;
    sc_signal< sc_lv<64> > Block_proc4_U0_ap_return_3;
    sc_signal< sc_logic > ap_channel_done_tmp_7_loc_channel;
    sc_signal< sc_logic > tmp_7_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp_7_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp_7_loc_channel;
    sc_signal< sc_logic > ap_channel_done_tmp_5_loc_channel;
    sc_signal< sc_logic > tmp_5_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp_5_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp_5_loc_channel;
    sc_signal< sc_logic > ap_channel_done_tmp_3_loc_channel;
    sc_signal< sc_logic > tmp_3_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp_3_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp_3_loc_channel;
    sc_signal< sc_logic > ap_channel_done_tmp_4_loc_channel;
    sc_signal< sc_logic > tmp_4_loc_channel_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_tmp_4_loc_channel;
    sc_signal< sc_logic > ap_sync_channel_write_tmp_4_loc_channel;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ap_ready;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_b_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_od_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_id_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ix_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_iy_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_ox_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_oy_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_AWVALID;
    sc_signal< sc_lv<64> > Loop_batch_loop_proc_U0_m_axi_mem_AWADDR;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_AWID;
    sc_signal< sc_lv<32> > Loop_batch_loop_proc_U0_m_axi_mem_AWLEN;
    sc_signal< sc_lv<3> > Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE;
    sc_signal< sc_lv<2> > Loop_batch_loop_proc_U0_m_axi_mem_AWBURST;
    sc_signal< sc_lv<2> > Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE;
    sc_signal< sc_lv<3> > Loop_batch_loop_proc_U0_m_axi_mem_AWPROT;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_AWQOS;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_AWREGION;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_AWUSER;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_WVALID;
    sc_signal< sc_lv<32> > Loop_batch_loop_proc_U0_m_axi_mem_WDATA;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_WSTRB;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_WLAST;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_WID;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_WUSER;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_ARVALID;
    sc_signal< sc_lv<64> > Loop_batch_loop_proc_U0_m_axi_mem_ARADDR;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_ARID;
    sc_signal< sc_lv<32> > Loop_batch_loop_proc_U0_m_axi_mem_ARLEN;
    sc_signal< sc_lv<3> > Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE;
    sc_signal< sc_lv<2> > Loop_batch_loop_proc_U0_m_axi_mem_ARBURST;
    sc_signal< sc_lv<2> > Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE;
    sc_signal< sc_lv<3> > Loop_batch_loop_proc_U0_m_axi_mem_ARPROT;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_ARQOS;
    sc_signal< sc_lv<4> > Loop_batch_loop_proc_U0_m_axi_mem_ARREGION;
    sc_signal< sc_lv<1> > Loop_batch_loop_proc_U0_m_axi_mem_ARUSER;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_RREADY;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_m_axi_mem_BREADY;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_k_read;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_s_read;
    sc_signal< sc_logic > id_channel_full_n;
    sc_signal< sc_lv<32> > id_channel_dout;
    sc_signal< sc_logic > id_channel_empty_n;
    sc_signal< sc_logic > od_channel_full_n;
    sc_signal< sc_lv<32> > od_channel_dout;
    sc_signal< sc_logic > od_channel_empty_n;
    sc_signal< sc_logic > k_channel_full_n;
    sc_signal< sc_lv<32> > k_channel_dout;
    sc_signal< sc_logic > k_channel_empty_n;
    sc_signal< sc_logic > b_channel_full_n;
    sc_signal< sc_lv<32> > b_channel_dout;
    sc_signal< sc_logic > b_channel_empty_n;
    sc_signal< sc_logic > ox_channel_full_n;
    sc_signal< sc_lv<32> > ox_channel_dout;
    sc_signal< sc_logic > ox_channel_empty_n;
    sc_signal< sc_logic > oy_channel_full_n;
    sc_signal< sc_lv<32> > oy_channel_dout;
    sc_signal< sc_logic > oy_channel_empty_n;
    sc_signal< sc_logic > ix_channel_full_n;
    sc_signal< sc_lv<32> > ix_channel_dout;
    sc_signal< sc_logic > ix_channel_empty_n;
    sc_signal< sc_logic > iy_channel_full_n;
    sc_signal< sc_lv<32> > iy_channel_dout;
    sc_signal< sc_logic > iy_channel_empty_n;
    sc_signal< sc_logic > s_channel_full_n;
    sc_signal< sc_lv<32> > s_channel_dout;
    sc_signal< sc_logic > s_channel_empty_n;
    sc_signal< sc_lv<64> > tmp_4_loc_channel_dout;
    sc_signal< sc_logic > tmp_4_loc_channel_empty_n;
    sc_signal< sc_lv<64> > tmp_3_loc_channel_dout;
    sc_signal< sc_logic > tmp_3_loc_channel_empty_n;
    sc_signal< sc_lv<64> > tmp_5_loc_channel_dout;
    sc_signal< sc_logic > tmp_5_loc_channel_empty_n;
    sc_signal< sc_lv<64> > tmp_7_loc_channel_dout;
    sc_signal< sc_logic > tmp_7_loc_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_batch_loop_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_batch_loop_proc_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Block_proc4_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Block_proc4_U0_ap_ready;
    sc_signal< sc_lv<2> > Block_proc4_U0_ap_ready_count;
    sc_signal< sc_logic > Block_proc4_U0_start_full_n;
    sc_signal< sc_logic > Block_proc4_U0_start_write;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_batch_loop_proc_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_MEM_TARGET_ADDR;
    static const int C_M_AXI_MEM_USER_VALUE;
    static const int C_M_AXI_MEM_PROT_VALUE;
    static const int C_M_AXI_MEM_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Block_proc4_U0_ap_continue();
    void thread_Block_proc4_U0_ap_start();
    void thread_Block_proc4_U0_start_full_n();
    void thread_Block_proc4_U0_start_write();
    void thread_Loop_batch_loop_proc_U0_ap_continue();
    void thread_Loop_batch_loop_proc_U0_ap_start();
    void thread_Loop_batch_loop_proc_U0_start_full_n();
    void thread_Loop_batch_loop_proc_U0_start_write();
    void thread_ap_channel_done_tmp_3_loc_channel();
    void thread_ap_channel_done_tmp_4_loc_channel();
    void thread_ap_channel_done_tmp_5_loc_channel();
    void thread_ap_channel_done_tmp_7_loc_channel();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_Block_proc4_U0_ap_ready();
    void thread_ap_sync_Loop_batch_loop_proc_U0_ap_ready();
    void thread_ap_sync_channel_write_tmp_3_loc_channel();
    void thread_ap_sync_channel_write_tmp_4_loc_channel();
    void thread_ap_sync_channel_write_tmp_5_loc_channel();
    void thread_ap_sync_channel_write_tmp_7_loc_channel();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

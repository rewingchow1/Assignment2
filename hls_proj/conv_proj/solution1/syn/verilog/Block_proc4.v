// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        id,
        od,
        k,
        input_offset,
        output_offset,
        b,
        ox,
        oy,
        ix,
        iy,
        s,
        id_out_din,
        id_out_full_n,
        id_out_write,
        od_out_din,
        od_out_full_n,
        od_out_write,
        k_out_din,
        k_out_full_n,
        k_out_write,
        b_out_din,
        b_out_full_n,
        b_out_write,
        ox_out_din,
        ox_out_full_n,
        ox_out_write,
        oy_out_din,
        oy_out_full_n,
        oy_out_write,
        ix_out_din,
        ix_out_full_n,
        ix_out_write,
        iy_out_din,
        iy_out_full_n,
        iy_out_write,
        s_out_din,
        s_out_full_n,
        s_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] id;
input  [31:0] od;
input  [31:0] k;
input  [31:0] input_offset;
input  [31:0] output_offset;
input  [31:0] b;
input  [31:0] ox;
input  [31:0] oy;
input  [31:0] ix;
input  [31:0] iy;
input  [31:0] s;
output  [31:0] id_out_din;
input   id_out_full_n;
output   id_out_write;
output  [31:0] od_out_din;
input   od_out_full_n;
output   od_out_write;
output  [31:0] k_out_din;
input   k_out_full_n;
output   k_out_write;
output  [31:0] b_out_din;
input   b_out_full_n;
output   b_out_write;
output  [31:0] ox_out_din;
input   ox_out_full_n;
output   ox_out_write;
output  [31:0] oy_out_din;
input   oy_out_full_n;
output   oy_out_write;
output  [31:0] ix_out_din;
input   ix_out_full_n;
output   ix_out_write;
output  [31:0] iy_out_din;
input   iy_out_full_n;
output   iy_out_write;
output  [31:0] s_out_din;
input   s_out_full_n;
output   s_out_write;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg id_out_write;
reg od_out_write;
reg k_out_write;
reg b_out_write;
reg ox_out_write;
reg oy_out_write;
reg ix_out_write;
reg iy_out_write;
reg s_out_write;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;
reg[63:0] ap_return_2;
reg[63:0] ap_return_3;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    id_out_blk_n;
reg    od_out_blk_n;
reg    k_out_blk_n;
reg    b_out_blk_n;
reg    ox_out_blk_n;
reg    oy_out_blk_n;
reg    ix_out_blk_n;
reg    iy_out_blk_n;
reg    s_out_blk_n;
reg    ap_block_state1;
wire  signed [31:0] grp_fu_200_p2;
reg  signed [31:0] tmp_reg_300;
wire    ap_CS_fsm_state3;
wire  signed [31:0] grp_fu_206_p2;
reg  signed [31:0] tmp4_reg_305;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_212_p2;
wire   [29:0] tmp_6_i_i_fu_220_p4;
wire  signed [61:0] tmp_69_i_i_fu_230_p1;
wire  signed [31:0] tmp_5_out_fu_238_p0;
wire   [29:0] tmp_71_i_i_fu_241_p4;
wire  signed [61:0] tmp_72_i_i_fu_251_p1;
wire  signed [63:0] tmp_4_out_fu_216_p1;
wire   [63:0] tmp_3_out_fu_234_p1;
wire  signed [63:0] tmp_5_out_fu_238_p1;
wire   [63:0] tmp_7_out_fu_255_p1;
reg    grp_fu_200_ce;
wire    ap_CS_fsm_state2;
reg    grp_fu_206_ce;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [63:0] ap_return_3_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 64'd0;
#0 ap_return_3_preg = 64'd0;
end

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(od),
    .din1(id),
    .ce(grp_fu_200_ce),
    .dout(grp_fu_200_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k),
    .din1(k),
    .ce(grp_fu_206_ce),
    .dout(grp_fu_206_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp4_reg_305),
    .din1(tmp_reg_300),
    .ce(1'b1),
    .dout(grp_fu_212_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_0_preg <= tmp_4_out_fu_216_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
        ap_return_1_preg[13] <= 1'b0;
        ap_return_1_preg[14] <= 1'b0;
        ap_return_1_preg[15] <= 1'b0;
        ap_return_1_preg[16] <= 1'b0;
        ap_return_1_preg[17] <= 1'b0;
        ap_return_1_preg[18] <= 1'b0;
        ap_return_1_preg[19] <= 1'b0;
        ap_return_1_preg[20] <= 1'b0;
        ap_return_1_preg[21] <= 1'b0;
        ap_return_1_preg[22] <= 1'b0;
        ap_return_1_preg[23] <= 1'b0;
        ap_return_1_preg[24] <= 1'b0;
        ap_return_1_preg[25] <= 1'b0;
        ap_return_1_preg[26] <= 1'b0;
        ap_return_1_preg[27] <= 1'b0;
        ap_return_1_preg[28] <= 1'b0;
        ap_return_1_preg[29] <= 1'b0;
        ap_return_1_preg[30] <= 1'b0;
        ap_return_1_preg[31] <= 1'b0;
        ap_return_1_preg[32] <= 1'b0;
        ap_return_1_preg[33] <= 1'b0;
        ap_return_1_preg[34] <= 1'b0;
        ap_return_1_preg[35] <= 1'b0;
        ap_return_1_preg[36] <= 1'b0;
        ap_return_1_preg[37] <= 1'b0;
        ap_return_1_preg[38] <= 1'b0;
        ap_return_1_preg[39] <= 1'b0;
        ap_return_1_preg[40] <= 1'b0;
        ap_return_1_preg[41] <= 1'b0;
        ap_return_1_preg[42] <= 1'b0;
        ap_return_1_preg[43] <= 1'b0;
        ap_return_1_preg[44] <= 1'b0;
        ap_return_1_preg[45] <= 1'b0;
        ap_return_1_preg[46] <= 1'b0;
        ap_return_1_preg[47] <= 1'b0;
        ap_return_1_preg[48] <= 1'b0;
        ap_return_1_preg[49] <= 1'b0;
        ap_return_1_preg[50] <= 1'b0;
        ap_return_1_preg[51] <= 1'b0;
        ap_return_1_preg[52] <= 1'b0;
        ap_return_1_preg[53] <= 1'b0;
        ap_return_1_preg[54] <= 1'b0;
        ap_return_1_preg[55] <= 1'b0;
        ap_return_1_preg[56] <= 1'b0;
        ap_return_1_preg[57] <= 1'b0;
        ap_return_1_preg[58] <= 1'b0;
        ap_return_1_preg[59] <= 1'b0;
        ap_return_1_preg[60] <= 1'b0;
        ap_return_1_preg[61] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
                        ap_return_1_preg[61 : 0] <= tmp_3_out_fu_234_p1[61 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_return_2_preg <= tmp_5_out_fu_238_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[0] <= 1'b0;
        ap_return_3_preg[1] <= 1'b0;
        ap_return_3_preg[2] <= 1'b0;
        ap_return_3_preg[3] <= 1'b0;
        ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
        ap_return_3_preg[10] <= 1'b0;
        ap_return_3_preg[11] <= 1'b0;
        ap_return_3_preg[12] <= 1'b0;
        ap_return_3_preg[13] <= 1'b0;
        ap_return_3_preg[14] <= 1'b0;
        ap_return_3_preg[15] <= 1'b0;
        ap_return_3_preg[16] <= 1'b0;
        ap_return_3_preg[17] <= 1'b0;
        ap_return_3_preg[18] <= 1'b0;
        ap_return_3_preg[19] <= 1'b0;
        ap_return_3_preg[20] <= 1'b0;
        ap_return_3_preg[21] <= 1'b0;
        ap_return_3_preg[22] <= 1'b0;
        ap_return_3_preg[23] <= 1'b0;
        ap_return_3_preg[24] <= 1'b0;
        ap_return_3_preg[25] <= 1'b0;
        ap_return_3_preg[26] <= 1'b0;
        ap_return_3_preg[27] <= 1'b0;
        ap_return_3_preg[28] <= 1'b0;
        ap_return_3_preg[29] <= 1'b0;
        ap_return_3_preg[30] <= 1'b0;
        ap_return_3_preg[31] <= 1'b0;
        ap_return_3_preg[32] <= 1'b0;
        ap_return_3_preg[33] <= 1'b0;
        ap_return_3_preg[34] <= 1'b0;
        ap_return_3_preg[35] <= 1'b0;
        ap_return_3_preg[36] <= 1'b0;
        ap_return_3_preg[37] <= 1'b0;
        ap_return_3_preg[38] <= 1'b0;
        ap_return_3_preg[39] <= 1'b0;
        ap_return_3_preg[40] <= 1'b0;
        ap_return_3_preg[41] <= 1'b0;
        ap_return_3_preg[42] <= 1'b0;
        ap_return_3_preg[43] <= 1'b0;
        ap_return_3_preg[44] <= 1'b0;
        ap_return_3_preg[45] <= 1'b0;
        ap_return_3_preg[46] <= 1'b0;
        ap_return_3_preg[47] <= 1'b0;
        ap_return_3_preg[48] <= 1'b0;
        ap_return_3_preg[49] <= 1'b0;
        ap_return_3_preg[50] <= 1'b0;
        ap_return_3_preg[51] <= 1'b0;
        ap_return_3_preg[52] <= 1'b0;
        ap_return_3_preg[53] <= 1'b0;
        ap_return_3_preg[54] <= 1'b0;
        ap_return_3_preg[55] <= 1'b0;
        ap_return_3_preg[56] <= 1'b0;
        ap_return_3_preg[57] <= 1'b0;
        ap_return_3_preg[58] <= 1'b0;
        ap_return_3_preg[59] <= 1'b0;
        ap_return_3_preg[60] <= 1'b0;
        ap_return_3_preg[61] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
                        ap_return_3_preg[61 : 0] <= tmp_7_out_fu_255_p1[61 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp4_reg_305 <= grp_fu_206_p2;
        tmp_reg_300 <= grp_fu_200_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_0 = tmp_4_out_fu_216_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_1 = tmp_3_out_fu_234_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_2 = tmp_5_out_fu_238_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_return_3 = tmp_7_out_fu_255_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        b_out_blk_n = b_out_full_n;
    end else begin
        b_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        b_out_write = 1'b1;
    end else begin
        b_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n))) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_200_ce = 1'b1;
    end else begin
        grp_fu_200_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n))) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_206_ce = 1'b1;
    end else begin
        grp_fu_206_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        id_out_blk_n = id_out_full_n;
    end else begin
        id_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        id_out_write = 1'b1;
    end else begin
        id_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        ix_out_blk_n = ix_out_full_n;
    end else begin
        ix_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        ix_out_write = 1'b1;
    end else begin
        ix_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        iy_out_blk_n = iy_out_full_n;
    end else begin
        iy_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        iy_out_write = 1'b1;
    end else begin
        iy_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        k_out_blk_n = k_out_full_n;
    end else begin
        k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        k_out_write = 1'b1;
    end else begin
        k_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        od_out_blk_n = od_out_full_n;
    end else begin
        od_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        od_out_write = 1'b1;
    end else begin
        od_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        ox_out_blk_n = ox_out_full_n;
    end else begin
        ox_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        ox_out_write = 1'b1;
    end else begin
        ox_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        oy_out_blk_n = oy_out_full_n;
    end else begin
        oy_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        oy_out_write = 1'b1;
    end else begin
        oy_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        s_out_blk_n = s_out_full_n;
    end else begin
        s_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
        s_out_write = 1'b1;
    end else begin
        s_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == id_out_full_n) | (1'b0 == od_out_full_n) | (1'b0 == k_out_full_n) | (1'b0 == b_out_full_n) | (1'b0 == ox_out_full_n) | (1'b0 == oy_out_full_n) | (1'b0 == ix_out_full_n) | (1'b0 == iy_out_full_n) | (1'b0 == s_out_full_n));
end

assign b_out_din = b;

assign id_out_din = id;

assign ix_out_din = ix;

assign iy_out_din = iy;

assign k_out_din = k;

assign od_out_din = od;

assign ox_out_din = ox;

assign oy_out_din = oy;

assign s_out_din = s;

assign tmp_3_out_fu_234_p1 = $unsigned(tmp_69_i_i_fu_230_p1);

assign tmp_4_out_fu_216_p1 = $signed(grp_fu_212_p2);

assign tmp_5_out_fu_238_p0 = od;

assign tmp_5_out_fu_238_p1 = tmp_5_out_fu_238_p0;

assign tmp_69_i_i_fu_230_p1 = $signed(tmp_6_i_i_fu_220_p4);

assign tmp_6_i_i_fu_220_p4 = {{input_offset[31:2]}};

assign tmp_71_i_i_fu_241_p4 = {{output_offset[31:2]}};

assign tmp_72_i_i_fu_251_p1 = $signed(tmp_71_i_i_fu_241_p4);

assign tmp_7_out_fu_255_p1 = $unsigned(tmp_72_i_i_fu_251_p1);

always @ (posedge ap_clk) begin
    ap_return_1_preg[63:62] <= 2'b00;
    ap_return_3_preg[63:62] <= 2'b00;
end

endmodule //Block_proc4

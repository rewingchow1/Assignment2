// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_batch_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        b_dout,
        b_empty_n,
        b_read,
        od_dout,
        od_empty_n,
        od_read,
        id_dout,
        id_empty_n,
        id_read,
        ix_dout,
        ix_empty_n,
        ix_read,
        iy_dout,
        iy_empty_n,
        iy_read,
        ox_dout,
        ox_empty_n,
        ox_read,
        oy_dout,
        oy_empty_n,
        oy_read,
        p_read,
        p_read1,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        k_dout,
        k_empty_n,
        k_read,
        s_dout,
        s_empty_n,
        s_read,
        p_read2,
        p_read3
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_pp0_stage0 = 48'd2147483648;
parameter    ap_ST_fsm_pp0_stage1 = 48'd4294967296;
parameter    ap_ST_fsm_pp0_stage2 = 48'd8589934592;
parameter    ap_ST_fsm_pp0_stage3 = 48'd17179869184;
parameter    ap_ST_fsm_pp0_stage4 = 48'd34359738368;
parameter    ap_ST_fsm_pp0_stage5 = 48'd68719476736;
parameter    ap_ST_fsm_pp0_stage6 = 48'd137438953472;
parameter    ap_ST_fsm_pp0_stage7 = 48'd274877906944;
parameter    ap_ST_fsm_pp0_stage8 = 48'd549755813888;
parameter    ap_ST_fsm_state64 = 48'd1099511627776;
parameter    ap_ST_fsm_state65 = 48'd2199023255552;
parameter    ap_ST_fsm_state66 = 48'd4398046511104;
parameter    ap_ST_fsm_state67 = 48'd8796093022208;
parameter    ap_ST_fsm_state68 = 48'd17592186044416;
parameter    ap_ST_fsm_state69 = 48'd35184372088832;
parameter    ap_ST_fsm_state70 = 48'd70368744177664;
parameter    ap_ST_fsm_state71 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] b_dout;
input   b_empty_n;
output   b_read;
input  [31:0] od_dout;
input   od_empty_n;
output   od_read;
input  [31:0] id_dout;
input   id_empty_n;
output   id_read;
input  [31:0] ix_dout;
input   ix_empty_n;
output   ix_read;
input  [31:0] iy_dout;
input   iy_empty_n;
output   iy_read;
input  [31:0] ox_dout;
input   ox_empty_n;
output   ox_read;
input  [31:0] oy_dout;
input   oy_empty_n;
output   oy_read;
input  [63:0] p_read;
input  [63:0] p_read1;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [31:0] k_dout;
input   k_empty_n;
output   k_read;
input  [31:0] s_dout;
input   s_empty_n;
output   s_read;
input  [63:0] p_read2;
input  [63:0] p_read3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_read;
reg od_read;
reg id_read;
reg ix_read;
reg iy_read;
reg ox_read;
reg oy_read;
reg m_axi_mem_AWVALID;
reg m_axi_mem_WVALID;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg m_axi_mem_RREADY;
reg m_axi_mem_BREADY;
reg k_read;
reg s_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    b_blk_n;
reg    od_blk_n;
reg    id_blk_n;
reg    ix_blk_n;
reg    iy_blk_n;
reg    ox_blk_n;
reg    oy_blk_n;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state23;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state30;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state65;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state66;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten4_reg_2044;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten4_reg_2044;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_flag00000000;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_flag00000000;
reg    k_blk_n;
reg    s_blk_n;
reg   [95:0] indvar_flatten4_reg_367;
reg   [30:0] i_d_i_i_reg_378;
reg   [63:0] indvar_flatten_reg_389;
reg  signed [31:0] iiy_i_i_reg_400;
reg   [31:0] i_y1_i_i_reg_412;
reg   [31:0] tmp_54_i_i_reg_421;
reg   [31:0] i_x1_i_i_reg_431;
reg   [31:0] iix_i_i_reg_440;
reg   [31:0] b_read_reg_1507;
reg    ap_block_state1;
reg  signed [31:0] od_read_reg_1512;
reg  signed [31:0] id_read_reg_1518;
reg  signed [31:0] ix_read_reg_1525;
reg  signed [31:0] iy_read_reg_1532;
reg  signed [31:0] ox_read_reg_1538;
reg  signed [31:0] oy_read_reg_1550;
reg  signed [31:0] k_read_reg_1558;
reg  signed [31:0] s_read_reg_1579;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_472_p2;
reg   [63:0] bound1_reg_1602;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [95:0] grp_fu_484_p2;
reg   [95:0] bound2_reg_1619;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire  signed [31:0] grp_fu_502_p2;
reg  signed [31:0] tmp_reg_1655;
wire  signed [31:0] grp_fu_506_p2;
reg  signed [31:0] tmp5_reg_1660;
wire  signed [31:0] grp_fu_510_p2;
reg  signed [31:0] tmp8_reg_1665;
wire   [63:0] tmp2_fu_514_p2;
reg   [63:0] tmp2_reg_1671;
wire   [63:0] tmp3_fu_520_p2;
reg   [63:0] tmp3_reg_1676;
wire   [127:0] grp_fu_496_p2;
reg   [127:0] bound3_reg_1681;
wire   [0:0] p_mid_fu_526_p2;
reg   [0:0] p_mid_reg_1686;
wire   [31:0] smax16_mid_fu_531_p3;
reg   [31:0] smax16_mid_reg_1691;
wire   [0:0] tmp_31_i_i_mid_fu_538_p2;
reg   [0:0] tmp_31_i_i_mid_reg_1697;
wire   [0:0] exitcond_flatten73_m_fu_543_p2;
reg   [0:0] exitcond_flatten73_m_reg_1703;
wire   [95:0] cast7_fu_548_p1;
reg   [95:0] cast7_reg_1708;
wire   [31:0] o_d_cast_i_i_mid1_fu_551_p1;
reg   [31:0] o_d_cast_i_i_mid1_reg_1713;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond_flatten3_fu_560_p2;
reg   [0:0] exitcond_flatten3_reg_1719;
wire   [127:0] indvar_flatten_next3_fu_565_p2;
reg   [127:0] indvar_flatten_next3_reg_1723;
wire  signed [31:0] grp_fu_555_p2;
reg  signed [31:0] tmp9_reg_1728;
wire    ap_CS_fsm_state17;
wire  signed [31:0] grp_fu_571_p2;
reg  signed [31:0] tmp1_reg_1733;
wire    ap_CS_fsm_state18;
wire   [31:0] o_y_cast_i_i_mid1_fu_583_p1;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_575_p2;
reg   [31:0] tmp_22_i_i_reg_1744;
wire    ap_CS_fsm_state20;
wire   [63:0] tmp_19_i_i_fu_606_p2;
reg   [63:0] tmp_19_i_i_reg_1749;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_579_p2;
reg   [31:0] tmp_25_i_i_reg_1754;
wire   [63:0] tmp4_fu_614_p2;
reg   [63:0] tmp4_reg_1759;
wire   [31:0] grp_fu_587_p2;
reg   [31:0] i_y_reg_1764;
wire   [31:0] grp_fu_592_p2;
reg   [31:0] tmp_29_i_i_reg_1769;
wire   [0:0] exitcond_flatten_fu_628_p2;
reg   [0:0] exitcond_flatten_reg_1774;
wire   [30:0] tmp_11_i_i_cast_mid2_1_fu_647_p3;
reg   [30:0] tmp_11_i_i_cast_mid2_1_reg_1785;
wire   [0:0] exitcond_flatten73_m_1_fu_667_p3;
reg   [0:0] exitcond_flatten73_m_1_reg_1791;
wire   [30:0] o_d_fu_674_p2;
reg   [30:0] o_d_reg_1801;
wire   [0:0] tmp_2_fu_680_p2;
reg   [0:0] tmp_2_reg_1807;
wire   [0:0] tmp_31_i_i_mid2_fu_694_p3;
reg   [0:0] tmp_31_i_i_mid2_reg_1819;
wire   [30:0] o_d_i_i_mid2_fu_701_p3;
reg   [30:0] o_d_i_i_mid2_reg_1833;
wire   [30:0] o_y_fu_709_p2;
reg   [30:0] o_y_reg_1838;
wire   [30:0] o_y_i_i_mid2_fu_715_p3;
reg   [30:0] o_y_i_i_mid2_reg_1843;
wire   [31:0] tmp_11_i_i_cast_mid2_2_fu_729_p1;
wire    ap_CS_fsm_state22;
wire   [31:0] o_d_cast_i_i_fu_773_p1;
wire   [31:0] o_y_cast_i_i_fu_847_p1;
wire   [31:0] p_mid5_fu_870_p3;
reg   [31:0] p_mid5_reg_1866;
wire   [31:0] indvars_iv17_mid2_fu_887_p3;
reg   [31:0] indvars_iv17_mid2_reg_1871;
wire   [31:0] indvars_iv14_mid2_fu_894_p3;
reg   [31:0] indvars_iv14_mid2_reg_1876;
wire   [31:0] indvars_iv12_mid2_fu_901_p3;
reg   [31:0] indvars_iv12_mid2_reg_1881;
reg   [63:0] mem_addr_reg_1886;
wire   [31:0] indvars_iv24_mid2_fu_940_p3;
reg   [31:0] indvars_iv24_mid2_reg_1892;
reg    ap_sig_ioackin_m_axi_mem_ARREADY;
wire   [31:0] indvars_iv21_mid2_fu_947_p3;
reg   [31:0] indvars_iv21_mid2_reg_1897;
wire   [31:0] indvars_iv19_mid2_fu_954_p3;
reg   [31:0] indvars_iv19_mid2_reg_1902;
wire   [31:0] tmp_5_fu_974_p2;
reg   [31:0] tmp_5_reg_1907;
wire  signed [31:0] grp_fu_732_p2;
reg  signed [31:0] tmp_11_i_i_cast_mid2_3_reg_1912;
wire    ap_CS_fsm_state24;
wire  signed [31:0] grp_fu_737_p2;
reg  signed [31:0] tmp10_mid2_v_v_v_reg_1917;
wire  signed [31:0] grp_fu_816_p2;
reg  signed [31:0] tmp9_mid1_reg_1922;
wire  signed [31:0] grp_fu_821_p2;
reg  signed [31:0] tmp1_mid1_reg_1927;
wire   [30:0] o_x_i_i_mid2_fu_999_p3;
reg   [30:0] o_x_i_i_mid2_reg_1932;
wire   [31:0] i_y_mid2_fu_1006_p3;
reg   [31:0] i_y_mid2_reg_1939;
wire   [31:0] tmp_30_i_i_cast_mid2_fu_1013_p3;
reg   [31:0] tmp_30_i_i_cast_mid2_reg_1945;
wire   [63:0] grp_fu_1026_p2;
reg   [63:0] bound_reg_1960;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_1032_p2;
reg   [31:0] tmp_11_i_i_cast_mid2_4_reg_1966;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_1036_p2;
reg   [31:0] tmp10_mid2_v_v_reg_1971;
wire   [31:0] grp_fu_1040_p2;
reg   [31:0] tmp_22_i_i_mid1_reg_1976;
wire   [31:0] tmp_26_i_i_cast_mid2_fu_1054_p3;
reg   [31:0] tmp_26_i_i_cast_mid2_reg_1981;
wire   [63:0] tmp10_mid2_fu_1072_p2;
reg   [63:0] tmp10_mid2_reg_1991;
wire    ap_CS_fsm_state28;
wire   [63:0] tmp18_mid2_fu_1090_p3;
reg   [63:0] tmp18_mid2_reg_1996;
reg   [31:0] output_element_reg_2006;
wire   [31:0] grp_fu_1100_p2;
reg   [31:0] i_x_reg_2011;
wire  signed [32:0] tmp_11_i_i_cast_mid2_fu_1105_p1;
reg  signed [32:0] tmp_11_i_i_cast_mid2_reg_2019;
wire    ap_CS_fsm_state31;
wire  signed [33:0] tmp_26_i_i_cast_mid2_1_fu_1108_p1;
reg  signed [33:0] tmp_26_i_i_cast_mid2_1_reg_2024;
wire  signed [32:0] tmp_30_i_i_cast_mid2_1_fu_1111_p1;
reg  signed [32:0] tmp_30_i_i_cast_mid2_1_reg_2029;
wire   [31:0] tmp_32_i_i_fu_1114_p2;
reg   [31:0] tmp_32_i_i_reg_2034;
wire   [95:0] grp_fu_1064_p2;
reg   [95:0] bound4_reg_2039;
wire   [0:0] exitcond_flatten4_fu_1123_p2;
wire    ap_block_state32_pp0_stage0_iter0;
wire    ap_block_state41_pp0_stage0_iter1;
reg    ap_block_state41_io;
wire    ap_block_state50_pp0_stage0_iter2;
wire    ap_block_state59_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten4_reg_2044;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten4_reg_2044;
wire   [95:0] indvar_flatten_next4_fu_1128_p2;
reg   [95:0] indvar_flatten_next4_reg_2048;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten2_fu_1134_p2;
reg   [0:0] exitcond_flatten2_reg_2053;
wire   [30:0] tmp_40_i_i_cast_mid2_1_fu_1145_p3;
reg   [30:0] tmp_40_i_i_cast_mid2_1_reg_2063;
wire   [63:0] indvar_flatten_next_fu_1159_p3;
reg   [63:0] indvar_flatten_next_reg_2069;
wire   [31:0] tmp_40_i_i_cast_mid2_2_fu_1167_p1;
reg   [31:0] tmp_40_i_i_cast_mid2_2_reg_2074;
wire    ap_block_state33_pp0_stage1_iter0;
wire    ap_block_state42_pp0_stage1_iter1;
reg    ap_block_state42_io;
wire    ap_block_state51_pp0_stage1_iter2;
wire    ap_block_state60_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_flag00011001;
wire   [31:0] grp_fu_1118_p2;
reg   [31:0] tmp_52_i_i_reg_2080;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state34_pp0_stage2_iter0;
wire    ap_block_state43_pp0_stage2_iter1;
wire    ap_block_state52_pp0_stage2_iter2;
wire    ap_block_state61_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_flag00011001;
wire   [31:0] iiy_i_i_mid_fu_1181_p3;
reg   [31:0] iiy_i_i_mid_reg_2085;
wire   [0:0] tmp_55_i_i_mid_fu_1210_p3;
reg   [0:0] tmp_55_i_i_mid_reg_2091;
wire   [31:0] i_x1_i_i_mid2_fu_1222_p3;
reg   [31:0] i_x1_i_i_mid2_reg_2097;
wire   [31:0] iix_i_i_mid2_fu_1229_p3;
reg   [31:0] iix_i_i_mid2_reg_2103;
wire  signed [31:0] tmp_51_i_i_cast_mid2_1_fu_1237_p3;
reg  signed [31:0] tmp_51_i_i_cast_mid2_1_reg_2109;
wire  signed [31:0] grp_fu_1170_p2;
reg  signed [31:0] tmp19_cast_mid2_v_v_s_reg_2115;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state35_pp0_stage3_iter0;
wire    ap_block_state44_pp0_stage3_iter1;
wire    ap_block_state53_pp0_stage3_iter2;
wire    ap_block_state62_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_flag00011001;
wire  signed [31:0] grp_fu_1201_p2;
reg  signed [31:0] tmp_40_i_i_cast_mid2_3_reg_2120;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state36_pp0_stage4_iter0;
wire    ap_block_state45_pp0_stage4_iter1;
wire    ap_block_state54_pp0_stage4_iter2;
wire    ap_block_state63_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_flag00011001;
wire  signed [31:0] iiy_fu_1253_p2;
reg  signed [31:0] iiy_reg_2125;
wire   [31:0] iiy_i_i_mid2_fu_1258_p3;
reg   [31:0] iiy_i_i_mid2_reg_2130;
wire   [31:0] grp_fu_1245_p2;
reg   [31:0] tmp_51_i_i_cast_mid2_2_reg_2135;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state37_pp0_stage5_iter0;
wire    ap_block_state46_pp0_stage5_iter1;
wire    ap_block_state55_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_flag00011001;
wire   [31:0] grp_fu_1249_p2;
reg   [31:0] tmp19_cast_mid2_v_v_1_reg_2140;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state38_pp0_stage6_iter0;
wire    ap_block_state47_pp0_stage6_iter1;
wire    ap_block_state56_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_flag00011001;
wire   [32:0] tmp12_fu_1278_p2;
reg   [32:0] tmp12_reg_2145;
wire   [31:0] i_x_1_fu_1284_p2;
reg   [31:0] i_x_1_reg_2150;
wire   [31:0] grp_fu_1264_p2;
reg   [31:0] tmp_52_i_i_mid1_reg_2155;
wire    ap_block_state39_pp0_stage7_iter0;
reg    ap_block_state48_pp0_stage7_iter1;
wire    ap_block_state57_pp0_stage7_iter2;
reg    ap_block_pp0_stage7_flag00011001;
reg   [63:0] mem_addr_2_reg_2160;
wire   [31:0] grp_fu_1268_p2;
reg   [31:0] tmp_40_i_i_cast_mid2_4_reg_2166;
wire    ap_block_state40_pp0_stage8_iter0;
reg    ap_block_state49_pp0_stage8_iter1;
wire    ap_block_state58_pp0_stage8_iter2;
reg    ap_block_pp0_stage8_flag00011001;
wire   [32:0] tmp14_fu_1344_p2;
reg   [32:0] tmp14_reg_2171;
wire   [31:0] iix_fu_1350_p2;
reg   [31:0] iix_reg_2176;
reg   [63:0] mem_addr_3_reg_2181;
reg   [31:0] mem_addr_2_read_reg_2187;
reg   [31:0] mem_addr_3_read_reg_2192;
wire   [31:0] grp_fu_456_p2;
reg   [31:0] tmp_68_i_i_reg_2197;
wire   [31:0] grp_fu_451_p2;
reg    ap_enable_reg_pp0_iter3;
reg   [63:0] mem_addr_1_reg_2207;
wire    ap_CS_fsm_state64;
wire   [30:0] o_x_fu_1414_p2;
reg   [30:0] o_x_reg_2212;
wire   [31:0] indvars_iv_next3_fu_1419_p2;
reg   [31:0] indvars_iv_next3_reg_2217;
wire   [31:0] indvars_iv_next4_fu_1423_p2;
reg   [31:0] indvars_iv_next4_reg_2222;
wire   [31:0] indvars_iv_next5_fu_1427_p2;
reg   [31:0] indvars_iv_next5_reg_2227;
wire   [63:0] indvar_flatten_next1_fu_1437_p3;
reg   [63:0] indvar_flatten_next1_reg_2232;
wire   [95:0] indvar_flatten_next2_fu_1450_p3;
reg   [95:0] indvar_flatten_next2_reg_2237;
wire   [31:0] tmp_42_i_i_fu_1499_p3;
reg   [31:0] tmp_42_i_i_reg_2242;
reg    ap_sig_ioackin_m_axi_mem_AWREADY;
wire    ap_block_pp0_stage2_flag00011011;
reg    ap_condition_pp0_exit_iter0_state34;
reg    ap_block_pp0_stage8_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg   [127:0] indvar_flatten1_reg_217;
reg   [30:0] o_d_i_i_reg_228;
reg   [30:0] o_y_i_i_reg_240;
reg   [30:0] b_i_i_reg_252;
reg   [95:0] indvar_flatten2_reg_263;
reg   [63:0] indvar_flatten3_reg_275;
reg   [31:0] indvars_iv_reg_287;
reg   [31:0] indvars_iv1_reg_299;
reg   [31:0] indvars_iv2_reg_311;
reg   [31:0] indvars_iv3_reg_321;
reg   [31:0] indvars_iv4_reg_333;
reg   [31:0] indvars_iv5_reg_345;
reg   [30:0] o_x_i_i_reg_355;
reg   [95:0] indvar_flatten4_phi_fu_371_p4;
reg   [30:0] i_d_i_i_phi_fu_382_p4;
reg   [63:0] indvar_flatten_phi_fu_393_p4;
reg  signed [31:0] iiy_i_i_phi_fu_404_p4;
reg   [31:0] i_y1_i_i_phi_fu_415_p4;
wire    ap_block_pp0_stage2_flag00000000;
reg   [31:0] i_x1_i_i_phi_fu_434_p4;
reg   [31:0] iix_i_i_phi_fu_444_p4;
wire   [63:0] tmp_19_i_i_mid2_fu_809_p3;
wire   [63:0] tmp_62_i_i_fu_1314_p2;
wire   [63:0] tmp_67_i_i_fu_1371_p2;
wire   [63:0] tmp_47_i_i_fu_1403_p2;
reg    ap_reg_ioackin_m_axi_mem_ARREADY;
wire    ap_block_pp0_stage0_flag00001001;
wire    ap_block_pp0_stage1_flag00001001;
reg    ap_reg_ioackin_m_axi_mem_AWREADY;
reg    ap_reg_ioackin_m_axi_mem_WREADY;
reg    ap_sig_ioackin_m_axi_mem_WREADY;
wire    ap_block_pp0_stage5_flag00000000;
wire   [31:0] grp_fu_472_p0;
wire   [31:0] grp_fu_472_p1;
wire   [63:0] grp_fu_484_p0;
wire   [31:0] grp_fu_484_p1;
wire   [95:0] grp_fu_496_p0;
wire   [31:0] grp_fu_496_p1;
wire    ap_CS_fsm_state12;
wire   [30:0] grp_fu_555_p0;
wire   [30:0] grp_fu_571_p0;
wire    ap_CS_fsm_state16;
wire   [30:0] grp_fu_587_p0;
wire   [30:0] grp_fu_592_p0;
wire   [63:0] tmp_17_i_i_fu_597_p1;
wire   [63:0] tmp7_fu_601_p2;
wire  signed [63:0] tmp_23_i_i_fu_611_p1;
wire   [31:0] o_x_cast_i_i_fu_619_p1;
wire   [30:0] b_s_fu_641_p2;
wire   [0:0] tmp_31_i_i_fu_623_p2;
wire   [0:0] exitcond_flatten1_fu_662_p2;
wire   [30:0] o_d_i_i_mid_fu_633_p3;
wire   [0:0] tmp_31_i_i_mid1_fu_655_p3;
wire   [30:0] o_y_i_i_mid_fu_686_p3;
wire   [30:0] grp_fu_732_p1;
wire   [30:0] grp_fu_737_p1;
wire   [0:0] tmp_s_fu_747_p2;
wire   [31:0] smax_fu_753_p3;
wire   [31:0] tmp_1_fu_761_p2;
wire   [31:0] indvars_iv12_mid_fu_723_p3;
wire   [63:0] tmp_17_i_i_mid1_fu_796_p1;
wire   [63:0] tmp7_mid1_fu_799_p2;
wire   [63:0] tmp_19_i_i_mid1_fu_804_p2;
wire   [63:0] tmp_19_i_i_mid_fu_742_p3;
wire   [30:0] grp_fu_816_p1;
wire   [30:0] grp_fu_821_p1;
wire   [31:0] p_mid1_fu_767_p3;
wire   [31:0] indvars_iv12_mid1_fu_790_p3;
wire   [31:0] indvars_iv14_mid_fu_783_p3;
wire   [31:0] indvars_iv17_mid_fu_776_p3;
wire   [31:0] indvars_iv_next_fu_832_p2;
wire   [31:0] indvars_iv_next1_fu_837_p2;
wire   [0:0] p_mid3_fu_850_p2;
wire   [31:0] indvars_iv_next2_fu_842_p2;
wire   [31:0] smax16_mid1_fu_856_p3;
wire   [31:0] p_mid2_fu_826_p3;
wire   [31:0] p_mid4_fu_864_p2;
wire   [30:0] grp_fu_877_p1;
wire   [30:0] grp_fu_882_p1;
wire   [31:0] indvars_iv19_mid_fu_914_p3;
wire   [31:0] indvars_iv24_mid_fu_920_p3;
wire   [31:0] indvars_iv21_mid_fu_927_p3;
wire   [31:0] indvars_iv19_mid1_fu_934_p3;
wire   [0:0] tmp_3_fu_960_p2;
wire   [31:0] smax1_fu_966_p3;
wire   [30:0] o_x_i_i_mid_fu_980_p3;
wire   [31:0] i_y_mid_fu_987_p3;
wire   [31:0] grp_fu_877_p2;
wire   [31:0] tmp_30_i_i_cast_mid_fu_993_p3;
wire   [31:0] grp_fu_882_p2;
wire   [31:0] grp_fu_1026_p0;
wire   [31:0] grp_fu_1026_p1;
wire    ap_CS_fsm_state25;
wire   [31:0] grp_fu_1044_p2;
wire   [31:0] tmp_26_i_i_cast_mid_fu_1048_p3;
wire   [63:0] grp_fu_1064_p0;
wire   [31:0] grp_fu_1064_p1;
wire  signed [63:0] tmp10_mid2_v_fu_1069_p1;
wire  signed [63:0] tmp_23_i_i_mid1_fu_1082_p1;
wire   [63:0] tmp18_mid1_fu_1085_p2;
wire   [63:0] tmp18_mid_fu_1077_p3;
wire   [30:0] grp_fu_1100_p1;
wire   [30:0] i_d_fu_1139_p2;
wire   [63:0] indvar_flatten_op_fu_1153_p2;
wire   [30:0] grp_fu_1170_p0;
wire   [30:0] grp_fu_1201_p0;
wire   [0:0] tmp_55_i_i_fu_1205_p2;
wire   [31:0] i_y1_i_i_mid_fu_1175_p3;
wire   [31:0] i_x1_i_i_mid_fu_1188_p3;
wire   [31:0] iix_i_i_mid_fu_1194_p3;
wire   [31:0] i_y_1_fu_1216_p2;
wire    ap_block_pp0_stage3_flag00000000;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_block_pp0_stage6_flag00000000;
wire  signed [32:0] tmp_56_i_i_cast_fu_1275_p1;
wire  signed [32:0] tmp_51_i_i_cast_mid2_fu_1272_p1;
wire  signed [32:0] tmp19_cast_mid2_v_v_fu_1289_p1;
wire   [32:0] tmp19_cast_mid2_v_fu_1292_p2;
wire  signed [33:0] tmp19_cast_mid2_fu_1297_p1;
wire  signed [33:0] tmp20_cast_fu_1301_p1;
wire   [33:0] tmp13_fu_1304_p2;
wire  signed [63:0] tmp18_cast_fu_1310_p1;
wire   [31:0] tmp_53_i_i_cast_mid_fu_1325_p3;
wire   [31:0] tmp_53_i_i_cast_mid2_fu_1331_p3;
wire  signed [32:0] tmp_63_i_i_cast_fu_1341_p1;
wire  signed [32:0] tmp_53_i_i_cast_mid2_1_fu_1337_p1;
wire  signed [33:0] tmp_40_i_i_cast_mid2_fu_1355_p1;
wire  signed [33:0] tmp23_cast_fu_1358_p1;
wire   [33:0] tmp15_fu_1361_p2;
wire  signed [63:0] tmp22_cast_fu_1367_p1;
wire   [32:0] tmp_43_i_i_cast_fu_1382_p1;
wire   [32:0] tmp10_fu_1385_p2;
wire  signed [33:0] tmp13_cast_fu_1390_p1;
wire   [33:0] tmp11_fu_1394_p2;
wire  signed [63:0] tmp12_cast_fu_1399_p1;
wire   [63:0] indvar_flatten71_op_fu_1431_p2;
wire   [95:0] indvar_flatten124_op_fu_1444_p2;
wire   [31:0] tmp_33_i_i_to_int_fu_1457_p1;
wire   [7:0] tmp_4_fu_1461_p4;
wire   [22:0] tmp_9_fu_1471_p1;
wire   [0:0] notrhs_fu_1481_p2;
wire   [0:0] notlhs_fu_1475_p2;
wire   [0:0] tmp_6_fu_1487_p2;
wire   [0:0] grp_fu_460_p2;
wire   [0:0] tmp_8_fu_1493_p2;
reg    grp_fu_451_ce;
reg    grp_fu_456_ce;
reg    grp_fu_460_ce;
reg    grp_fu_732_ce;
reg    grp_fu_737_ce;
reg    grp_fu_816_ce;
reg    grp_fu_821_ce;
reg    grp_fu_877_ce;
reg    grp_fu_882_ce;
reg    grp_fu_1064_ce;
wire    ap_CS_fsm_state29;
reg    grp_fu_1100_ce;
reg    grp_fu_1118_ce;
reg    grp_fu_1170_ce;
reg    grp_fu_1201_ce;
reg    grp_fu_1245_ce;
reg    grp_fu_1249_ce;
reg    grp_fu_1264_ce;
reg    grp_fu_1268_ce;
reg   [47:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
reg    ap_block_pp0_stage7_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_1026_p00;
wire   [63:0] grp_fu_1026_p10;
wire   [95:0] grp_fu_1064_p00;
wire   [31:0] grp_fu_1100_p10;
wire   [31:0] grp_fu_1170_p00;
wire   [63:0] grp_fu_472_p00;
wire   [63:0] grp_fu_472_p10;
wire   [95:0] grp_fu_484_p00;
wire   [95:0] grp_fu_484_p10;
wire   [127:0] grp_fu_496_p00;
wire   [127:0] grp_fu_496_p10;
wire   [31:0] grp_fu_555_p00;
reg    ap_condition_900;
reg    ap_condition_910;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 48'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_mem_WREADY = 1'b0;
end

conv_layer_fadd_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fadd_3cud_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_54_i_i_reg_421),
    .din1(tmp_68_i_i_reg_2197),
    .ce(grp_fu_451_ce),
    .dout(grp_fu_451_p2)
);

conv_layer_fmul_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fmul_3dEe_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mem_addr_2_read_reg_2187),
    .din1(mem_addr_3_read_reg_2192),
    .ce(grp_fu_456_ce),
    .dout(grp_fu_456_p2)
);

conv_layer_fcmp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_layer_fcmp_3eOg_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_54_i_i_reg_421),
    .din1(32'd0),
    .ce(grp_fu_460_ce),
    .opcode(5'd2),
    .dout(grp_fu_460_p2)
);

conv_layer_mul_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
conv_layer_mul_32fYi_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_472_p0),
    .din1(grp_fu_472_p1),
    .ce(1'b1),
    .dout(grp_fu_472_p2)
);

conv_layer_mul_64g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
conv_layer_mul_64g8j_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_484_p0),
    .din1(grp_fu_484_p1),
    .ce(1'b1),
    .dout(grp_fu_484_p2)
);

conv_layer_mul_96hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 128 ))
conv_layer_mul_96hbi_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_496_p0),
    .din1(grp_fu_496_p1),
    .ce(1'b1),
    .dout(grp_fu_496_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ix_read_reg_1525),
    .din1(id_read_reg_1518),
    .ce(1'b1),
    .dout(grp_fu_502_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ox_read_reg_1538),
    .din1(od_read_reg_1512),
    .ce(1'b1),
    .dout(grp_fu_506_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(id_read_reg_1518),
    .din1(k_read_reg_1558),
    .ce(1'b1),
    .dout(grp_fu_510_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_555_p0),
    .din1(k_read_reg_1558),
    .ce(1'b1),
    .dout(grp_fu_555_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_571_p0),
    .din1(oy_read_reg_1550),
    .ce(1'b1),
    .dout(grp_fu_571_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp8_reg_1665),
    .din1(tmp9_reg_1728),
    .ce(1'b1),
    .dout(grp_fu_575_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ox_read_reg_1538),
    .din1(tmp1_reg_1733),
    .ce(1'b1),
    .dout(grp_fu_579_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_587_p0),
    .din1(s_read_reg_1579),
    .ce(1'b1),
    .dout(grp_fu_587_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_592_p0),
    .din1(ox_read_reg_1538),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iy_read_reg_1532),
    .din1(grp_fu_732_p1),
    .ce(grp_fu_732_ce),
    .dout(grp_fu_732_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(oy_read_reg_1550),
    .din1(grp_fu_737_p1),
    .ce(grp_fu_737_ce),
    .dout(grp_fu_737_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k_read_reg_1558),
    .din1(grp_fu_816_p1),
    .ce(grp_fu_816_ce),
    .dout(grp_fu_816_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(oy_read_reg_1550),
    .din1(grp_fu_821_p1),
    .ce(grp_fu_821_ce),
    .dout(grp_fu_821_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(s_read_reg_1579),
    .din1(grp_fu_877_p1),
    .ce(grp_fu_877_ce),
    .dout(grp_fu_877_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ox_read_reg_1538),
    .din1(grp_fu_882_p1),
    .ce(grp_fu_882_ce),
    .dout(grp_fu_882_p2)
);

conv_layer_mul_32fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
conv_layer_mul_32fYi_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1026_p0),
    .din1(grp_fu_1026_p1),
    .ce(1'b1),
    .dout(grp_fu_1026_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_i_i_cast_mid2_3_reg_1912),
    .din1(tmp_reg_1655),
    .ce(1'b1),
    .dout(grp_fu_1032_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp10_mid2_v_v_v_reg_1917),
    .din1(tmp5_reg_1660),
    .ce(1'b1),
    .dout(grp_fu_1036_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp9_mid1_reg_1922),
    .din1(tmp8_reg_1665),
    .ce(1'b1),
    .dout(grp_fu_1040_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp1_mid1_reg_1927),
    .din1(ox_read_reg_1538),
    .ce(1'b1),
    .dout(grp_fu_1044_p2)
);

conv_layer_mul_64g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
conv_layer_mul_64g8j_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1064_p0),
    .din1(grp_fu_1064_p1),
    .ce(grp_fu_1064_ce),
    .dout(grp_fu_1064_p2)
);

conv_layer_mul_32jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32jbC_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(s_read_reg_1579),
    .din1(grp_fu_1100_p1),
    .ce(grp_fu_1100_ce),
    .dout(grp_fu_1100_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iiy_i_i_phi_fu_404_p4),
    .din1(k_read_reg_1558),
    .ce(grp_fu_1118_ce),
    .dout(grp_fu_1118_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1170_p0),
    .din1(ix_read_reg_1525),
    .ce(grp_fu_1170_ce),
    .dout(grp_fu_1170_p2)
);

conv_layer_mul_31ibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_31ibs_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1201_p0),
    .din1(k_read_reg_1558),
    .ce(grp_fu_1201_ce),
    .dout(grp_fu_1201_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_51_i_i_cast_mid2_1_reg_2109),
    .din1(ix_read_reg_1525),
    .ce(grp_fu_1245_ce),
    .dout(grp_fu_1245_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iy_read_reg_1532),
    .din1(tmp19_cast_mid2_v_v_s_reg_2115),
    .ce(grp_fu_1249_ce),
    .dout(grp_fu_1249_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(iiy_reg_2125),
    .din1(k_read_reg_1558),
    .ce(grp_fu_1264_ce),
    .dout(grp_fu_1264_p2)
);

conv_layer_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32bkb_x_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k_read_reg_1558),
    .din1(tmp_40_i_i_cast_mid2_3_reg_2120),
    .ce(grp_fu_1268_ce),
    .dout(grp_fu_1268_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten3_reg_1719 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state34))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state34)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state34 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state23) & (1'b1 == m_axi_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == m_axi_mem_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == m_axi_mem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_m_axi_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state65)) begin
            if ((ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b0;
            end else if ((1'b1 == m_axi_mem_AWREADY)) begin
                ap_reg_ioackin_m_axi_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state66)) begin
            if ((ap_sig_ioackin_m_axi_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_mem_WREADY <= 1'b0;
            end else if ((1'b1 == m_axi_mem_WREADY)) begin
                ap_reg_ioackin_m_axi_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        b_i_i_reg_252 <= tmp_11_i_i_cast_mid2_1_reg_1785;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        b_i_i_reg_252 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_d_i_i_reg_378 <= tmp_40_i_i_cast_mid2_1_reg_2063;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_d_i_i_reg_378 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        i_x1_i_i_reg_431 <= i_x_1_reg_2150;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_x1_i_i_reg_431 <= i_x_reg_2011;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        i_y1_i_i_reg_412 <= tmp_51_i_i_cast_mid2_1_reg_2109;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        i_y1_i_i_reg_412 <= i_y_mid2_reg_1939;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        iix_i_i_reg_440 <= iix_reg_2176;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        iix_i_i_reg_440 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        iiy_i_i_reg_400 <= iiy_i_i_mid2_reg_2130;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        iiy_i_i_reg_400 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvar_flatten1_reg_217 <= indvar_flatten_next3_reg_1723;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_flatten1_reg_217 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvar_flatten2_reg_263 <= indvar_flatten_next2_reg_2237;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_flatten2_reg_263 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvar_flatten3_reg_275 <= indvar_flatten_next1_reg_2232;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvar_flatten3_reg_275 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten4_reg_367 <= indvar_flatten_next4_reg_2048;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten4_reg_367 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_389 <= indvar_flatten_next_reg_2069;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        indvar_flatten_reg_389 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv1_reg_299 <= indvars_iv14_mid2_reg_1876;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv1_reg_299 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv2_reg_311 <= indvars_iv12_mid2_reg_1881;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv2_reg_311 <= k_read_reg_1558;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv3_reg_321 <= indvars_iv_next5_reg_2227;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv3_reg_321 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv4_reg_333 <= indvars_iv_next4_reg_2222;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv4_reg_333 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv5_reg_345 <= indvars_iv_next3_reg_2217;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv5_reg_345 <= k_read_reg_1558;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        indvars_iv_reg_287 <= indvars_iv17_mid2_reg_1871;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv_reg_287 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        o_d_i_i_reg_228 <= o_d_i_i_mid2_reg_1833;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_d_i_i_reg_228 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        o_x_i_i_reg_355 <= o_x_reg_2212;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_x_i_i_reg_355 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        o_y_i_i_reg_240 <= o_y_i_i_mid2_reg_1843;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_y_i_i_reg_240 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2044))) begin
        tmp_54_i_i_reg_421 <= grp_fu_451_p2;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_54_i_i_reg_421 <= output_element_reg_2006;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten4_reg_2044 <= exitcond_flatten4_reg_2044;
        ap_reg_pp0_iter2_exitcond_flatten4_reg_2044 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_2044;
        ap_reg_pp0_iter3_exitcond_flatten4_reg_2044 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_2044;
        exitcond_flatten4_reg_2044 <= exitcond_flatten4_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        b_read_reg_1507 <= b_dout;
        id_read_reg_1518 <= id_dout;
        ix_read_reg_1525 <= ix_dout;
        iy_read_reg_1532 <= iy_dout;
        k_read_reg_1558 <= k_dout;
        od_read_reg_1512 <= od_dout;
        ox_read_reg_1538 <= ox_dout;
        oy_read_reg_1550 <= oy_dout;
        s_read_reg_1579 <= s_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound1_reg_1602 <= grp_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bound2_reg_1619 <= grp_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bound3_reg_1681 <= grp_fu_496_p2;
        cast7_reg_1708[31 : 0] <= cast7_fu_548_p1[31 : 0];
        exitcond_flatten73_m_reg_1703 <= exitcond_flatten73_m_fu_543_p2;
        p_mid_reg_1686 <= p_mid_fu_526_p2;
        smax16_mid_reg_1691 <= smax16_mid_fu_531_p3;
        tmp2_reg_1671 <= tmp2_fu_514_p2;
        tmp3_reg_1676 <= tmp3_fu_520_p2;
        tmp5_reg_1660 <= grp_fu_506_p2;
        tmp8_reg_1665 <= grp_fu_510_p2;
        tmp_31_i_i_mid_reg_1697 <= tmp_31_i_i_mid_fu_538_p2;
        tmp_reg_1655 <= grp_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        bound4_reg_2039 <= grp_fu_1064_p2;
        tmp_11_i_i_cast_mid2_reg_2019 <= tmp_11_i_i_cast_mid2_fu_1105_p1;
        tmp_26_i_i_cast_mid2_1_reg_2024 <= tmp_26_i_i_cast_mid2_1_fu_1108_p1;
        tmp_30_i_i_cast_mid2_1_reg_2029 <= tmp_30_i_i_cast_mid2_1_fu_1111_p1;
        tmp_32_i_i_reg_2034 <= tmp_32_i_i_fu_1114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        bound_reg_1960 <= grp_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten4_fu_1123_p2))) begin
        exitcond_flatten2_reg_2053 <= exitcond_flatten2_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        exitcond_flatten3_reg_1719 <= exitcond_flatten3_fu_560_p2;
        indvar_flatten_next3_reg_1723 <= indvar_flatten_next3_fu_565_p2;
        o_d_cast_i_i_mid1_reg_1713[30 : 0] <= o_d_cast_i_i_mid1_fu_551_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond_flatten3_reg_1719))) begin
        exitcond_flatten73_m_1_reg_1791 <= exitcond_flatten73_m_1_fu_667_p3;
        exitcond_flatten_reg_1774 <= exitcond_flatten_fu_628_p2;
        o_d_i_i_mid2_reg_1833 <= o_d_i_i_mid2_fu_701_p3;
        o_d_reg_1801 <= o_d_fu_674_p2;
        o_y_i_i_mid2_reg_1843 <= o_y_i_i_mid2_fu_715_p3;
        o_y_reg_1838 <= o_y_fu_709_p2;
        tmp_11_i_i_cast_mid2_1_reg_1785 <= tmp_11_i_i_cast_mid2_1_fu_647_p3;
        tmp_2_reg_1807 <= tmp_2_fu_680_p2;
        tmp_31_i_i_mid2_reg_1819 <= tmp_31_i_i_mid2_fu_694_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        i_x1_i_i_mid2_reg_2097 <= i_x1_i_i_mid2_fu_1222_p3;
        iix_i_i_mid2_reg_2103 <= iix_i_i_mid2_fu_1229_p3;
        iiy_i_i_mid_reg_2085 <= iiy_i_i_mid_fu_1181_p3;
        tmp_55_i_i_mid_reg_2091 <= tmp_55_i_i_mid_fu_1210_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        i_x_1_reg_2150 <= i_x_1_fu_1284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (m_axi_mem_RVALID == 1'b1))) begin
        i_x_reg_2011 <= grp_fu_1100_p2;
        output_element_reg_2006 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_y_mid2_reg_1939 <= i_y_mid2_fu_1006_p3;
        o_x_i_i_mid2_reg_1932 <= o_x_i_i_mid2_fu_999_p3;
        tmp10_mid2_v_v_v_reg_1917 <= grp_fu_737_p2;
        tmp_11_i_i_cast_mid2_3_reg_1912 <= grp_fu_732_p2;
        tmp_30_i_i_cast_mid2_reg_1945 <= tmp_30_i_i_cast_mid2_fu_1013_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_y_reg_1764 <= grp_fu_587_p2;
        tmp4_reg_1759 <= tmp4_fu_614_p2;
        tmp_19_i_i_reg_1749 <= tmp_19_i_i_fu_606_p2;
        tmp_25_i_i_reg_1754 <= grp_fu_579_p2;
        tmp_29_i_i_reg_1769 <= grp_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        iix_reg_2176 <= iix_fu_1350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        iiy_i_i_mid2_reg_2130 <= iiy_i_i_mid2_fu_1258_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        iiy_reg_2125 <= iiy_fu_1253_p2;
        tmp_40_i_i_cast_mid2_3_reg_2120 <= grp_fu_1201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvar_flatten_next1_reg_2232 <= indvar_flatten_next1_fu_1437_p3;
        indvar_flatten_next2_reg_2237 <= indvar_flatten_next2_fu_1450_p3;
        indvars_iv_next3_reg_2217 <= indvars_iv_next3_fu_1419_p2;
        indvars_iv_next4_reg_2222 <= indvars_iv_next4_fu_1423_p2;
        indvars_iv_next5_reg_2227 <= indvars_iv_next5_fu_1427_p2;
        mem_addr_1_reg_2207 <= tmp_47_i_i_fu_1403_p2;
        o_x_reg_2212 <= o_x_fu_1414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next4_reg_2048 <= indvar_flatten_next4_fu_1128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten4_fu_1123_p2))) begin
        indvar_flatten_next_reg_2069 <= indvar_flatten_next_fu_1159_p3;
        tmp_40_i_i_cast_mid2_1_reg_2063 <= tmp_40_i_i_cast_mid2_1_fu_1145_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvars_iv12_mid2_reg_1881 <= indvars_iv12_mid2_fu_901_p3;
        indvars_iv14_mid2_reg_1876 <= indvars_iv14_mid2_fu_894_p3;
        indvars_iv17_mid2_reg_1871 <= indvars_iv17_mid2_fu_887_p3;
        mem_addr_reg_1886 <= tmp_19_i_i_mid2_fu_809_p3;
        p_mid5_reg_1866 <= p_mid5_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1))) begin
        indvars_iv19_mid2_reg_1902 <= indvars_iv19_mid2_fu_954_p3;
        indvars_iv21_mid2_reg_1897 <= indvars_iv21_mid2_fu_947_p3;
        indvars_iv24_mid2_reg_1892 <= indvars_iv24_mid2_fu_940_p3;
        tmp_5_reg_1907 <= tmp_5_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        mem_addr_2_read_reg_2187 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        mem_addr_2_reg_2160 <= tmp_62_i_i_fu_1314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        mem_addr_3_read_reg_2192 <= m_axi_mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        mem_addr_3_reg_2181 <= tmp_67_i_i_fu_1371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp10_mid2_reg_1991 <= tmp10_mid2_fu_1072_p2;
        tmp18_mid2_reg_1996 <= tmp18_mid2_fu_1090_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp10_mid2_v_v_reg_1971 <= grp_fu_1036_p2;
        tmp_11_i_i_cast_mid2_4_reg_1966 <= grp_fu_1032_p2;
        tmp_26_i_i_cast_mid2_reg_1981 <= tmp_26_i_i_cast_mid2_fu_1054_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        tmp12_reg_2145 <= tmp12_fu_1278_p2;
        tmp19_cast_mid2_v_v_1_reg_2140 <= grp_fu_1249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        tmp14_reg_2171 <= tmp14_fu_1344_p2;
        tmp_40_i_i_cast_mid2_4_reg_2166 <= grp_fu_1268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        tmp19_cast_mid2_v_v_s_reg_2115 <= grp_fu_1170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond_flatten73_m_1_reg_1791 == 1'd1))) begin
        tmp1_mid1_reg_1927 <= grp_fu_821_p2;
        tmp9_mid1_reg_1922 <= grp_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp1_reg_1733 <= grp_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp9_reg_1728 <= grp_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten73_m_1_reg_1791 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        tmp_22_i_i_mid1_reg_1976 <= grp_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_22_i_i_reg_1744 <= grp_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_40_i_i_cast_mid2_2_reg_2074[30 : 0] <= tmp_40_i_i_cast_mid2_2_fu_1167_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1))) begin
        tmp_42_i_i_reg_2242 <= tmp_42_i_i_fu_1499_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_51_i_i_cast_mid2_1_reg_2109 <= tmp_51_i_i_cast_mid2_1_fu_1237_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        tmp_51_i_i_cast_mid2_2_reg_2135 <= grp_fu_1245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2044 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0) & (1'd0 == tmp_55_i_i_mid_reg_2091))) begin
        tmp_52_i_i_mid1_reg_2155 <= grp_fu_1264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_52_i_i_reg_2080 <= grp_fu_1118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten4_reg_2044))) begin
        tmp_68_i_i_reg_2197 <= grp_fu_456_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_reg_2044 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state34 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state34 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten3_reg_1719 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten3_reg_1719 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) begin
        ap_sig_ioackin_m_axi_mem_ARREADY = m_axi_mem_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_AWREADY)) begin
        ap_sig_ioackin_m_axi_mem_AWREADY = m_axi_mem_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_WREADY)) begin
        ap_sig_ioackin_m_axi_mem_WREADY = m_axi_mem_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        b_blk_n = b_empty_n;
    end else begin
        b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        b_read = 1'b1;
    end else begin
        b_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_1064_ce = 1'b1;
    end else begin
        grp_fu_1064_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_state30) & (m_axi_mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_1100_ce = 1'b1;
    end else begin
        grp_fu_1100_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_1118_ce = 1'b1;
    end else begin
        grp_fu_1118_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)))) begin
        grp_fu_1170_ce = 1'b1;
    end else begin
        grp_fu_1170_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_1201_ce = 1'b1;
    end else begin
        grp_fu_1201_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)))) begin
        grp_fu_1245_ce = 1'b1;
    end else begin
        grp_fu_1245_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_1249_ce = 1'b1;
    end else begin
        grp_fu_1249_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        grp_fu_1264_ce = 1'b1;
    end else begin
        grp_fu_1264_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        grp_fu_1268_ce = 1'b1;
    end else begin
        grp_fu_1268_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        grp_fu_451_ce = 1'b1;
    end else begin
        grp_fu_451_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_456_ce = 1'b1;
    end else begin
        grp_fu_456_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | ((1'b1 == ap_CS_fsm_state65) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1)))) begin
        grp_fu_460_ce = 1'b1;
    end else begin
        grp_fu_460_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_732_ce = 1'b1;
    end else begin
        grp_fu_732_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_737_ce = 1'b1;
    end else begin
        grp_fu_737_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_816_ce = 1'b1;
    end else begin
        grp_fu_816_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_821_ce = 1'b1;
    end else begin
        grp_fu_821_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_877_ce = 1'b1;
    end else begin
        grp_fu_877_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_882_ce = 1'b1;
    end else begin
        grp_fu_882_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd0))) begin
        i_d_i_i_phi_fu_382_p4 = tmp_40_i_i_cast_mid2_1_reg_2063;
    end else begin
        i_d_i_i_phi_fu_382_p4 = i_d_i_i_reg_378;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        i_x1_i_i_phi_fu_434_p4 = i_x_1_reg_2150;
    end else begin
        i_x1_i_i_phi_fu_434_p4 = i_x1_i_i_reg_431;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        i_y1_i_i_phi_fu_415_p4 = tmp_51_i_i_cast_mid2_1_reg_2109;
    end else begin
        i_y1_i_i_phi_fu_415_p4 = i_y1_i_i_reg_412;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        id_blk_n = id_empty_n;
    end else begin
        id_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        id_read = 1'b1;
    end else begin
        id_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        iix_i_i_phi_fu_444_p4 = iix_reg_2176;
    end else begin
        iix_i_i_phi_fu_444_p4 = iix_i_i_reg_440;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd0))) begin
        iiy_i_i_phi_fu_404_p4 = iiy_i_i_mid2_reg_2130;
    end else begin
        iiy_i_i_phi_fu_404_p4 = iiy_i_i_reg_400;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd0))) begin
        indvar_flatten4_phi_fu_371_p4 = indvar_flatten_next4_reg_2048;
    end else begin
        indvar_flatten4_phi_fu_371_p4 = indvar_flatten4_reg_367;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd0))) begin
        indvar_flatten_phi_fu_393_p4 = indvar_flatten_next_reg_2069;
    end else begin
        indvar_flatten_phi_fu_393_p4 = indvar_flatten_reg_389;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        ix_blk_n = ix_empty_n;
    end else begin
        ix_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        ix_read = 1'b1;
    end else begin
        ix_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        iy_blk_n = iy_empty_n;
    end else begin
        iy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        iy_read = 1'b1;
    end else begin
        iy_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        k_blk_n = k_empty_n;
    end else begin
        k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        k_read = 1'b1;
    end else begin
        k_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) begin
        if ((ap_condition_910 == 1'b1)) begin
            m_axi_mem_ARADDR = mem_addr_3_reg_2181;
        end else if ((ap_condition_900 == 1'b1)) begin
            m_axi_mem_ARADDR = mem_addr_2_reg_2160;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            m_axi_mem_ARADDR = mem_addr_reg_1886;
        end else begin
            m_axi_mem_ARADDR = 'bx;
        end
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_reg_ioackin_m_axi_mem_ARREADY) & (ap_block_pp0_stage1_flag00001001 == 1'b0)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'b0 == ap_reg_ioackin_m_axi_mem_AWREADY))) begin
        m_axi_mem_AWVALID = 1'b1;
    end else begin
        m_axi_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
        m_axi_mem_BREADY = 1'b1;
    end else begin
        m_axi_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state30) & (m_axi_mem_RVALID == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'b0 == ap_reg_ioackin_m_axi_mem_WREADY))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        od_blk_n = od_empty_n;
    end else begin
        od_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        od_read = 1'b1;
    end else begin
        od_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        ox_blk_n = ox_empty_n;
    end else begin
        ox_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        ox_read = 1'b1;
    end else begin
        ox_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        oy_blk_n = oy_empty_n;
    end else begin
        oy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        oy_read = 1'b1;
    end else begin
        oy_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        s_blk_n = s_empty_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
        s_read = 1'b1;
    end else begin
        s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond_flatten3_reg_1719 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_m_axi_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (m_axi_mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (exitcond_flatten4_reg_2044 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((ap_block_pp0_stage4_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage4_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage4_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (ap_sig_ioackin_m_axi_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (ap_sig_ioackin_m_axi_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (m_axi_mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state41_io));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state41_io));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state42_io));
end

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state42_io));
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage7_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage8_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == b_empty_n) | (1'b0 == od_empty_n) | (1'b0 == id_empty_n) | (1'b0 == ix_empty_n) | (1'b0 == iy_empty_n) | (1'b0 == ox_empty_n) | (1'b0 == oy_empty_n) | (1'b0 == k_empty_n) | (1'b0 == s_empty_n));
end

assign ap_block_state32_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_io = ((exitcond_flatten4_reg_2044 == 1'd0) & (1'b0 == ap_sig_ioackin_m_axi_mem_ARREADY));
end

assign ap_block_state41_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == ap_sig_ioackin_m_axi_mem_ARREADY));
end

assign ap_block_state42_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state48_pp0_stage7_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

always @ (*) begin
    ap_block_state49_pp0_stage8_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b0 == m_axi_mem_RVALID));
end

assign ap_block_state50_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_900 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten4_reg_2044 == 1'd0) & (ap_block_pp0_stage0_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_910 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2044) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_s_fu_641_p2 = (b_i_i_reg_252 + 31'd1);

assign cast7_fu_548_p1 = $unsigned(id_read_reg_1518);

assign exitcond_flatten1_fu_662_p2 = ((indvar_flatten3_reg_275 == bound1_reg_1602) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_1134_p2 = ((indvar_flatten_phi_fu_393_p4 == bound_reg_1960) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_560_p2 = ((indvar_flatten1_reg_217 == bound3_reg_1681) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_1123_p2 = ((indvar_flatten4_phi_fu_371_p4 == bound4_reg_2039) ? 1'b1 : 1'b0);

assign exitcond_flatten73_m_1_fu_667_p3 = ((exitcond_flatten_fu_628_p2[0:0] === 1'b1) ? exitcond_flatten73_m_reg_1703 : exitcond_flatten1_fu_662_p2);

assign exitcond_flatten73_m_fu_543_p2 = ((bound1_reg_1602 == 64'd0) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_628_p2 = ((indvar_flatten2_reg_263 == bound2_reg_1619) ? 1'b1 : 1'b0);

assign grp_fu_1026_p0 = grp_fu_1026_p00;

assign grp_fu_1026_p00 = tmp_5_reg_1907;

assign grp_fu_1026_p1 = grp_fu_1026_p10;

assign grp_fu_1026_p10 = p_mid5_reg_1866;

assign grp_fu_1064_p0 = grp_fu_1064_p00;

assign grp_fu_1064_p00 = bound_reg_1960;

assign grp_fu_1064_p1 = cast7_reg_1708;

assign grp_fu_1100_p1 = grp_fu_1100_p10;

assign grp_fu_1100_p10 = o_x_i_i_mid2_reg_1932;

assign grp_fu_1170_p0 = grp_fu_1170_p00;

assign grp_fu_1170_p00 = tmp_40_i_i_cast_mid2_1_reg_2063;

assign grp_fu_1201_p0 = tmp_40_i_i_cast_mid2_2_reg_2074;

assign grp_fu_472_p0 = grp_fu_472_p00;

assign grp_fu_472_p00 = $unsigned(ox_read_reg_1538);

assign grp_fu_472_p1 = grp_fu_472_p10;

assign grp_fu_472_p10 = $unsigned(oy_read_reg_1550);

assign grp_fu_484_p0 = grp_fu_484_p00;

assign grp_fu_484_p00 = bound1_reg_1602;

assign grp_fu_484_p1 = grp_fu_484_p10;

assign grp_fu_484_p10 = $unsigned(od_read_reg_1512);

assign grp_fu_496_p0 = grp_fu_496_p00;

assign grp_fu_496_p00 = bound2_reg_1619;

assign grp_fu_496_p1 = grp_fu_496_p10;

assign grp_fu_496_p10 = b_read_reg_1507;

assign grp_fu_555_p0 = grp_fu_555_p00;

assign grp_fu_555_p00 = o_d_i_i_reg_228;

assign grp_fu_571_p0 = o_d_cast_i_i_mid1_reg_1713;

assign grp_fu_587_p0 = o_y_cast_i_i_mid1_fu_583_p1;

assign grp_fu_592_p0 = o_y_cast_i_i_mid1_fu_583_p1;

assign grp_fu_732_p1 = tmp_11_i_i_cast_mid2_2_fu_729_p1;

assign grp_fu_737_p1 = tmp_11_i_i_cast_mid2_2_fu_729_p1;

assign grp_fu_816_p1 = o_d_cast_i_i_fu_773_p1;

assign grp_fu_821_p1 = o_d_cast_i_i_fu_773_p1;

assign grp_fu_877_p1 = o_y_cast_i_i_fu_847_p1;

assign grp_fu_882_p1 = o_y_cast_i_i_fu_847_p1;

assign i_d_fu_1139_p2 = (i_d_i_i_phi_fu_382_p4 + 31'd1);

assign i_x1_i_i_mid2_fu_1222_p3 = ((tmp_55_i_i_mid_fu_1210_p3[0:0] === 1'b1) ? i_x1_i_i_mid_fu_1188_p3 : i_x_reg_2011);

assign i_x1_i_i_mid_fu_1188_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? i_x_reg_2011 : i_x1_i_i_phi_fu_434_p4);

assign i_x_1_fu_1284_p2 = (i_x1_i_i_mid2_reg_2097 + 32'd1);

assign i_y1_i_i_mid_fu_1175_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? i_y_mid2_reg_1939 : i_y1_i_i_phi_fu_415_p4);

assign i_y_1_fu_1216_p2 = (i_y1_i_i_mid_fu_1175_p3 + 32'd1);

assign i_y_mid2_fu_1006_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? i_y_mid_fu_987_p3 : grp_fu_877_p2);

assign i_y_mid_fu_987_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : i_y_reg_1764);

assign iix_fu_1350_p2 = (iix_i_i_mid2_reg_2103 + 32'd1);

assign iix_i_i_mid2_fu_1229_p3 = ((tmp_55_i_i_mid_fu_1210_p3[0:0] === 1'b1) ? iix_i_i_mid_fu_1194_p3 : 32'd0);

assign iix_i_i_mid_fu_1194_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? 32'd0 : iix_i_i_phi_fu_444_p4);

assign iiy_fu_1253_p2 = (iiy_i_i_mid_reg_2085 + 32'd1);

assign iiy_i_i_mid2_fu_1258_p3 = ((tmp_55_i_i_mid_reg_2091[0:0] === 1'b1) ? iiy_i_i_mid_reg_2085 : iiy_fu_1253_p2);

assign iiy_i_i_mid_fu_1181_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? 32'd0 : iiy_i_i_reg_400);

assign indvar_flatten124_op_fu_1444_p2 = (96'd1 + indvar_flatten2_reg_263);

assign indvar_flatten71_op_fu_1431_p2 = (64'd1 + indvar_flatten3_reg_275);

assign indvar_flatten_next1_fu_1437_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 64'd1 : indvar_flatten71_op_fu_1431_p2);

assign indvar_flatten_next2_fu_1450_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? 96'd1 : indvar_flatten124_op_fu_1444_p2);

assign indvar_flatten_next3_fu_565_p2 = (indvar_flatten1_reg_217 + 128'd1);

assign indvar_flatten_next4_fu_1128_p2 = (indvar_flatten4_phi_fu_371_p4 + 96'd1);

assign indvar_flatten_next_fu_1159_p3 = ((exitcond_flatten2_fu_1134_p2[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_fu_1153_p2);

assign indvar_flatten_op_fu_1153_p2 = (indvar_flatten_phi_fu_393_p4 + 64'd1);

assign indvars_iv12_mid1_fu_790_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? k_read_reg_1558 : indvars_iv12_mid_fu_723_p3);

assign indvars_iv12_mid2_fu_901_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv12_mid1_fu_790_p3 : indvars_iv_next_fu_832_p2);

assign indvars_iv12_mid_fu_723_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? k_read_reg_1558 : indvars_iv2_reg_311);

assign indvars_iv14_mid2_fu_894_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv14_mid_fu_783_p3 : indvars_iv_next1_fu_837_p2);

assign indvars_iv14_mid_fu_783_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : indvars_iv1_reg_299);

assign indvars_iv17_mid2_fu_887_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv17_mid_fu_776_p3 : indvars_iv_next2_fu_842_p2);

assign indvars_iv17_mid_fu_776_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : indvars_iv_reg_287);

assign indvars_iv19_mid1_fu_934_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? k_read_reg_1558 : indvars_iv19_mid_fu_914_p3);

assign indvars_iv19_mid2_fu_954_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv19_mid1_fu_934_p3 : k_read_reg_1558);

assign indvars_iv19_mid_fu_914_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? k_read_reg_1558 : indvars_iv5_reg_345);

assign indvars_iv21_mid2_fu_947_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv21_mid_fu_927_p3 : 32'd0);

assign indvars_iv21_mid_fu_927_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : indvars_iv4_reg_333);

assign indvars_iv24_mid2_fu_940_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? indvars_iv24_mid_fu_920_p3 : 32'd0);

assign indvars_iv24_mid_fu_920_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : indvars_iv3_reg_321);

assign indvars_iv_next1_fu_837_p2 = ($signed(s_read_reg_1579) + $signed(indvars_iv14_mid_fu_783_p3));

assign indvars_iv_next2_fu_842_p2 = ($signed(indvars_iv17_mid_fu_776_p3) - $signed(s_read_reg_1579));

assign indvars_iv_next3_fu_1419_p2 = ($signed(s_read_reg_1579) + $signed(indvars_iv19_mid2_reg_1902));

assign indvars_iv_next4_fu_1423_p2 = ($signed(s_read_reg_1579) + $signed(indvars_iv21_mid2_reg_1897));

assign indvars_iv_next5_fu_1427_p2 = ($signed(indvars_iv24_mid2_reg_1892) - $signed(s_read_reg_1579));

assign indvars_iv_next_fu_832_p2 = ($signed(s_read_reg_1579) + $signed(indvars_iv12_mid1_fu_790_p3));

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd1;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = mem_addr_1_reg_2207;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd1;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_WDATA = tmp_42_i_i_reg_2242;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd15;

assign m_axi_mem_WUSER = 1'd0;

assign notlhs_fu_1475_p2 = ((tmp_4_fu_1461_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_1481_p2 = ((tmp_9_fu_1471_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_cast_i_i_fu_773_p1 = o_d_reg_1801;

assign o_d_cast_i_i_mid1_fu_551_p1 = o_d_i_i_reg_228;

assign o_d_fu_674_p2 = (o_d_i_i_mid_fu_633_p3 + 31'd1);

assign o_d_i_i_mid2_fu_701_p3 = ((exitcond_flatten73_m_1_fu_667_p3[0:0] === 1'b1) ? o_d_fu_674_p2 : o_d_i_i_mid_fu_633_p3);

assign o_d_i_i_mid_fu_633_p3 = ((exitcond_flatten_fu_628_p2[0:0] === 1'b1) ? 31'd0 : o_d_i_i_reg_228);

assign o_x_cast_i_i_fu_619_p1 = o_x_i_i_reg_355;

assign o_x_fu_1414_p2 = (31'd1 + o_x_i_i_mid2_reg_1932);

assign o_x_i_i_mid2_fu_999_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? o_x_i_i_mid_fu_980_p3 : 31'd0);

assign o_x_i_i_mid_fu_980_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 31'd0 : o_x_i_i_reg_355);

assign o_y_cast_i_i_fu_847_p1 = o_y_reg_1838;

assign o_y_cast_i_i_mid1_fu_583_p1 = o_y_i_i_reg_240;

assign o_y_fu_709_p2 = (o_y_i_i_mid_fu_686_p3 + 31'd1);

assign o_y_i_i_mid2_fu_715_p3 = ((tmp_31_i_i_mid2_fu_694_p3[0:0] === 1'b1) ? o_y_i_i_mid_fu_686_p3 : o_y_fu_709_p2);

assign o_y_i_i_mid_fu_686_p3 = ((tmp_2_fu_680_p2[0:0] === 1'b1) ? 31'd0 : o_y_i_i_reg_240);

assign p_mid1_fu_767_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? smax16_mid_reg_1691 : tmp_1_fu_761_p2);

assign p_mid2_fu_826_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? smax16_mid_reg_1691 : p_mid1_fu_767_p3);

assign p_mid3_fu_850_p2 = (($signed(indvars_iv_next_fu_832_p2) > $signed(indvars_iv_next1_fu_837_p2)) ? 1'b1 : 1'b0);

assign p_mid4_fu_864_p2 = (indvars_iv_next2_fu_842_p2 + smax16_mid1_fu_856_p3);

assign p_mid5_fu_870_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? p_mid2_fu_826_p3 : p_mid4_fu_864_p2);

assign p_mid_fu_526_p2 = (($signed(k_read_reg_1558) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign smax16_mid1_fu_856_p3 = ((p_mid3_fu_850_p2[0:0] === 1'b1) ? indvars_iv_next_fu_832_p2 : indvars_iv_next1_fu_837_p2);

assign smax16_mid_fu_531_p3 = ((p_mid_fu_526_p2[0:0] === 1'b1) ? k_read_reg_1558 : 32'd0);

assign smax1_fu_966_p3 = ((tmp_3_fu_960_p2[0:0] === 1'b1) ? indvars_iv19_mid2_fu_954_p3 : indvars_iv21_mid2_fu_947_p3);

assign smax_fu_753_p3 = ((tmp_s_fu_747_p2[0:0] === 1'b1) ? indvars_iv2_reg_311 : indvars_iv1_reg_299);

assign tmp10_fu_1385_p2 = ($signed(tmp_30_i_i_cast_mid2_1_reg_2029) + $signed(tmp_43_i_i_cast_fu_1382_p1));

assign tmp10_mid2_fu_1072_p2 = ($signed(p_read2) + $signed(tmp10_mid2_v_fu_1069_p1));

assign tmp10_mid2_v_fu_1069_p1 = $signed(tmp10_mid2_v_v_reg_1971);

assign tmp11_fu_1394_p2 = ($signed(tmp13_cast_fu_1390_p1) + $signed(tmp_26_i_i_cast_mid2_1_reg_2024));

assign tmp12_cast_fu_1399_p1 = $signed(tmp11_fu_1394_p2);

assign tmp12_fu_1278_p2 = ($signed(tmp_56_i_i_cast_fu_1275_p1) + $signed(tmp_51_i_i_cast_mid2_fu_1272_p1));

assign tmp13_cast_fu_1390_p1 = $signed(tmp10_fu_1385_p2);

assign tmp13_fu_1304_p2 = ($signed(tmp19_cast_mid2_fu_1297_p1) + $signed(tmp20_cast_fu_1301_p1));

assign tmp14_fu_1344_p2 = ($signed(tmp_63_i_i_cast_fu_1341_p1) + $signed(tmp_53_i_i_cast_mid2_1_fu_1337_p1));

assign tmp15_fu_1361_p2 = ($signed(tmp_40_i_i_cast_mid2_fu_1355_p1) + $signed(tmp23_cast_fu_1358_p1));

assign tmp18_cast_fu_1310_p1 = $signed(tmp13_fu_1304_p2);

assign tmp18_mid1_fu_1085_p2 = ($signed(p_read1) + $signed(tmp_23_i_i_mid1_fu_1082_p1));

assign tmp18_mid2_fu_1090_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? tmp18_mid1_fu_1085_p2 : tmp18_mid_fu_1077_p3);

assign tmp18_mid_fu_1077_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? p_read1 : tmp4_reg_1759);

assign tmp19_cast_mid2_fu_1297_p1 = $signed(tmp19_cast_mid2_v_fu_1292_p2);

assign tmp19_cast_mid2_v_fu_1292_p2 = ($signed(tmp19_cast_mid2_v_v_fu_1289_p1) + $signed(tmp_11_i_i_cast_mid2_reg_2019));

assign tmp19_cast_mid2_v_v_fu_1289_p1 = $signed(tmp19_cast_mid2_v_v_1_reg_2140);

assign tmp20_cast_fu_1301_p1 = $signed(tmp12_reg_2145);

assign tmp22_cast_fu_1367_p1 = $signed(tmp15_fu_1361_p2);

assign tmp23_cast_fu_1358_p1 = $signed(tmp14_reg_2171);

assign tmp2_fu_514_p2 = (p_read1 + p_read);

assign tmp3_fu_520_p2 = (tmp2_fu_514_p2 + p_read3);

assign tmp4_fu_614_p2 = ($signed(p_read1) + $signed(tmp_23_i_i_fu_611_p1));

assign tmp7_fu_601_p2 = (p_read + tmp_17_i_i_fu_597_p1);

assign tmp7_mid1_fu_799_p2 = (p_read + tmp_17_i_i_mid1_fu_796_p1);

assign tmp_11_i_i_cast_mid2_1_fu_647_p3 = ((exitcond_flatten_fu_628_p2[0:0] === 1'b1) ? b_s_fu_641_p2 : b_i_i_reg_252);

assign tmp_11_i_i_cast_mid2_2_fu_729_p1 = tmp_11_i_i_cast_mid2_1_reg_1785;

assign tmp_11_i_i_cast_mid2_fu_1105_p1 = $signed(tmp_11_i_i_cast_mid2_4_reg_1966);

assign tmp_17_i_i_fu_597_p1 = o_d_i_i_reg_228;

assign tmp_17_i_i_mid1_fu_796_p1 = o_d_reg_1801;

assign tmp_19_i_i_fu_606_p2 = (p_read1 + tmp7_fu_601_p2);

assign tmp_19_i_i_mid1_fu_804_p2 = (p_read1 + tmp7_mid1_fu_799_p2);

assign tmp_19_i_i_mid2_fu_809_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? tmp_19_i_i_mid1_fu_804_p2 : tmp_19_i_i_mid_fu_742_p3);

assign tmp_19_i_i_mid_fu_742_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? tmp2_reg_1671 : tmp_19_i_i_reg_1749);

assign tmp_1_fu_761_p2 = (smax_fu_753_p3 + indvars_iv_reg_287);

assign tmp_23_i_i_fu_611_p1 = $signed(tmp_22_i_i_reg_1744);

assign tmp_23_i_i_mid1_fu_1082_p1 = $signed(tmp_22_i_i_mid1_reg_1976);

assign tmp_26_i_i_cast_mid2_1_fu_1108_p1 = $signed(tmp_26_i_i_cast_mid2_reg_1981);

assign tmp_26_i_i_cast_mid2_fu_1054_p3 = ((exitcond_flatten73_m_1_reg_1791[0:0] === 1'b1) ? grp_fu_1044_p2 : tmp_26_i_i_cast_mid_fu_1048_p3);

assign tmp_26_i_i_cast_mid_fu_1048_p3 = ((exitcond_flatten_reg_1774[0:0] === 1'b1) ? 32'd0 : tmp_25_i_i_reg_1754);

assign tmp_2_fu_680_p2 = (exitcond_flatten73_m_1_fu_667_p3 | exitcond_flatten_fu_628_p2);

assign tmp_30_i_i_cast_mid2_1_fu_1111_p1 = $signed(tmp_30_i_i_cast_mid2_reg_1945);

assign tmp_30_i_i_cast_mid2_fu_1013_p3 = ((tmp_31_i_i_mid2_reg_1819[0:0] === 1'b1) ? tmp_30_i_i_cast_mid_fu_993_p3 : grp_fu_882_p2);

assign tmp_30_i_i_cast_mid_fu_993_p3 = ((tmp_2_reg_1807[0:0] === 1'b1) ? 32'd0 : tmp_29_i_i_reg_1769);

assign tmp_31_i_i_fu_623_p2 = (($signed(o_x_cast_i_i_fu_619_p1) < $signed(ox_read_reg_1538)) ? 1'b1 : 1'b0);

assign tmp_31_i_i_mid1_fu_655_p3 = ((exitcond_flatten_fu_628_p2[0:0] === 1'b1) ? tmp_31_i_i_mid_reg_1697 : tmp_31_i_i_fu_623_p2);

assign tmp_31_i_i_mid2_fu_694_p3 = ((exitcond_flatten73_m_1_fu_667_p3[0:0] === 1'b1) ? tmp_31_i_i_mid_reg_1697 : tmp_31_i_i_mid1_fu_655_p3);

assign tmp_31_i_i_mid_fu_538_p2 = (($signed(ox_read_reg_1538) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_32_i_i_fu_1114_p2 = ($signed(k_read_reg_1558) + $signed(i_x_reg_2011));

assign tmp_33_i_i_to_int_fu_1457_p1 = tmp_54_i_i_reg_421;

assign tmp_3_fu_960_p2 = (($signed(indvars_iv19_mid2_fu_954_p3) > $signed(indvars_iv21_mid2_fu_947_p3)) ? 1'b1 : 1'b0);

assign tmp_40_i_i_cast_mid2_1_fu_1145_p3 = ((exitcond_flatten2_fu_1134_p2[0:0] === 1'b1) ? i_d_fu_1139_p2 : i_d_i_i_phi_fu_382_p4);

assign tmp_40_i_i_cast_mid2_2_fu_1167_p1 = tmp_40_i_i_cast_mid2_1_reg_2063;

assign tmp_40_i_i_cast_mid2_fu_1355_p1 = $signed(tmp_40_i_i_cast_mid2_4_reg_2166);

assign tmp_42_i_i_fu_1499_p3 = ((tmp_8_fu_1493_p2[0:0] === 1'b1) ? tmp_54_i_i_reg_421 : 32'd0);

assign tmp_43_i_i_cast_fu_1382_p1 = o_x_i_i_mid2_reg_1932;

assign tmp_47_i_i_fu_1403_p2 = ($signed(tmp12_cast_fu_1399_p1) + $signed(tmp10_mid2_reg_1991));

assign tmp_4_fu_1461_p4 = {{tmp_33_i_i_to_int_fu_1457_p1[30:23]}};

assign tmp_51_i_i_cast_mid2_1_fu_1237_p3 = ((tmp_55_i_i_mid_fu_1210_p3[0:0] === 1'b1) ? i_y1_i_i_mid_fu_1175_p3 : i_y_1_fu_1216_p2);

assign tmp_51_i_i_cast_mid2_fu_1272_p1 = $signed(tmp_51_i_i_cast_mid2_2_reg_2135);

assign tmp_53_i_i_cast_mid2_1_fu_1337_p1 = $signed(tmp_53_i_i_cast_mid2_fu_1331_p3);

assign tmp_53_i_i_cast_mid2_fu_1331_p3 = ((tmp_55_i_i_mid_reg_2091[0:0] === 1'b1) ? tmp_53_i_i_cast_mid_fu_1325_p3 : tmp_52_i_i_mid1_reg_2155);

assign tmp_53_i_i_cast_mid_fu_1325_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? 32'd0 : tmp_52_i_i_reg_2080);

assign tmp_55_i_i_fu_1205_p2 = (($signed(i_x1_i_i_phi_fu_434_p4) < $signed(tmp_32_i_i_reg_2034)) ? 1'b1 : 1'b0);

assign tmp_55_i_i_mid_fu_1210_p3 = ((exitcond_flatten2_reg_2053[0:0] === 1'b1) ? p_mid_reg_1686 : tmp_55_i_i_fu_1205_p2);

assign tmp_56_i_i_cast_fu_1275_p1 = $signed(i_x1_i_i_mid2_reg_2097);

assign tmp_5_fu_974_p2 = (indvars_iv24_mid2_fu_940_p3 + smax1_fu_966_p3);

assign tmp_62_i_i_fu_1314_p2 = ($signed(tmp3_reg_1676) + $signed(tmp18_cast_fu_1310_p1));

assign tmp_63_i_i_cast_fu_1341_p1 = $signed(iix_i_i_mid2_reg_2103);

assign tmp_67_i_i_fu_1371_p2 = ($signed(tmp18_mid2_reg_1996) + $signed(tmp22_cast_fu_1367_p1));

assign tmp_6_fu_1487_p2 = (notrhs_fu_1481_p2 | notlhs_fu_1475_p2);

assign tmp_8_fu_1493_p2 = (tmp_6_fu_1487_p2 & grp_fu_460_p2);

assign tmp_9_fu_1471_p1 = tmp_33_i_i_to_int_fu_1457_p1[22:0];

assign tmp_s_fu_747_p2 = (($signed(indvars_iv2_reg_311) > $signed(indvars_iv1_reg_299)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    cast7_reg_1708[95:32] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    o_d_cast_i_i_mid1_reg_1713[31] <= 1'b0;
    tmp_40_i_i_cast_mid2_2_reg_2074[31] <= 1'b0;
end

endmodule //Loop_batch_loop_proc

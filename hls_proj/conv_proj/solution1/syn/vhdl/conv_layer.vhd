-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of conv_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=5,HLS_SYN_TPT=148745748501,HLS_SYN_MEM=2,HLS_SYN_DSP=181,HLS_SYN_FF=19219,HLS_SYN_LUT=9775}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal od : STD_LOGIC_VECTOR (31 downto 0);
    signal ox : STD_LOGIC_VECTOR (31 downto 0);
    signal oy : STD_LOGIC_VECTOR (31 downto 0);
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal ix : STD_LOGIC_VECTOR (31 downto 0);
    signal iy : STD_LOGIC_VECTOR (31 downto 0);
    signal s : STD_LOGIC_VECTOR (31 downto 0);
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_RVALID : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc4_U0_ap_start : STD_LOGIC;
    signal Block_proc4_U0_ap_done : STD_LOGIC;
    signal Block_proc4_U0_ap_continue : STD_LOGIC;
    signal Block_proc4_U0_ap_idle : STD_LOGIC;
    signal Block_proc4_U0_ap_ready : STD_LOGIC;
    signal Block_proc4_U0_id_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_id_out_write : STD_LOGIC;
    signal Block_proc4_U0_od_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_od_out_write : STD_LOGIC;
    signal Block_proc4_U0_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_k_out_write : STD_LOGIC;
    signal Block_proc4_U0_b_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_b_out_write : STD_LOGIC;
    signal Block_proc4_U0_ox_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_ox_out_write : STD_LOGIC;
    signal Block_proc4_U0_oy_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_oy_out_write : STD_LOGIC;
    signal Block_proc4_U0_ix_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_ix_out_write : STD_LOGIC;
    signal Block_proc4_U0_iy_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_iy_out_write : STD_LOGIC;
    signal Block_proc4_U0_s_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_s_out_write : STD_LOGIC;
    signal Block_proc4_U0_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc4_U0_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc4_U0_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc4_U0_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_channel_done_tmp_7_loc_channel : STD_LOGIC;
    signal tmp_7_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_7_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_7_loc_channel : STD_LOGIC;
    signal ap_channel_done_tmp_5_loc_channel : STD_LOGIC;
    signal tmp_5_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_5_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_5_loc_channel : STD_LOGIC;
    signal ap_channel_done_tmp_3_loc_channel : STD_LOGIC;
    signal tmp_3_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_3_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_3_loc_channel : STD_LOGIC;
    signal ap_channel_done_tmp_4_loc_channel : STD_LOGIC;
    signal tmp_4_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_4_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_4_loc_channel : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_b_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_od_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_id_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ix_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_iy_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ox_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_oy_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWVALID : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_WVALID : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_WLAST : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARVALID : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_batch_loop_proc_U0_m_axi_mem_RREADY : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_m_axi_mem_BREADY : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_k_read : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_s_read : STD_LOGIC;
    signal id_channel_full_n : STD_LOGIC;
    signal id_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal id_channel_empty_n : STD_LOGIC;
    signal od_channel_full_n : STD_LOGIC;
    signal od_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal od_channel_empty_n : STD_LOGIC;
    signal k_channel_full_n : STD_LOGIC;
    signal k_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal k_channel_empty_n : STD_LOGIC;
    signal b_channel_full_n : STD_LOGIC;
    signal b_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal b_channel_empty_n : STD_LOGIC;
    signal ox_channel_full_n : STD_LOGIC;
    signal ox_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ox_channel_empty_n : STD_LOGIC;
    signal oy_channel_full_n : STD_LOGIC;
    signal oy_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal oy_channel_empty_n : STD_LOGIC;
    signal ix_channel_full_n : STD_LOGIC;
    signal ix_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_channel_empty_n : STD_LOGIC;
    signal iy_channel_full_n : STD_LOGIC;
    signal iy_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal iy_channel_empty_n : STD_LOGIC;
    signal s_channel_full_n : STD_LOGIC;
    signal s_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal s_channel_empty_n : STD_LOGIC;
    signal tmp_4_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_loc_channel_empty_n : STD_LOGIC;
    signal tmp_3_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_loc_channel_empty_n : STD_LOGIC;
    signal tmp_5_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_loc_channel_empty_n : STD_LOGIC;
    signal tmp_7_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_batch_loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_proc4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc4_U0_ap_ready : STD_LOGIC;
    signal Block_proc4_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_proc4_U0_start_full_n : STD_LOGIC;
    signal Block_proc4_U0_start_write : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_batch_loop_proc_U0_start_write : STD_LOGIC;

    component Block_proc4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        id : IN STD_LOGIC_VECTOR (31 downto 0);
        od : IN STD_LOGIC_VECTOR (31 downto 0);
        k : IN STD_LOGIC_VECTOR (31 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        output_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (31 downto 0);
        ox : IN STD_LOGIC_VECTOR (31 downto 0);
        oy : IN STD_LOGIC_VECTOR (31 downto 0);
        ix : IN STD_LOGIC_VECTOR (31 downto 0);
        iy : IN STD_LOGIC_VECTOR (31 downto 0);
        s : IN STD_LOGIC_VECTOR (31 downto 0);
        id_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        id_out_full_n : IN STD_LOGIC;
        id_out_write : OUT STD_LOGIC;
        od_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        od_out_full_n : IN STD_LOGIC;
        od_out_write : OUT STD_LOGIC;
        k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        k_out_full_n : IN STD_LOGIC;
        k_out_write : OUT STD_LOGIC;
        b_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_out_full_n : IN STD_LOGIC;
        b_out_write : OUT STD_LOGIC;
        ox_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ox_out_full_n : IN STD_LOGIC;
        ox_out_write : OUT STD_LOGIC;
        oy_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        oy_out_full_n : IN STD_LOGIC;
        oy_out_write : OUT STD_LOGIC;
        ix_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ix_out_full_n : IN STD_LOGIC;
        ix_out_write : OUT STD_LOGIC;
        iy_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        iy_out_full_n : IN STD_LOGIC;
        iy_out_write : OUT STD_LOGIC;
        s_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_out_full_n : IN STD_LOGIC;
        s_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Loop_batch_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        b_empty_n : IN STD_LOGIC;
        b_read : OUT STD_LOGIC;
        od_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        od_empty_n : IN STD_LOGIC;
        od_read : OUT STD_LOGIC;
        id_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        id_empty_n : IN STD_LOGIC;
        id_read : OUT STD_LOGIC;
        ix_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ix_empty_n : IN STD_LOGIC;
        ix_read : OUT STD_LOGIC;
        iy_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        iy_empty_n : IN STD_LOGIC;
        iy_read : OUT STD_LOGIC;
        ox_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ox_empty_n : IN STD_LOGIC;
        ox_read : OUT STD_LOGIC;
        oy_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        oy_empty_n : IN STD_LOGIC;
        oy_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_empty_n : IN STD_LOGIC;
        k_read : OUT STD_LOGIC;
        s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        s_empty_n : IN STD_LOGIC;
        s_read : OUT STD_LOGIC;
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component conv_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        od : OUT STD_LOGIC_VECTOR (31 downto 0);
        ox : OUT STD_LOGIC_VECTOR (31 downto 0);
        oy : OUT STD_LOGIC_VECTOR (31 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        ix : OUT STD_LOGIC_VECTOR (31 downto 0);
        iy : OUT STD_LOGIC_VECTOR (31 downto 0);
        s : OUT STD_LOGIC_VECTOR (31 downto 0);
        k : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_layer_CTRL_BUS_s_axi_U : component conv_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        b => b,
        od => od,
        ox => ox,
        oy => oy,
        id => id,
        ix => ix,
        iy => iy,
        s => s,
        k => k);

    conv_layer_mem_m_axi_U : component conv_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_batch_loop_proc_U0_m_axi_mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => Loop_batch_loop_proc_U0_m_axi_mem_ARADDR,
        I_ARID => Loop_batch_loop_proc_U0_m_axi_mem_ARID,
        I_ARLEN => Loop_batch_loop_proc_U0_m_axi_mem_ARLEN,
        I_ARSIZE => Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE,
        I_ARLOCK => Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK,
        I_ARCACHE => Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE,
        I_ARQOS => Loop_batch_loop_proc_U0_m_axi_mem_ARQOS,
        I_ARPROT => Loop_batch_loop_proc_U0_m_axi_mem_ARPROT,
        I_ARUSER => Loop_batch_loop_proc_U0_m_axi_mem_ARUSER,
        I_ARBURST => Loop_batch_loop_proc_U0_m_axi_mem_ARBURST,
        I_ARREGION => Loop_batch_loop_proc_U0_m_axi_mem_ARREGION,
        I_RVALID => mem_RVALID,
        I_RREADY => Loop_batch_loop_proc_U0_m_axi_mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => Loop_batch_loop_proc_U0_m_axi_mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => Loop_batch_loop_proc_U0_m_axi_mem_AWADDR,
        I_AWID => Loop_batch_loop_proc_U0_m_axi_mem_AWID,
        I_AWLEN => Loop_batch_loop_proc_U0_m_axi_mem_AWLEN,
        I_AWSIZE => Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE,
        I_AWLOCK => Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK,
        I_AWCACHE => Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE,
        I_AWQOS => Loop_batch_loop_proc_U0_m_axi_mem_AWQOS,
        I_AWPROT => Loop_batch_loop_proc_U0_m_axi_mem_AWPROT,
        I_AWUSER => Loop_batch_loop_proc_U0_m_axi_mem_AWUSER,
        I_AWBURST => Loop_batch_loop_proc_U0_m_axi_mem_AWBURST,
        I_AWREGION => Loop_batch_loop_proc_U0_m_axi_mem_AWREGION,
        I_WVALID => Loop_batch_loop_proc_U0_m_axi_mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => Loop_batch_loop_proc_U0_m_axi_mem_WDATA,
        I_WID => Loop_batch_loop_proc_U0_m_axi_mem_WID,
        I_WUSER => Loop_batch_loop_proc_U0_m_axi_mem_WUSER,
        I_WLAST => Loop_batch_loop_proc_U0_m_axi_mem_WLAST,
        I_WSTRB => Loop_batch_loop_proc_U0_m_axi_mem_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => Loop_batch_loop_proc_U0_m_axi_mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    Block_proc4_U0 : component Block_proc4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc4_U0_ap_start,
        ap_done => Block_proc4_U0_ap_done,
        ap_continue => Block_proc4_U0_ap_continue,
        ap_idle => Block_proc4_U0_ap_idle,
        ap_ready => Block_proc4_U0_ap_ready,
        id => id,
        od => od,
        k => k,
        input_offset => input_offset,
        output_offset => output_offset,
        b => b,
        ox => ox,
        oy => oy,
        ix => ix,
        iy => iy,
        s => s,
        id_out_din => Block_proc4_U0_id_out_din,
        id_out_full_n => id_channel_full_n,
        id_out_write => Block_proc4_U0_id_out_write,
        od_out_din => Block_proc4_U0_od_out_din,
        od_out_full_n => od_channel_full_n,
        od_out_write => Block_proc4_U0_od_out_write,
        k_out_din => Block_proc4_U0_k_out_din,
        k_out_full_n => k_channel_full_n,
        k_out_write => Block_proc4_U0_k_out_write,
        b_out_din => Block_proc4_U0_b_out_din,
        b_out_full_n => b_channel_full_n,
        b_out_write => Block_proc4_U0_b_out_write,
        ox_out_din => Block_proc4_U0_ox_out_din,
        ox_out_full_n => ox_channel_full_n,
        ox_out_write => Block_proc4_U0_ox_out_write,
        oy_out_din => Block_proc4_U0_oy_out_din,
        oy_out_full_n => oy_channel_full_n,
        oy_out_write => Block_proc4_U0_oy_out_write,
        ix_out_din => Block_proc4_U0_ix_out_din,
        ix_out_full_n => ix_channel_full_n,
        ix_out_write => Block_proc4_U0_ix_out_write,
        iy_out_din => Block_proc4_U0_iy_out_din,
        iy_out_full_n => iy_channel_full_n,
        iy_out_write => Block_proc4_U0_iy_out_write,
        s_out_din => Block_proc4_U0_s_out_din,
        s_out_full_n => s_channel_full_n,
        s_out_write => Block_proc4_U0_s_out_write,
        ap_return_0 => Block_proc4_U0_ap_return_0,
        ap_return_1 => Block_proc4_U0_ap_return_1,
        ap_return_2 => Block_proc4_U0_ap_return_2,
        ap_return_3 => Block_proc4_U0_ap_return_3);

    Loop_batch_loop_proc_U0 : component Loop_batch_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_batch_loop_proc_U0_ap_start,
        ap_done => Loop_batch_loop_proc_U0_ap_done,
        ap_continue => Loop_batch_loop_proc_U0_ap_continue,
        ap_idle => Loop_batch_loop_proc_U0_ap_idle,
        ap_ready => Loop_batch_loop_proc_U0_ap_ready,
        b_dout => b_channel_dout,
        b_empty_n => b_channel_empty_n,
        b_read => Loop_batch_loop_proc_U0_b_read,
        od_dout => od_channel_dout,
        od_empty_n => od_channel_empty_n,
        od_read => Loop_batch_loop_proc_U0_od_read,
        id_dout => id_channel_dout,
        id_empty_n => id_channel_empty_n,
        id_read => Loop_batch_loop_proc_U0_id_read,
        ix_dout => ix_channel_dout,
        ix_empty_n => ix_channel_empty_n,
        ix_read => Loop_batch_loop_proc_U0_ix_read,
        iy_dout => iy_channel_dout,
        iy_empty_n => iy_channel_empty_n,
        iy_read => Loop_batch_loop_proc_U0_iy_read,
        ox_dout => ox_channel_dout,
        ox_empty_n => ox_channel_empty_n,
        ox_read => Loop_batch_loop_proc_U0_ox_read,
        oy_dout => oy_channel_dout,
        oy_empty_n => oy_channel_empty_n,
        oy_read => Loop_batch_loop_proc_U0_oy_read,
        p_read => tmp_4_loc_channel_dout,
        p_read1 => tmp_3_loc_channel_dout,
        m_axi_mem_AWVALID => Loop_batch_loop_proc_U0_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => mem_AWREADY,
        m_axi_mem_AWADDR => Loop_batch_loop_proc_U0_m_axi_mem_AWADDR,
        m_axi_mem_AWID => Loop_batch_loop_proc_U0_m_axi_mem_AWID,
        m_axi_mem_AWLEN => Loop_batch_loop_proc_U0_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => Loop_batch_loop_proc_U0_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => Loop_batch_loop_proc_U0_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => Loop_batch_loop_proc_U0_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => Loop_batch_loop_proc_U0_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => Loop_batch_loop_proc_U0_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => Loop_batch_loop_proc_U0_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => Loop_batch_loop_proc_U0_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => Loop_batch_loop_proc_U0_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => Loop_batch_loop_proc_U0_m_axi_mem_WVALID,
        m_axi_mem_WREADY => mem_WREADY,
        m_axi_mem_WDATA => Loop_batch_loop_proc_U0_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => Loop_batch_loop_proc_U0_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => Loop_batch_loop_proc_U0_m_axi_mem_WLAST,
        m_axi_mem_WID => Loop_batch_loop_proc_U0_m_axi_mem_WID,
        m_axi_mem_WUSER => Loop_batch_loop_proc_U0_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => Loop_batch_loop_proc_U0_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => Loop_batch_loop_proc_U0_m_axi_mem_ARADDR,
        m_axi_mem_ARID => Loop_batch_loop_proc_U0_m_axi_mem_ARID,
        m_axi_mem_ARLEN => Loop_batch_loop_proc_U0_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => Loop_batch_loop_proc_U0_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => Loop_batch_loop_proc_U0_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => Loop_batch_loop_proc_U0_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => Loop_batch_loop_proc_U0_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => Loop_batch_loop_proc_U0_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => Loop_batch_loop_proc_U0_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => Loop_batch_loop_proc_U0_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => Loop_batch_loop_proc_U0_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => Loop_batch_loop_proc_U0_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => mem_RLAST,
        m_axi_mem_RID => mem_RID,
        m_axi_mem_RUSER => mem_RUSER,
        m_axi_mem_RRESP => mem_RRESP,
        m_axi_mem_BVALID => mem_BVALID,
        m_axi_mem_BREADY => Loop_batch_loop_proc_U0_m_axi_mem_BREADY,
        m_axi_mem_BRESP => mem_BRESP,
        m_axi_mem_BID => mem_BID,
        m_axi_mem_BUSER => mem_BUSER,
        k_dout => k_channel_dout,
        k_empty_n => k_channel_empty_n,
        k_read => Loop_batch_loop_proc_U0_k_read,
        s_dout => s_channel_dout,
        s_empty_n => s_channel_empty_n,
        s_read => Loop_batch_loop_proc_U0_s_read,
        p_read2 => tmp_7_loc_channel_dout,
        p_read3 => tmp_5_loc_channel_dout);

    id_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_id_out_din,
        if_full_n => id_channel_full_n,
        if_write => Block_proc4_U0_id_out_write,
        if_dout => id_channel_dout,
        if_empty_n => id_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_id_read);

    od_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_od_out_din,
        if_full_n => od_channel_full_n,
        if_write => Block_proc4_U0_od_out_write,
        if_dout => od_channel_dout,
        if_empty_n => od_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_od_read);

    k_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_k_out_din,
        if_full_n => k_channel_full_n,
        if_write => Block_proc4_U0_k_out_write,
        if_dout => k_channel_dout,
        if_empty_n => k_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_k_read);

    b_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_b_out_din,
        if_full_n => b_channel_full_n,
        if_write => Block_proc4_U0_b_out_write,
        if_dout => b_channel_dout,
        if_empty_n => b_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_b_read);

    ox_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ox_out_din,
        if_full_n => ox_channel_full_n,
        if_write => Block_proc4_U0_ox_out_write,
        if_dout => ox_channel_dout,
        if_empty_n => ox_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ox_read);

    oy_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_oy_out_din,
        if_full_n => oy_channel_full_n,
        if_write => Block_proc4_U0_oy_out_write,
        if_dout => oy_channel_dout,
        if_empty_n => oy_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_oy_read);

    ix_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ix_out_din,
        if_full_n => ix_channel_full_n,
        if_write => Block_proc4_U0_ix_out_write,
        if_dout => ix_channel_dout,
        if_empty_n => ix_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ix_read);

    iy_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_iy_out_din,
        if_full_n => iy_channel_full_n,
        if_write => Block_proc4_U0_iy_out_write,
        if_dout => iy_channel_dout,
        if_empty_n => iy_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_iy_read);

    s_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_s_out_din,
        if_full_n => s_channel_full_n,
        if_write => Block_proc4_U0_s_out_write,
        if_dout => s_channel_dout,
        if_empty_n => s_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_s_read);

    tmp_4_loc_channel_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_0,
        if_full_n => tmp_4_loc_channel_full_n,
        if_write => ap_channel_done_tmp_4_loc_channel,
        if_dout => tmp_4_loc_channel_dout,
        if_empty_n => tmp_4_loc_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ap_ready);

    tmp_3_loc_channel_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_1,
        if_full_n => tmp_3_loc_channel_full_n,
        if_write => ap_channel_done_tmp_3_loc_channel,
        if_dout => tmp_3_loc_channel_dout,
        if_empty_n => tmp_3_loc_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ap_ready);

    tmp_5_loc_channel_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_2,
        if_full_n => tmp_5_loc_channel_full_n,
        if_write => ap_channel_done_tmp_5_loc_channel,
        if_dout => tmp_5_loc_channel_dout,
        if_empty_n => tmp_5_loc_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ap_ready);

    tmp_7_loc_channel_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_3,
        if_full_n => tmp_7_loc_channel_full_n,
        if_write => ap_channel_done_tmp_7_loc_channel,
        if_dout => tmp_7_loc_channel_dout,
        if_empty_n => tmp_7_loc_channel_empty_n,
        if_read => Loop_batch_loop_proc_U0_ap_ready);





    ap_sync_reg_Block_proc4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_proc4_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_Block_proc4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc4_U0_ap_ready <= ap_sync_Block_proc4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_sync_ready))) then 
                    ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready <= ap_sync_Loop_batch_loop_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_3_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_3_loc_channel <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_tmp_3_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_3_loc_channel <= ap_sync_channel_write_tmp_3_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_4_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_4_loc_channel <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_tmp_4_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_4_loc_channel <= ap_sync_channel_write_tmp_4_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_5_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_5_loc_channel <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_tmp_5_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_5_loc_channel <= ap_sync_channel_write_tmp_5_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_7_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_7_loc_channel <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_tmp_7_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_7_loc_channel <= ap_sync_channel_write_tmp_7_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    Block_proc4_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sync_ready) and (Block_proc4_U0_ap_ready = ap_const_logic_0))) then 
                Block_proc4_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc4_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_sync_ready) and (ap_const_logic_1 = Block_proc4_U0_ap_ready))) then 
                Block_proc4_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc4_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_batch_loop_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_batch_loop_proc_U0_ap_ready) and (ap_const_logic_1 = ap_sync_ready))) then 
                Loop_batch_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_batch_loop_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_batch_loop_proc_U0_ap_ready) and (ap_const_logic_0 = ap_sync_ready))) then 
                Loop_batch_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_batch_loop_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_proc4_U0_ap_continue <= (ap_sync_channel_write_tmp_7_loc_channel and ap_sync_channel_write_tmp_5_loc_channel and ap_sync_channel_write_tmp_3_loc_channel and ap_sync_channel_write_tmp_4_loc_channel);
    Block_proc4_U0_ap_start <= (ap_start and (ap_sync_reg_Block_proc4_U0_ap_ready xor ap_const_logic_1));
    Block_proc4_U0_start_full_n <= ap_const_logic_0;
    Block_proc4_U0_start_write <= ap_const_logic_0;
    Loop_batch_loop_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_batch_loop_proc_U0_ap_start <= (ap_start and tmp_4_loc_channel_empty_n and tmp_3_loc_channel_empty_n and tmp_5_loc_channel_empty_n and tmp_7_loc_channel_empty_n and (ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready xor ap_const_logic_1));
    Loop_batch_loop_proc_U0_start_full_n <= ap_const_logic_0;
    Loop_batch_loop_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_tmp_3_loc_channel <= (Block_proc4_U0_ap_done and (ap_sync_reg_channel_write_tmp_3_loc_channel xor ap_const_logic_1));
    ap_channel_done_tmp_4_loc_channel <= (Block_proc4_U0_ap_done and (ap_sync_reg_channel_write_tmp_4_loc_channel xor ap_const_logic_1));
    ap_channel_done_tmp_5_loc_channel <= (Block_proc4_U0_ap_done and (ap_sync_reg_channel_write_tmp_5_loc_channel xor ap_const_logic_1));
    ap_channel_done_tmp_7_loc_channel <= (Block_proc4_U0_ap_done and (ap_sync_reg_channel_write_tmp_7_loc_channel xor ap_const_logic_1));
    ap_done <= Loop_batch_loop_proc_U0_ap_done;
    ap_idle <= (Block_proc4_U0_ap_idle and Loop_batch_loop_proc_U0_ap_idle and (tmp_4_loc_channel_empty_n xor ap_const_logic_1) and (tmp_3_loc_channel_empty_n xor ap_const_logic_1) and (tmp_5_loc_channel_empty_n xor ap_const_logic_1) and (tmp_7_loc_channel_empty_n xor ap_const_logic_1));
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_proc4_U0_ap_ready <= (Block_proc4_U0_ap_ready or ap_sync_reg_Block_proc4_U0_ap_ready);
    ap_sync_Loop_batch_loop_proc_U0_ap_ready <= (Loop_batch_loop_proc_U0_ap_ready or ap_sync_reg_Loop_batch_loop_proc_U0_ap_ready);
    ap_sync_channel_write_tmp_3_loc_channel <= ((ap_channel_done_tmp_3_loc_channel and tmp_3_loc_channel_full_n) or ap_sync_reg_channel_write_tmp_3_loc_channel);
    ap_sync_channel_write_tmp_4_loc_channel <= ((ap_channel_done_tmp_4_loc_channel and tmp_4_loc_channel_full_n) or ap_sync_reg_channel_write_tmp_4_loc_channel);
    ap_sync_channel_write_tmp_5_loc_channel <= ((ap_channel_done_tmp_5_loc_channel and tmp_5_loc_channel_full_n) or ap_sync_reg_channel_write_tmp_5_loc_channel);
    ap_sync_channel_write_tmp_7_loc_channel <= ((ap_channel_done_tmp_7_loc_channel and tmp_7_loc_channel_full_n) or ap_sync_reg_channel_write_tmp_7_loc_channel);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_batch_loop_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_batch_loop_proc_U0_ap_ready and ap_sync_Block_proc4_U0_ap_ready);
end behav;

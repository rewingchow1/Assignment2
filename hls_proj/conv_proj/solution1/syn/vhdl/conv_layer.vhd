-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=448308803868,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=57,HLS_SYN_FF=10965,HLS_SYN_LUT=4734}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal od : STD_LOGIC_VECTOR (31 downto 0);
    signal ox : STD_LOGIC_VECTOR (31 downto 0);
    signal oy : STD_LOGIC_VECTOR (31 downto 0);
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal ix : STD_LOGIC_VECTOR (31 downto 0);
    signal iy : STD_LOGIC_VECTOR (31 downto 0);
    signal s : STD_LOGIC_VECTOR (31 downto 0);
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_20_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal k_read_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_read_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal iy_read_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_read_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_read_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal oy_read_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal ox_read_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal od_read_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1030 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_reg_1035 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1045 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_weights_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1055 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_4_cast_fu_510_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_cast_reg_1061 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_533_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp4_reg_1086 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul1_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal next_mul3_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_fu_558_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_1_reg_1104 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_cast_fu_574_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_cast_reg_1109 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_15_cast_fu_578_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_15_cast_reg_1114 : STD_LOGIC_VECTOR (32 downto 0);
    signal next_mul5_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal next_mul7_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul7_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_1_fu_601_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_1_reg_1132 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_reg_1137 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp6_reg_1153 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp9_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp9_reg_1158 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul9_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul9_reg_1163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal next_mul8_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul8_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_1_fu_676_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_1_reg_1176 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_cast_fu_687_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_30_cast_reg_1186 : STD_LOGIC_VECTOR (33 downto 0);
    signal next_mul6_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul6_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_block_state17_io : BOOLEAN;
    signal o_x_1_fu_705_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_1_reg_1199 : STD_LOGIC_VECTOR (30 downto 0);
    signal output_element_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal next_mul4_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal next_mul2_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_1_fu_735_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_1_reg_1227 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_1_reg_1232 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_40_cast_fu_787_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_40_cast_reg_1242 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp16_cast_fu_796_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp16_cast_reg_1247 : STD_LOGIC_VECTOR (33 downto 0);
    signal next_mul_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_51_cast_fu_815_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_51_cast_reg_1260 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_53_cast_fu_819_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_53_cast_reg_1265 : STD_LOGIC_VECTOR (32 downto 0);
    signal iix_1_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_1_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal mem_addr_2_reg_1278 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_addr_3_reg_1284 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_x_1_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_1_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_1_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_2_read_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_addr_3_read_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_33_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal b_s_reg_203 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul2_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul4_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_reg_238 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul6_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul8_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_reg_273 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_y_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul9_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_reg_307 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_x_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_d_reg_341 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul1_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y1_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_620_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_768_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_856_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_503_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_fu_516_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_5_cast_fu_513_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_523_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp14_cast_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_cast_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_cast_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_607_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp7_fu_611_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp7_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_y_cast_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_cast_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_cast_fu_746_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp21_fu_750_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp23_cast_fu_755_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp22_fu_759_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp22_cast_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_779_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_fu_784_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp10_fu_791_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_cast_fu_834_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp17_fu_838_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp17_cast_fu_843_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp15_fu_847_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp15_cast_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_cast_fu_867_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp20_fu_871_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp20_cast_fu_876_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp19_fu_880_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp19_cast_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_to_int_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_916_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_926_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_453_ce : STD_LOGIC;
    signal tmp_8_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);

    component conv_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_fcmp_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_layer_mul_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        od : OUT STD_LOGIC_VECTOR (31 downto 0);
        ox : OUT STD_LOGIC_VECTOR (31 downto 0);
        oy : OUT STD_LOGIC_VECTOR (31 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        ix : OUT STD_LOGIC_VECTOR (31 downto 0);
        iy : OUT STD_LOGIC_VECTOR (31 downto 0);
        s : OUT STD_LOGIC_VECTOR (31 downto 0);
        k : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_layer_CTRL_BUS_s_axi_U : component conv_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        b => b,
        od => od,
        ox => ox,
        oy => oy,
        id => id,
        ix => ix,
        iy => iy,
        s => s,
        k => k);

    conv_layer_mem_m_axi_U : component conv_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => mem_addr_1_reg_1232,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => tmp_33_reg_1320,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    conv_layer_fadd_3bkb_U1 : component conv_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_39_reg_411,
        din1 => tmp_44_reg_1310,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    conv_layer_fmul_3cud_U2 : component conv_layer_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mem_addr_2_read_reg_1300,
        din1 => mem_addr_3_read_reg_1305,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    conv_layer_fcmp_3dEe_U3 : component conv_layer_fcmp_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_23_reg_331,
        din1 => ap_const_lv32_0,
        ce => grp_fu_453_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_453_p2);

    conv_layer_mul_32eOg_U4 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => od_read_reg_1017,
        din1 => id_read_reg_994,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);

    conv_layer_mul_32eOg_U5 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => k_read_reg_962,
        din1 => k_read_reg_962,
        ce => ap_const_logic_1,
        dout => grp_fu_483_p2);

    conv_layer_mul_32eOg_U6 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp2_reg_1045,
        din1 => tmp1_reg_1040,
        ce => ap_const_logic_1,
        dout => grp_fu_487_p2);

    conv_layer_mul_32eOg_U7 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ix_read_reg_987,
        din1 => id_read_reg_994,
        ce => ap_const_logic_1,
        dout => grp_fu_491_p2);

    conv_layer_mul_32eOg_U8 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ox_read_reg_1009,
        din1 => od_read_reg_1017,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    conv_layer_mul_32eOg_U9 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_994,
        din1 => k_read_reg_962,
        ce => ap_const_logic_1,
        dout => grp_fu_499_p2);

    conv_layer_mul_32eOg_U10 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul2_reg_214,
        din1 => tmp3_reg_1071,
        ce => ap_const_logic_1,
        dout => grp_fu_564_p2);

    conv_layer_mul_32eOg_U11 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul4_reg_226,
        din1 => tmp5_reg_1076,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    conv_layer_mul_32eOg_U12 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul6_reg_249,
        din1 => tmp8_reg_1081,
        ce => ap_const_logic_1,
        dout => grp_fu_631_p2);

    conv_layer_mul_32eOg_U13 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul8_reg_261,
        din1 => ox_read_reg_1009,
        ce => ap_const_logic_1,
        dout => grp_fu_636_p2);

    conv_layer_mul_32eOg_U14 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul1_reg_352,
        din1 => iy_read_reg_981,
        ce => ap_const_logic_1,
        dout => grp_fu_741_p2);

    conv_layer_mul_32eOg_U15 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => phi_mul3_reg_364,
        din1 => k_read_reg_962,
        ce => ap_const_logic_1,
        dout => grp_fu_779_p2);

    conv_layer_mul_32eOg_U16 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_y1_reg_388,
        din1 => ix_read_reg_987,
        ce => ap_const_logic_1,
        dout => grp_fu_810_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1) and (ap_block_state17_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_logic_1 = mem_ARREADY)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                    if ((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_AWREADY)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                    if ((ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_WREADY)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    b_s_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_10_fu_596_p2 = ap_const_lv1_0))) then 
                b_s_reg_203 <= b_1_reg_1104;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                b_s_reg_203 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_d_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_36_fu_805_p2))) then 
                i_d_reg_341 <= i_d_1_reg_1227;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_d_reg_341 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_x1_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_x1_reg_423 <= i_x_1_reg_1290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_x1_reg_423 <= i_x_reg_319;
            end if; 
        end if;
    end process;

    i_x_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (mem_BVALID = ap_const_logic_1))) then 
                i_x_reg_319 <= next_mul6_reg_1191;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_17_fu_671_p2))) then 
                i_x_reg_319 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_y1_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_40_fu_823_p2))) then 
                i_y1_reg_388 <= i_y_1_fu_906_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_y1_reg_388 <= i_y_reg_284;
            end if; 
        end if;
    end process;

    i_y_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (tmp_20_fu_700_p2 = ap_const_lv1_0))) then 
                i_y_reg_284 <= next_mul8_reg_1168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_y_reg_284 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    iix_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                iix_reg_433 <= iix_1_reg_1273;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                iix_reg_433 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    o_d_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_17_fu_671_p2 = ap_const_lv1_0))) then 
                o_d_reg_238 <= o_d_1_reg_1132;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                o_d_reg_238 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_x_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (mem_BVALID = ap_const_logic_1))) then 
                o_x_reg_307 <= o_x_1_reg_1199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_17_fu_671_p2))) then 
                o_x_reg_307 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_y_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (tmp_20_fu_700_p2 = ap_const_lv1_0))) then 
                o_y_reg_273 <= o_y_1_reg_1176;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                o_y_reg_273 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_36_fu_805_p2))) then 
                phi_mul1_reg_352 <= next_mul2_reg_1219;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                phi_mul1_reg_352 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_10_fu_596_p2 = ap_const_lv1_0))) then 
                phi_mul2_reg_214 <= next_mul3_reg_1096;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul2_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_36_fu_805_p2))) then 
                phi_mul3_reg_364 <= next_mul4_reg_1214;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                phi_mul3_reg_364 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_10_fu_596_p2 = ap_const_lv1_0))) then 
                phi_mul4_reg_226 <= next_mul1_reg_1091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul4_reg_226 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul6_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_17_fu_671_p2 = ap_const_lv1_0))) then 
                phi_mul6_reg_249 <= next_mul7_reg_1124;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul6_reg_249 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_17_fu_671_p2 = ap_const_lv1_0))) then 
                phi_mul8_reg_261 <= next_mul5_reg_1119;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul8_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul9_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (tmp_20_fu_700_p2 = ap_const_lv1_0))) then 
                phi_mul9_reg_296 <= next_mul9_reg_1163;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                phi_mul9_reg_296 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_40_fu_823_p2))) then 
                phi_mul_reg_399 <= next_mul_reg_1252;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                phi_mul_reg_399 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_23_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_36_fu_805_p2))) then 
                tmp_23_reg_331 <= tmp_35_reg_376;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                tmp_23_reg_331 <= output_element_reg_1204;
            end if; 
        end if;
    end process;

    tmp_35_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_40_fu_823_p2))) then 
                tmp_35_reg_376 <= tmp_39_reg_411;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                tmp_35_reg_376 <= tmp_23_reg_331;
            end if; 
        end if;
    end process;

    tmp_39_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                tmp_39_reg_411 <= grp_fu_444_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                tmp_39_reg_411 <= tmp_35_reg_376;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                b_1_reg_1104 <= b_1_fu_558_p2;
                next_mul1_reg_1091 <= next_mul1_fu_539_p2;
                next_mul3_reg_1096 <= next_mul3_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                b_read_reg_1025 <= b;
                id_read_reg_994 <= id;
                ix_read_reg_987 <= ix;
                iy_read_reg_981 <= iy;
                k_read_reg_962 <= k;
                od_read_reg_1017 <= od;
                ox_read_reg_1009 <= ox;
                oy_read_reg_1002 <= oy;
                s_read_reg_975 <= s;
                tmp_4_reg_1035 <= output_offset(31 downto 2);
                tmp_6_reg_1030 <= input_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_d_1_reg_1227 <= i_d_1_fu_735_p2;
                next_mul2_reg_1219 <= next_mul2_fu_721_p2;
                next_mul4_reg_1214 <= next_mul4_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_40_fu_823_p2))) then
                i_x_1_reg_1290 <= i_x_1_fu_900_p2;
                mem_addr_2_reg_1278 <= tmp_42_fu_856_p2;
                mem_addr_3_reg_1284 <= tmp_43_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                iix_1_reg_1273 <= iix_1_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_24_fu_730_p2 = ap_const_lv1_0))) then
                mem_addr_1_reg_1232 <= tmp_34_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (mem_RVALID = ap_const_logic_1))) then
                mem_addr_2_read_reg_1300 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (mem_RVALID = ap_const_logic_1))) then
                mem_addr_3_read_reg_1305 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_10_fu_596_p2))) then
                mem_addr_reg_1137 <= tmp_12_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                next_mul5_reg_1119 <= next_mul5_fu_582_p2;
                next_mul7_reg_1124 <= next_mul7_fu_587_p2;
                o_d_1_reg_1132 <= o_d_1_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0))) then
                next_mul6_reg_1191 <= next_mul6_fu_691_p2;
                o_x_1_reg_1199 <= o_x_1_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                next_mul8_reg_1168 <= next_mul8_fu_662_p2;
                next_mul9_reg_1163 <= next_mul9_fu_657_p2;
                o_y_1_reg_1176 <= o_y_1_fu_676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                next_mul_reg_1252 <= next_mul_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                num_weights_reg_1050 <= grp_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (mem_RVALID = ap_const_logic_1))) then
                output_element_reg_1204 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp16_cast_reg_1247 <= tmp16_cast_fu_796_p1;
                tmp_40_cast_reg_1242 <= tmp_40_cast_fu_787_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_reg_1040 <= grp_fu_479_p2;
                tmp2_reg_1045 <= grp_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp3_reg_1071 <= grp_fu_491_p2;
                tmp4_reg_1086 <= tmp4_fu_533_p2;
                tmp5_reg_1076 <= grp_fu_495_p2;
                tmp8_reg_1081 <= grp_fu_499_p2;
                    tmp_3_reg_1055(61 downto 0) <= tmp_3_fu_506_p1(61 downto 0);
                tmp_4_cast_reg_1061 <= tmp_4_cast_fu_510_p1;
                    tmp_7_reg_1066(61 downto 0) <= tmp_7_fu_519_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp6_reg_1153 <= tmp6_fu_647_p2;
                tmp9_reg_1158 <= tmp9_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_11_cast_reg_1109 <= tmp_11_cast_fu_574_p1;
                tmp_15_cast_reg_1114 <= tmp_15_cast_fu_578_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_13_reg_1143 <= grp_fu_631_p2;
                tmp_15_reg_1148 <= grp_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_17_fu_671_p2))) then
                tmp_19_reg_1181 <= tmp_19_fu_682_p2;
                tmp_30_cast_reg_1186 <= tmp_30_cast_fu_687_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_22_reg_1209 <= tmp_22_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_26_reg_1237 <= grp_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                tmp_33_reg_1320 <= tmp_33_fu_954_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_44_reg_1310 <= grp_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                tmp_51_cast_reg_1260 <= tmp_51_cast_fu_815_p1;
                tmp_53_cast_reg_1265 <= tmp_53_cast_fu_819_p1;
            end if;
        end if;
    end process;
    tmp_3_reg_1055(63 downto 62) <= "00";
    tmp_7_reg_1066(63 downto 62) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, tmp_20_fu_700_p2, ap_CS_fsm_state24, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state63, mem_RVALID, mem_BVALID, ap_CS_fsm_state9, ap_CS_fsm_state12, tmp_10_fu_596_p2, ap_CS_fsm_state16, tmp_17_fu_671_p2, ap_sig_ioackin_mem_ARREADY, ap_block_state17_io, ap_CS_fsm_state26, tmp_24_fu_730_p2, ap_CS_fsm_state30, ap_CS_fsm_state33, tmp_40_fu_823_p2, ap_sig_ioackin_mem_AWREADY, tmp_36_fu_805_p2, ap_sig_ioackin_mem_WREADY, tmp_8_fu_553_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_8_fu_553_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_10_fu_596_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_17_fu_671_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_io = ap_const_boolean_0) and (tmp_20_fu_700_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1) and (ap_block_state17_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_24_fu_730_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = tmp_36_fu_805_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = tmp_40_fu_823_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (mem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state17_io_assign_proc : process(tmp_20_fu_700_p2, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state17_io <= ((tmp_20_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9, tmp_8_fu_553_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_8_fu_553_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_8_fu_553_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_8_fu_553_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_1_fu_558_p2 <= std_logic_vector(unsigned(b_s_reg_203) + unsigned(ap_const_lv31_1));
    b_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_reg_203),32));

    grp_fu_453_ce_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state26, ap_sig_ioackin_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)))) then 
            grp_fu_453_ce <= ap_const_logic_1;
        else 
            grp_fu_453_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_d_1_fu_735_p2 <= std_logic_vector(unsigned(i_d_reg_341) + unsigned(ap_const_lv31_1));
    i_d_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_d_reg_341),32));
    i_x_1_fu_900_p2 <= std_logic_vector(unsigned(i_x1_reg_423) + unsigned(ap_const_lv32_1));
    i_y_1_fu_906_p2 <= std_logic_vector(signed(i_y1_reg_388) + signed(ap_const_lv32_1));
    iix_1_fu_828_p2 <= std_logic_vector(unsigned(iix_reg_433) + unsigned(ap_const_lv32_1));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state17, tmp_20_fu_700_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, mem_addr_reg_1137, mem_addr_2_reg_1278, mem_addr_3_reg_1284, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                mem_ARADDR <= mem_addr_3_reg_1284;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                mem_ARADDR <= mem_addr_2_reg_1278;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1))) then 
                mem_ARADDR <= mem_addr_reg_1137;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state17, tmp_20_fu_700_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state57, ap_reg_ioackin_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state63, mem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) and (mem_BVALID = ap_const_logic_1))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state41, ap_CS_fsm_state42, mem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (mem_RVALID = ap_const_logic_1)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state58, ap_reg_ioackin_mem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state17, tmp_20_fu_700_p2, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_20_fu_700_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state24, ap_CS_fsm_state41, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    next_mul1_fu_539_p2 <= std_logic_vector(signed(phi_mul4_reg_226) + signed(oy_read_reg_1002));
    next_mul2_fu_721_p2 <= std_logic_vector(signed(phi_mul1_reg_352) + signed(ix_read_reg_987));
    next_mul3_fu_544_p2 <= std_logic_vector(signed(phi_mul2_reg_214) + signed(iy_read_reg_981));
    next_mul4_fu_716_p2 <= std_logic_vector(signed(phi_mul3_reg_364) + signed(k_read_reg_962));
    next_mul5_fu_582_p2 <= std_logic_vector(signed(phi_mul8_reg_261) + signed(oy_read_reg_1002));
    next_mul6_fu_691_p2 <= std_logic_vector(unsigned(i_x_reg_319) + unsigned(s_read_reg_975));
    next_mul7_fu_587_p2 <= std_logic_vector(signed(phi_mul6_reg_249) + signed(k_read_reg_962));
    next_mul8_fu_662_p2 <= std_logic_vector(unsigned(i_y_reg_284) + unsigned(s_read_reg_975));
    next_mul9_fu_657_p2 <= std_logic_vector(unsigned(phi_mul9_reg_296) + unsigned(ox_read_reg_1009));
    next_mul_fu_800_p2 <= std_logic_vector(unsigned(phi_mul_reg_399) + unsigned(k_read_reg_962));
    notlhs_fu_930_p2 <= "0" when (tmp_28_fu_916_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_936_p2 <= "1" when (tmp_29_fu_926_p1 = ap_const_lv23_0) else "0";
    o_d_1_fu_601_p2 <= std_logic_vector(unsigned(o_d_reg_238) + unsigned(ap_const_lv31_1));
    o_d_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_reg_238),32));
    o_x_1_fu_705_p2 <= std_logic_vector(unsigned(o_x_reg_307) + unsigned(ap_const_lv31_1));
    o_x_cast_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_reg_307),32));
    o_y_1_fu_676_p2 <= std_logic_vector(unsigned(o_y_reg_273) + unsigned(ap_const_lv31_1));
    o_y_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_reg_273),32));
    tmp10_fu_791_p2 <= std_logic_vector(signed(tmp_11_cast_reg_1109) + signed(tmp_37_cast_fu_784_p1));
        tmp14_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_523_p2),64));

        tmp15_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp15_fu_847_p2),64));

    tmp15_fu_847_p2 <= std_logic_vector(signed(tmp17_cast_fu_843_p1) + signed(tmp16_cast_reg_1247));
        tmp16_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_fu_791_p2),34));

        tmp17_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_fu_838_p2),34));

    tmp17_fu_838_p2 <= std_logic_vector(signed(tmp_51_cast_reg_1260) + signed(tmp_56_cast_fu_834_p1));
        tmp19_cast_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_fu_880_p2),64));

    tmp19_fu_880_p2 <= std_logic_vector(signed(tmp20_cast_fu_876_p1) + signed(tmp_40_cast_reg_1242));
        tmp20_cast_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp20_fu_871_p2),34));

    tmp20_fu_871_p2 <= std_logic_vector(signed(tmp_53_cast_reg_1265) + signed(tmp_63_cast_fu_867_p1));
    tmp21_fu_750_p2 <= std_logic_vector(signed(tmp_15_cast_reg_1114) + signed(tmp_43_cast_fu_746_p1));
        tmp22_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp22_fu_759_p2),64));

    tmp22_fu_759_p2 <= std_logic_vector(signed(tmp23_cast_fu_755_p1) + signed(tmp_30_cast_reg_1186));
        tmp23_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp21_fu_750_p2),34));

    tmp4_fu_533_p2 <= std_logic_vector(signed(tmp14_cast_fu_529_p1) + signed(tmp_3_fu_506_p1));
    tmp6_fu_647_p2 <= std_logic_vector(unsigned(tmp_3_reg_1055) + unsigned(tmp_14_fu_641_p1));
        tmp7_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_611_p2),64));

    tmp7_fu_611_p2 <= std_logic_vector(signed(tmp_4_cast_reg_1061) + signed(tmp_17_cast_fu_607_p1));
    tmp9_fu_652_p2 <= std_logic_vector(unsigned(tmp_7_reg_1066) + unsigned(tmp_16_fu_644_p1));
    tmp_10_fu_596_p2 <= "1" when (signed(o_d_cast_fu_592_p1) < signed(od_read_reg_1017)) else "0";
        tmp_11_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_564_p2),33));

    tmp_12_fu_620_p2 <= std_logic_vector(signed(tmp7_cast_fu_616_p1) + signed(tmp_3_reg_1055));
        tmp_14_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1143),64));

        tmp_15_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_569_p2),33));

        tmp_16_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_1148),64));

    tmp_17_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_reg_238),33));
    tmp_17_fu_671_p2 <= "1" when (signed(o_y_cast_fu_667_p1) < signed(oy_read_reg_1002)) else "0";
    tmp_19_fu_682_p2 <= std_logic_vector(unsigned(i_y_reg_284) + unsigned(k_read_reg_962));
    tmp_20_fu_700_p2 <= "1" when (signed(o_x_cast_fu_696_p1) < signed(ox_read_reg_1009)) else "0";
    tmp_22_fu_711_p2 <= std_logic_vector(unsigned(i_x_reg_319) + unsigned(k_read_reg_962));
    tmp_24_fu_730_p2 <= "1" when (signed(i_d_cast_fu_726_p1) < signed(id_read_reg_994)) else "0";
    tmp_28_fu_916_p4 <= tmp_33_to_int_fu_912_p1(30 downto 23);
    tmp_29_fu_926_p1 <= tmp_33_to_int_fu_912_p1(23 - 1 downto 0);
        tmp_30_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_mul9_reg_296),34));

    tmp_30_fu_942_p2 <= (notrhs_fu_936_p2 or notlhs_fu_930_p2);
    tmp_32_fu_948_p2 <= (tmp_30_fu_942_p2 and grp_fu_453_p2);
    tmp_33_fu_954_p3 <= 
        tmp_23_reg_331 when (tmp_32_fu_948_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_33_to_int_fu_912_p1 <= tmp_23_reg_331;
    tmp_34_fu_768_p2 <= std_logic_vector(signed(tmp22_cast_fu_764_p1) + signed(tmp9_reg_1158));
    tmp_36_fu_805_p2 <= "1" when (signed(i_y1_reg_388) < signed(tmp_19_reg_1181)) else "0";
        tmp_37_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_reg_1237),33));

    tmp_3_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_503_p1),64));
        tmp_40_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_779_p2),34));

    tmp_40_fu_823_p2 <= "1" when (signed(i_x1_reg_423) < signed(tmp_22_reg_1209)) else "0";
    tmp_42_fu_856_p2 <= std_logic_vector(signed(tmp15_cast_fu_852_p1) + signed(tmp4_reg_1086));
    tmp_43_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_reg_307),33));
    tmp_43_fu_889_p2 <= std_logic_vector(signed(tmp19_cast_fu_885_p1) + signed(tmp6_reg_1153));
        tmp_4_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_weights_reg_1050),33));

        tmp_51_cast_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_810_p2),33));

        tmp_53_cast_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_mul_reg_399),33));

        tmp_56_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_x1_reg_423),33));

        tmp_5_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(od_read_reg_1017),33));

        tmp_5_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1035),62));

        tmp_63_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(iix_reg_433),33));

    tmp_7_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_516_p1),64));
    tmp_8_fu_553_p2 <= "1" when (signed(b_cast_fu_549_p1) < signed(b_read_reg_1025)) else "0";
    tmp_fu_523_p2 <= std_logic_vector(signed(tmp_5_cast_fu_513_p1) + signed(tmp_4_cast_fu_510_p1));
        tmp_s_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_1030),62));

end behav;

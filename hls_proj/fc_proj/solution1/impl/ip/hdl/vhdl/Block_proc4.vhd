-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    num_outputs : IN STD_LOGIC_VECTOR (31 downto 0);
    num_inputs : IN STD_LOGIC_VECTOR (31 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_relu : IN STD_LOGIC_VECTOR (31 downto 0);
    output_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    batch_size : IN STD_LOGIC_VECTOR (31 downto 0);
    num_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_outputs_out_full_n : IN STD_LOGIC;
    num_outputs_out_write : OUT STD_LOGIC;
    num_inputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    num_inputs_out_full_n : IN STD_LOGIC;
    num_inputs_out_write : OUT STD_LOGIC;
    batch_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    batch_size_out_full_n : IN STD_LOGIC;
    batch_size_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Block_proc4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal num_outputs_out_blk_n : STD_LOGIC;
    signal num_inputs_out_blk_n : STD_LOGIC;
    signal batch_size_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_fu_110_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_32_i_i_fu_120_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_3_out_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_i_i_fu_137_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_35_i_i_fu_147_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_2_out_fu_106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_out_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_out_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_out_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_out_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component fc_layer_mul_32s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc_layer_mul_32s_bkb_U1 : component fc_layer_mul_32s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => num_inputs,
        din1 => num_outputs,
        ce => grp_fu_100_ce,
        dout => grp_fu_100_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_0_preg <= tmp_2_out_fu_106_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
                ap_return_1_preg(8) <= '0';
                ap_return_1_preg(9) <= '0';
                ap_return_1_preg(10) <= '0';
                ap_return_1_preg(11) <= '0';
                ap_return_1_preg(12) <= '0';
                ap_return_1_preg(13) <= '0';
                ap_return_1_preg(14) <= '0';
                ap_return_1_preg(15) <= '0';
                ap_return_1_preg(16) <= '0';
                ap_return_1_preg(17) <= '0';
                ap_return_1_preg(18) <= '0';
                ap_return_1_preg(19) <= '0';
                ap_return_1_preg(20) <= '0';
                ap_return_1_preg(21) <= '0';
                ap_return_1_preg(22) <= '0';
                ap_return_1_preg(23) <= '0';
                ap_return_1_preg(24) <= '0';
                ap_return_1_preg(25) <= '0';
                ap_return_1_preg(26) <= '0';
                ap_return_1_preg(27) <= '0';
                ap_return_1_preg(28) <= '0';
                ap_return_1_preg(29) <= '0';
                ap_return_1_preg(30) <= '0';
                ap_return_1_preg(31) <= '0';
                ap_return_1_preg(32) <= '0';
                ap_return_1_preg(33) <= '0';
                ap_return_1_preg(34) <= '0';
                ap_return_1_preg(35) <= '0';
                ap_return_1_preg(36) <= '0';
                ap_return_1_preg(37) <= '0';
                ap_return_1_preg(38) <= '0';
                ap_return_1_preg(39) <= '0';
                ap_return_1_preg(40) <= '0';
                ap_return_1_preg(41) <= '0';
                ap_return_1_preg(42) <= '0';
                ap_return_1_preg(43) <= '0';
                ap_return_1_preg(44) <= '0';
                ap_return_1_preg(45) <= '0';
                ap_return_1_preg(46) <= '0';
                ap_return_1_preg(47) <= '0';
                ap_return_1_preg(48) <= '0';
                ap_return_1_preg(49) <= '0';
                ap_return_1_preg(50) <= '0';
                ap_return_1_preg(51) <= '0';
                ap_return_1_preg(52) <= '0';
                ap_return_1_preg(53) <= '0';
                ap_return_1_preg(54) <= '0';
                ap_return_1_preg(55) <= '0';
                ap_return_1_preg(56) <= '0';
                ap_return_1_preg(57) <= '0';
                ap_return_1_preg(58) <= '0';
                ap_return_1_preg(59) <= '0';
                ap_return_1_preg(60) <= '0';
                ap_return_1_preg(61) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                                        ap_return_1_preg(61 downto 0) <= tmp_1_out_fu_124_p1(61 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_2_preg <= tmp_3_out_fu_128_p1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_return_3_preg <= tmp_4_out_fu_131_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg(0) <= '0';
                ap_return_4_preg(1) <= '0';
                ap_return_4_preg(2) <= '0';
                ap_return_4_preg(3) <= '0';
                ap_return_4_preg(4) <= '0';
                ap_return_4_preg(5) <= '0';
                ap_return_4_preg(6) <= '0';
                ap_return_4_preg(7) <= '0';
                ap_return_4_preg(8) <= '0';
                ap_return_4_preg(9) <= '0';
                ap_return_4_preg(10) <= '0';
                ap_return_4_preg(11) <= '0';
                ap_return_4_preg(12) <= '0';
                ap_return_4_preg(13) <= '0';
                ap_return_4_preg(14) <= '0';
                ap_return_4_preg(15) <= '0';
                ap_return_4_preg(16) <= '0';
                ap_return_4_preg(17) <= '0';
                ap_return_4_preg(18) <= '0';
                ap_return_4_preg(19) <= '0';
                ap_return_4_preg(20) <= '0';
                ap_return_4_preg(21) <= '0';
                ap_return_4_preg(22) <= '0';
                ap_return_4_preg(23) <= '0';
                ap_return_4_preg(24) <= '0';
                ap_return_4_preg(25) <= '0';
                ap_return_4_preg(26) <= '0';
                ap_return_4_preg(27) <= '0';
                ap_return_4_preg(28) <= '0';
                ap_return_4_preg(29) <= '0';
                ap_return_4_preg(30) <= '0';
                ap_return_4_preg(31) <= '0';
                ap_return_4_preg(32) <= '0';
                ap_return_4_preg(33) <= '0';
                ap_return_4_preg(34) <= '0';
                ap_return_4_preg(35) <= '0';
                ap_return_4_preg(36) <= '0';
                ap_return_4_preg(37) <= '0';
                ap_return_4_preg(38) <= '0';
                ap_return_4_preg(39) <= '0';
                ap_return_4_preg(40) <= '0';
                ap_return_4_preg(41) <= '0';
                ap_return_4_preg(42) <= '0';
                ap_return_4_preg(43) <= '0';
                ap_return_4_preg(44) <= '0';
                ap_return_4_preg(45) <= '0';
                ap_return_4_preg(46) <= '0';
                ap_return_4_preg(47) <= '0';
                ap_return_4_preg(48) <= '0';
                ap_return_4_preg(49) <= '0';
                ap_return_4_preg(50) <= '0';
                ap_return_4_preg(51) <= '0';
                ap_return_4_preg(52) <= '0';
                ap_return_4_preg(53) <= '0';
                ap_return_4_preg(54) <= '0';
                ap_return_4_preg(55) <= '0';
                ap_return_4_preg(56) <= '0';
                ap_return_4_preg(57) <= '0';
                ap_return_4_preg(58) <= '0';
                ap_return_4_preg(59) <= '0';
                ap_return_4_preg(60) <= '0';
                ap_return_4_preg(61) <= '0';
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                                        ap_return_4_preg(61 downto 0) <= tmp_6_out_fu_151_p1(61 downto 0);
                end if; 
            end if;
        end if;
    end process;

    ap_return_1_preg(63 downto 62) <= "00";
    ap_return_4_preg(63 downto 62) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state3, tmp_2_out_fu_106_p1, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_0 <= tmp_2_out_fu_106_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state3, tmp_1_out_fu_124_p1, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_1 <= tmp_1_out_fu_124_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state3, tmp_3_out_fu_128_p1, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_2 <= tmp_3_out_fu_128_p1;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state3, tmp_4_out_fu_131_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_3 <= tmp_4_out_fu_131_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state3, tmp_6_out_fu_151_p1, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_return_4 <= tmp_6_out_fu_151_p1;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    batch_size_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            batch_size_out_blk_n <= batch_size_out_full_n;
        else 
            batch_size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    batch_size_out_din <= batch_size;

    batch_size_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n))))) then 
            batch_size_out_write <= ap_const_logic_1;
        else 
            batch_size_out_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_100_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n)))) then 
            grp_fu_100_ce <= ap_const_logic_0;
        else 
            grp_fu_100_ce <= ap_const_logic_1;
        end if; 
    end process;


    num_inputs_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_inputs_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            num_inputs_out_blk_n <= num_inputs_out_full_n;
        else 
            num_inputs_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    num_inputs_out_din <= num_inputs;

    num_inputs_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n))))) then 
            num_inputs_out_write <= ap_const_logic_1;
        else 
            num_inputs_out_write <= ap_const_logic_0;
        end if; 
    end process;


    num_outputs_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            num_outputs_out_blk_n <= num_outputs_out_full_n;
        else 
            num_outputs_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    num_outputs_out_din <= num_outputs;

    num_outputs_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_out_full_n, num_inputs_out_full_n, batch_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = num_outputs_out_full_n) or (ap_const_logic_0 = num_inputs_out_full_n) or (ap_const_logic_0 = batch_size_out_full_n))))) then 
            num_outputs_out_write <= ap_const_logic_1;
        else 
            num_outputs_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_out_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_i_i_fu_120_p1),64));
        tmp_2_out_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_100_p2),64));

        tmp_32_i_i_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_i_i_fu_110_p4),62));

    tmp_34_i_i_fu_137_p4 <= output_offset(31 downto 2);
        tmp_35_i_i_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_i_i_fu_137_p4),62));

    tmp_3_out_fu_128_p0 <= num_outputs;
        tmp_3_out_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_out_fu_128_p0),64));

    tmp_4_out_fu_131_p2 <= "1" when (enable_relu = ap_const_lv32_0) else "0";
    tmp_5_i_i_fu_110_p4 <= input_offset(31 downto 2);
    tmp_6_out_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_i_i_fu_147_p1),64));
end behav;

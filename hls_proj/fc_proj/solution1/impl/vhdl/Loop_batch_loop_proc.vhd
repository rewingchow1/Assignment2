-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_batch_loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    batch_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    batch_size_empty_n : IN STD_LOGIC;
    batch_size_read : OUT STD_LOGIC;
    num_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    num_outputs_empty_n : IN STD_LOGIC;
    num_outputs_read : OUT STD_LOGIC;
    num_inputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    num_inputs_empty_n : IN STD_LOGIC;
    num_inputs_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Loop_batch_loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal batch_size_blk_n : STD_LOGIC;
    signal num_outputs_blk_n : STD_LOGIC;
    signal num_inputs_blk_n : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_19_i_i_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_18_i_i_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i_reg_207 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal batch_size_read_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal num_outputs_read_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs_read_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp5_fu_260_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_reg_533 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_538 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal o_i_i_mid2_fu_286_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_i_i_mid2_reg_551 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_cast_mid2_s_fu_300_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_i_i_cast_mid2_s_reg_557 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_i_i_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_i_i_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_i_cast_mid2_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_cast_mid2_1_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_mem_ARREADY : STD_LOGIC;
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_i_mid2_v_v_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_11_i_i_mid2_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_i_i_mid2_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_element_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_cast_mid2_fu_356_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_i_i_cast_mid2_reg_600 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_17_i_i_cast_fu_360_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_i_i_cast_reg_605 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_19_i_i_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_19_i_i_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_19_i_i_reg_610 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_373_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_614 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_1_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_2_reg_625 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_element_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state23_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011001 : BOOLEAN;
    signal weight_element_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_i_i_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state20_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state38_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal grp_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_30_i_i_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_i_i_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_mem_AWREADY : STD_LOGIC;
    signal o_fu_478_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state46 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state15 : STD_LOGIC;
    signal ap_block_pp0_stage8_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal indvar_flatten_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_i_i_reg_174 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_i_i_reg_185 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_i_i_phi_fu_211_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i_i_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_i_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_i_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_mem_ARREADY : STD_LOGIC := '0';
    signal ap_block_state16_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00001001 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00001001 : BOOLEAN;
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_mem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_cast_i_i_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_i_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fu_294_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_i_i_mid2_v_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_344_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_i_i_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_i_i_cast_fu_379_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp7_fu_383_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp7_cast_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp6_fu_392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp8_fu_408_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp8_cast_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_i_i_to_int_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_442_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_218_ce : STD_LOGIC;
    signal ap_block_state21_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal ap_block_state22_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state18_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state19_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state37_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal grp_fu_223_ce : STD_LOGIC;
    signal grp_fu_227_ce : STD_LOGIC;
    signal grp_fu_331_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_344_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_254_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_254_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_331_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_477 : BOOLEAN;
    signal ap_condition_499 : BOOLEAN;

    component fc_layer_fadd_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fmul_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fcmp_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_layer_mul_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fc_layer_mul_32s_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc_layer_fadd_32ncud_U11 : component fc_layer_fadd_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_i_i_reg_196,
        din1 => tmp_27_i_i_reg_641,
        ce => grp_fu_218_ce,
        dout => grp_fu_218_p2);

    fc_layer_fmul_32ndEe_U12 : component fc_layer_fmul_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_element_reg_631,
        din1 => weight_element_reg_636,
        ce => grp_fu_223_ce,
        dout => grp_fu_223_p2);

    fc_layer_fcmp_32neOg_U13 : component fc_layer_fcmp_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_i_i_reg_196,
        din1 => ap_const_lv32_0,
        ce => grp_fu_227_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_227_p2);

    fc_layer_mul_32nsfYi_U14 : component fc_layer_mul_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    fc_layer_mul_32s_g8j_U15 : component fc_layer_mul_32s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => num_outputs_read_reg_488,
        din1 => grp_fu_331_p1,
        ce => grp_fu_331_ce,
        dout => grp_fu_331_p2);

    fc_layer_mul_32s_g8j_U16 : component fc_layer_mul_32s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => num_inputs_read_reg_495,
        din1 => grp_fu_344_p1,
        ce => grp_fu_344_ce,
        dout => grp_fu_344_p2);

    fc_layer_mul_32s_g8j_U17 : component fc_layer_mul_32s_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => num_inputs_read_reg_495,
        din1 => grp_fu_351_p1,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_flatten_fu_275_p2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state15)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state15 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = m_axi_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = m_axi_mem_ARREADY) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = m_axi_mem_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_mem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_1 = m_axi_mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_const_logic_1 = m_axi_mem_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_mem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_m_axi_mem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_m_axi_mem_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_mem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_logic_1 = m_axi_mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_1 = m_axi_mem_WREADY)))) then 
                    ap_reg_ioackin_m_axi_mem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    b_i_i_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID)))))) then 
                b_i_i_reg_174 <= tmp_9_i_i_cast_mid2_s_reg_557;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                b_i_i_reg_174 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                i_i_i_reg_207 <= i_reg_614;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i_i_reg_207 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID)))))) then 
                indvar_flatten_reg_163 <= indvar_flatten_next_reg_546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_163 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    o_i_i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID)))))) then 
                o_i_i_reg_185 <= o_fu_478_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                o_i_i_reg_185 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tmp_18_i_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_19_i_i_reg_610))) then 
                tmp_18_i_i_reg_196 <= grp_fu_218_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tmp_18_i_i_reg_196 <= output_element_reg_595;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_19_i_i_reg_610 <= tmp_19_i_i_reg_610;
                ap_reg_pp0_iter2_tmp_19_i_i_reg_610 <= ap_reg_pp0_iter1_tmp_19_i_i_reg_610;
                tmp_19_i_i_reg_610 <= tmp_19_i_i_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n))))) then
                batch_size_read_reg_483 <= batch_size_dout;
                num_inputs_read_reg_495 <= num_inputs_dout;
                num_outputs_read_reg_488 <= num_outputs_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bound_reg_538 <= grp_fu_254_p2;
                tmp5_reg_533 <= tmp5_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                i_reg_614 <= i_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvar_flatten_next_reg_546 <= indvar_flatten_next_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                input_element_reg_631 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_19_i_i_fu_368_p2))) then
                mem_addr_1_reg_619 <= tmp_24_i_i_fu_397_p2;
                mem_addr_2_reg_625 <= tmp_26_i_i_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_flatten_fu_275_p2))) then
                mem_addr_reg_568 <= tmp_15_i_i_fu_317_p2;
                o_i_i_mid2_reg_551 <= o_i_i_mid2_fu_286_p3;
                    tmp_13_i_i_reg_563(30 downto 0) <= tmp_13_i_i_fu_308_p1(30 downto 0);
                tmp_9_i_i_cast_mid2_s_reg_557 <= tmp_9_i_i_cast_mid2_s_fu_300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_mem_RVALID = ap_const_logic_1))) then
                output_element_reg_595 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((p_read1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then
                reg_243 <= grp_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_11_i_i_mid2_reg_585 <= tmp_11_i_i_mid2_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_11_i_i_mid2_v_v_reg_580 <= grp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_17_i_i_cast_reg_605 <= tmp_17_i_i_cast_fu_360_p1;
                tmp_9_i_i_cast_mid2_reg_600 <= tmp_9_i_i_cast_mid2_fu_356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_19_i_i_reg_610))) then
                tmp_27_i_i_reg_641 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1))) then
                tmp_30_i_i_reg_651 <= tmp_30_i_i_fu_470_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_mem_ARREADY = ap_const_logic_1))) then
                    tmp_9_i_i_cast_mid2_1_reg_574(30 downto 0) <= tmp_9_i_i_cast_mid2_1_fu_328_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                weight_element_reg_636 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    tmp_13_i_i_reg_563(63 downto 31) <= "000000000000000000000000000000000";
    tmp_9_i_i_cast_mid2_1_reg_574(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, batch_size_empty_n, num_outputs_empty_n, num_inputs_empty_n, m_axi_mem_RVALID, m_axi_mem_BVALID, p_read1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state46, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state39, ap_CS_fsm_state5, exitcond_flatten_fu_275_p2, ap_sig_ioackin_m_axi_mem_ARREADY, tmp_19_i_i_fu_368_p2, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter2, ap_sig_ioackin_m_axi_mem_AWREADY, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage8_flag00011011, ap_block_pp0_stage5_flag00011011, ap_sig_ioackin_m_axi_mem_WREADY, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage7_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_flatten_fu_275_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_19_i_i_fu_368_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_19_i_i_fu_368_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_state39 => 
                if (((p_read1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_m_axi_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_m_axi_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state39 <= ap_CS_fsm(23);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(24);
    ap_CS_fsm_state41 <= ap_CS_fsm(25);
    ap_CS_fsm_state46 <= ap_CS_fsm(30);
    ap_CS_fsm_state47 <= ap_CS_fsm(31);
    ap_CS_fsm_state48 <= ap_CS_fsm(32);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(m_axi_mem_RVALID, tmp_19_i_i_reg_610, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(m_axi_mem_RVALID, tmp_19_i_i_reg_610, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state16_io)
    begin
                ap_block_pp0_stage1_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state16_io));
    end process;


    ap_block_pp0_stage1_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state16_io)
    begin
                ap_block_pp0_stage1_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state16_io));
    end process;

        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state17_io)
    begin
                ap_block_pp0_stage2_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state17_io));
    end process;


    ap_block_pp0_stage2_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state17_io)
    begin
                ap_block_pp0_stage2_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state17_io));
    end process;

        ap_block_pp0_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_flag00011001_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610)
    begin
                ap_block_pp0_stage8_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;


    ap_block_pp0_stage8_flag00011011_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610)
    begin
                ap_block_pp0_stage8_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, batch_size_empty_n, num_outputs_empty_n, num_inputs_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n));
    end process;

        ap_block_state15_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(tmp_19_i_i_reg_610, ap_sig_ioackin_m_axi_mem_ARREADY)
    begin
                ap_block_state16_io <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_mem_ARREADY));
    end process;

        ap_block_state16_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(tmp_19_i_i_reg_610, ap_sig_ioackin_m_axi_mem_ARREADY)
    begin
                ap_block_state17_io <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_mem_ARREADY));
    end process;

        ap_block_state17_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp0_stage8_iter0_assign_proc : process(m_axi_mem_RVALID, tmp_19_i_i_reg_610)
    begin
                ap_block_state23_pp0_stage8_iter0 <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;


    ap_block_state24_pp0_stage0_iter1_assign_proc : process(m_axi_mem_RVALID, tmp_19_i_i_reg_610)
    begin
                ap_block_state24_pp0_stage0_iter1 <= ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_RVALID));
    end process;

        ap_block_state25_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state46_assign_proc : process(m_axi_mem_BVALID, p_read1)
    begin
                ap_block_state46 <= (((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID)));
    end process;


    ap_condition_477_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610, ap_block_pp0_stage1_flag00001001)
    begin
                ap_condition_477 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_499_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00001001)
    begin
                ap_condition_499 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter0_state15_assign_proc : process(tmp_19_i_i_fu_368_p2)
    begin
        if ((ap_const_lv1_0 = tmp_19_i_i_fu_368_p2)) then 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, exitcond_flatten_fu_275_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_flatten_fu_275_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_fu_275_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_flatten_fu_275_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_ARREADY_assign_proc : process(m_axi_mem_ARREADY, ap_reg_ioackin_m_axi_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_ARREADY)) then 
            ap_sig_ioackin_m_axi_mem_ARREADY <= m_axi_mem_ARREADY;
        else 
            ap_sig_ioackin_m_axi_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_AWREADY_assign_proc : process(m_axi_mem_AWREADY, ap_reg_ioackin_m_axi_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_AWREADY)) then 
            ap_sig_ioackin_m_axi_mem_AWREADY <= m_axi_mem_AWREADY;
        else 
            ap_sig_ioackin_m_axi_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_WREADY_assign_proc : process(m_axi_mem_WREADY, ap_reg_ioackin_m_axi_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_WREADY)) then 
            ap_sig_ioackin_m_axi_mem_WREADY <= m_axi_mem_WREADY;
        else 
            ap_sig_ioackin_m_axi_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_fu_294_p2 <= std_logic_vector(unsigned(b_i_i_reg_174) + unsigned(ap_const_lv31_1));

    batch_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_size_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            batch_size_blk_n <= batch_size_empty_n;
        else 
            batch_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    batch_size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_size_empty_n, num_outputs_empty_n, num_inputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n))))) then 
            batch_size_read <= ap_const_logic_1;
        else 
            batch_size_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_275_p2 <= "1" when (indvar_flatten_reg_163 = bound_reg_538) else "0";

    grp_fu_218_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage8_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage7_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_218_ce <= ap_const_logic_1;
        else 
            grp_fu_218_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_223_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_223_ce <= ap_const_logic_1;
        else 
            grp_fu_223_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_227_ce_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state39, ap_sig_ioackin_m_axi_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_sig_ioackin_m_axi_mem_AWREADY = ap_const_logic_1)))) then 
            grp_fu_227_ce <= ap_const_logic_1;
        else 
            grp_fu_227_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_233_p2 <= std_logic_vector(unsigned(tmp_11_i_i_mid2_reg_585) + unsigned(tmp_13_i_i_reg_563));
    grp_fu_254_p0 <= grp_fu_254_p00(32 - 1 downto 0);
    grp_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_outputs_read_reg_488),64));
    grp_fu_254_p1 <= grp_fu_254_p10(32 - 1 downto 0);
    grp_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_size_read_reg_483),64));

    grp_fu_331_ce_assign_proc : process(ap_CS_fsm_state6, ap_sig_ioackin_m_axi_mem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_mem_ARREADY = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_331_ce <= ap_const_logic_1;
        else 
            grp_fu_331_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p1 <= grp_fu_331_p10(31 - 1 downto 0);
    grp_fu_331_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_i_cast_mid2_s_reg_557),32));

    grp_fu_344_ce_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_344_ce <= ap_const_logic_1;
        else 
            grp_fu_344_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_344_p1 <= tmp_9_i_i_cast_mid2_1_reg_574(31 - 1 downto 0);

    grp_fu_351_ce_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_fu_351_ce <= ap_const_logic_1;
        else 
            grp_fu_351_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_351_p1 <= grp_fu_351_p10(31 - 1 downto 0);
    grp_fu_351_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_i_i_mid2_reg_551),32));
    i_cast_i_i_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_phi_fu_211_p4),32));
    i_fu_373_p2 <= std_logic_vector(unsigned(i_i_i_phi_fu_211_p4) + unsigned(ap_const_lv31_1));

    i_i_i_phi_fu_211_p4_assign_proc : process(tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, i_i_i_reg_207, i_reg_614)
    begin
        if (((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_i_i_phi_fu_211_p4 <= i_reg_614;
        else 
            i_i_i_phi_fu_211_p4 <= i_i_i_reg_207;
        end if; 
    end process;

    indvar_flatten_next_fu_280_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_163) + unsigned(ap_const_lv64_1));

    m_axi_mem_ARADDR_assign_proc : process(ap_CS_fsm_state6, mem_addr_reg_568, mem_addr_1_reg_619, mem_addr_2_reg_625, ap_reg_ioackin_m_axi_mem_ARREADY, ap_condition_477, ap_condition_499)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_ARREADY)) then
            if ((ap_condition_499 = ap_const_boolean_1)) then 
                m_axi_mem_ARADDR <= mem_addr_2_reg_625;
            elsif ((ap_condition_477 = ap_const_boolean_1)) then 
                m_axi_mem_ARADDR <= mem_addr_1_reg_619;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_mem_ARADDR <= mem_addr_reg_568;
            else 
                m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_1;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage2, ap_reg_ioackin_m_axi_mem_ARREADY, ap_block_pp0_stage1_flag00001001, ap_block_pp0_stage2_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_ARREADY) and (ap_block_pp0_stage1_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0)))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= reg_243;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_1;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;

    m_axi_mem_AWVALID_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state47, ap_reg_ioackin_m_axi_mem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_AWREADY)))) then 
            m_axi_mem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_BREADY_assign_proc : process(m_axi_mem_BVALID, p_read1, ap_CS_fsm_state46)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state46) and (p_read1 = ap_const_lv1_0) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID))))) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (p_read1 = ap_const_lv1_1) and not((((p_read1 = ap_const_lv1_0) and (ap_const_logic_0 = m_axi_mem_BVALID)) or ((p_read1 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_mem_BVALID))))))) then 
            m_axi_mem_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_RREADY_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state13, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001, ap_block_pp0_stage8_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_WDATA_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state48, tmp_18_i_i_reg_196, tmp_30_i_i_reg_651, ap_reg_ioackin_m_axi_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                m_axi_mem_WDATA <= tmp_18_i_i_reg_196;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                m_axi_mem_WDATA <= tmp_30_i_i_reg_651;
            else 
                m_axi_mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_F;
    m_axi_mem_WUSER <= ap_const_lv1_0;

    m_axi_mem_WVALID_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state48, ap_reg_ioackin_m_axi_mem_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_mem_WREADY)))) then 
            m_axi_mem_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00000000, tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0)))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state40, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, p_read1, ap_CS_fsm_state46)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state46) and (p_read1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (p_read1 = ap_const_lv1_1)))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state13, ap_enable_reg_pp0_iter0, tmp_19_i_i_reg_610, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_flag00000000, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00000000 = ap_const_boolean_0)) or ((tmp_19_i_i_reg_610 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state41, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    notlhs_fu_446_p2 <= "0" when (tmp_1_fu_432_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_452_p2 <= "1" when (tmp_2_fu_442_p1 = ap_const_lv23_0) else "0";

    num_inputs_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_inputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            num_inputs_blk_n <= num_inputs_empty_n;
        else 
            num_inputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_inputs_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_size_empty_n, num_outputs_empty_n, num_inputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n))))) then 
            num_inputs_read <= ap_const_logic_1;
        else 
            num_inputs_read <= ap_const_logic_0;
        end if; 
    end process;


    num_outputs_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, num_outputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            num_outputs_blk_n <= num_outputs_empty_n;
        else 
            num_outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    num_outputs_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, batch_size_empty_n, num_outputs_empty_n, num_inputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = batch_size_empty_n) or (ap_const_logic_0 = num_outputs_empty_n) or (ap_const_logic_0 = num_inputs_empty_n))))) then 
            num_outputs_read <= ap_const_logic_1;
        else 
            num_outputs_read <= ap_const_logic_0;
        end if; 
    end process;

    o_cast_i_i_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_i_i_reg_185),32));
    o_fu_478_p2 <= std_logic_vector(unsigned(o_i_i_mid2_reg_551) + unsigned(ap_const_lv31_1));
    o_i_i_mid2_fu_286_p3 <= 
        o_i_i_reg_185 when (tmp_12_i_i_fu_270_p2(0) = '1') else 
        ap_const_lv31_0;
    tmp5_fu_260_p2 <= std_logic_vector(unsigned(p_read3) + unsigned(p_read4));
    tmp6_fu_392_p2 <= std_logic_vector(signed(tmp7_cast_fu_388_p1) + signed(p_read2));
        tmp7_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_383_p2),64));

    tmp7_fu_383_p2 <= std_logic_vector(signed(tmp_9_i_i_cast_mid2_reg_600) + signed(tmp_20_i_i_cast_fu_379_p1));
        tmp8_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_408_p2),64));

    tmp8_fu_408_p2 <= std_logic_vector(signed(tmp_17_i_i_cast_reg_605) + signed(tmp_20_i_i_cast_fu_379_p1));
    tmp_11_i_i_mid2_fu_339_p2 <= std_logic_vector(signed(tmp_11_i_i_mid2_v_fu_336_p1) + signed(p_read));
        tmp_11_i_i_mid2_v_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_i_i_mid2_v_v_reg_580),64));

    tmp_12_i_i_fu_270_p2 <= "1" when (signed(o_cast_i_i_fu_266_p1) < signed(num_outputs_read_reg_488)) else "0";
    tmp_13_i_i_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_i_i_mid2_fu_286_p3),64));
    tmp_15_i_i_fu_317_p2 <= std_logic_vector(unsigned(tmp_fu_312_p2) + unsigned(p_read3));
        tmp_17_i_i_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_351_p2),33));

    tmp_18_i_i_to_int_fu_428_p1 <= tmp_18_i_i_reg_196;
    tmp_19_i_i_fu_368_p2 <= "1" when (signed(i_cast_i_i_fu_364_p1) < signed(num_inputs_read_reg_495)) else "0";
    tmp_1_fu_432_p4 <= tmp_18_i_i_to_int_fu_428_p1(30 downto 23);
    tmp_20_i_i_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_phi_fu_211_p4),33));
    tmp_24_i_i_fu_397_p2 <= std_logic_vector(unsigned(tmp6_fu_392_p2) + unsigned(tmp5_reg_533));
    tmp_26_i_i_fu_417_p2 <= std_logic_vector(signed(tmp8_cast_fu_413_p1) + signed(p_read3));
    tmp_2_fu_442_p1 <= tmp_18_i_i_to_int_fu_428_p1(23 - 1 downto 0);
    tmp_30_i_i_fu_470_p3 <= 
        tmp_18_i_i_reg_196 when (tmp_5_fu_464_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_3_fu_458_p2 <= (notrhs_fu_452_p2 or notlhs_fu_446_p2);
    tmp_5_fu_464_p2 <= (tmp_3_fu_458_p2 and grp_fu_227_p2);
    tmp_9_i_i_cast_mid2_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_i_cast_mid2_s_reg_557),32));
        tmp_9_i_i_cast_mid2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_344_p2),33));

    tmp_9_i_i_cast_mid2_s_fu_300_p3 <= 
        b_i_i_reg_174 when (tmp_12_i_i_fu_270_p2(0) = '1') else 
        b_fu_294_p2;
    tmp_fu_312_p2 <= std_logic_vector(unsigned(tmp_13_i_i_fu_308_p1) + unsigned(p_read2));
end behav;

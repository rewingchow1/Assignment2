// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc_layer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc_layer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc_layer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<53> fc_layer::ap_ST_fsm_state1 = "1";
const sc_lv<53> fc_layer::ap_ST_fsm_state2 = "10";
const sc_lv<53> fc_layer::ap_ST_fsm_state3 = "100";
const sc_lv<53> fc_layer::ap_ST_fsm_state4 = "1000";
const sc_lv<53> fc_layer::ap_ST_fsm_state5 = "10000";
const sc_lv<53> fc_layer::ap_ST_fsm_state6 = "100000";
const sc_lv<53> fc_layer::ap_ST_fsm_state7 = "1000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state8 = "10000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state9 = "100000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state10 = "1000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state11 = "10000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state12 = "100000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<53> fc_layer::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<32> fc_layer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool fc_layer::ap_const_boolean_1 = true;
const sc_lv<32> fc_layer::ap_const_lv32_7 = "111";
const sc_lv<32> fc_layer::ap_const_lv32_E = "1110";
const sc_lv<32> fc_layer::ap_const_lv32_11 = "10001";
const sc_lv<32> fc_layer::ap_const_lv32_18 = "11000";
const sc_lv<32> fc_layer::ap_const_lv32_12 = "10010";
const sc_lv<32> fc_layer::ap_const_lv32_19 = "11001";
const sc_lv<32> fc_layer::ap_const_lv32_28 = "101000";
const sc_lv<32> fc_layer::ap_const_lv32_29 = "101001";
const sc_lv<32> fc_layer::ap_const_lv32_2E = "101110";
const sc_lv<1> fc_layer::ap_const_lv1_0 = "0";
const sc_lv<32> fc_layer::ap_const_lv32_2F = "101111";
const sc_lv<32> fc_layer::ap_const_lv32_30 = "110000";
const sc_lv<1> fc_layer::ap_const_lv1_1 = "1";
const int fc_layer::C_S_AXI_DATA_WIDTH = "100000";
const int fc_layer::C_M_AXI_MEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_CACHE_VALUE = "11";
const int fc_layer::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fc_layer::ap_const_lv32_10 = "10000";
const sc_lv<32> fc_layer::ap_const_lv32_3 = "11";
const sc_lv<32> fc_layer::ap_const_lv32_4 = "100";
const sc_lv<32> fc_layer::ap_const_lv32_5 = "101";
const sc_lv<32> fc_layer::ap_const_lv32_6 = "110";
const sc_lv<32> fc_layer::ap_const_lv32_F = "1111";
const sc_lv<32> fc_layer::ap_const_lv32_1E = "11110";
const sc_lv<32> fc_layer::ap_const_lv32_27 = "100111";
const sc_lv<31> fc_layer::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> fc_layer::ap_const_lv32_1 = "1";
const sc_lv<3> fc_layer::ap_const_lv3_0 = "000";
const sc_lv<2> fc_layer::ap_const_lv2_0 = "00";
const sc_lv<4> fc_layer::ap_const_lv4_0 = "0000";
const sc_lv<4> fc_layer::ap_const_lv4_F = "1111";
const sc_lv<32> fc_layer::ap_const_lv32_1F = "11111";
const sc_lv<32> fc_layer::ap_const_lv32_1A = "11010";
const sc_lv<32> fc_layer::ap_const_lv32_2 = "10";
const sc_lv<31> fc_layer::ap_const_lv31_1 = "1";
const sc_lv<32> fc_layer::ap_const_lv32_17 = "10111";
const sc_lv<8> fc_layer::ap_const_lv8_FF = "11111111";
const sc_lv<23> fc_layer::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> fc_layer::ap_const_lv5_2 = "10";

fc_layer::fc_layer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc_layer_CTRL_BUS_s_axi_U = new fc_layer_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("fc_layer_CTRL_BUS_s_axi_U");
    fc_layer_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    fc_layer_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    fc_layer_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    fc_layer_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    fc_layer_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    fc_layer_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    fc_layer_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    fc_layer_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    fc_layer_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    fc_layer_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    fc_layer_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    fc_layer_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    fc_layer_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    fc_layer_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    fc_layer_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    fc_layer_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    fc_layer_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    fc_layer_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    fc_layer_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    fc_layer_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    fc_layer_CTRL_BUS_s_axi_U->ap_start(ap_start);
    fc_layer_CTRL_BUS_s_axi_U->interrupt(interrupt);
    fc_layer_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    fc_layer_CTRL_BUS_s_axi_U->ap_done(ap_done);
    fc_layer_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    fc_layer_CTRL_BUS_s_axi_U->input_offset(input_offset);
    fc_layer_CTRL_BUS_s_axi_U->output_offset(output_offset);
    fc_layer_CTRL_BUS_s_axi_U->batch_size(batch_size);
    fc_layer_CTRL_BUS_s_axi_U->num_inputs(num_inputs);
    fc_layer_CTRL_BUS_s_axi_U->num_outputs(num_outputs);
    fc_layer_CTRL_BUS_s_axi_U->enable_relu(enable_relu);
    fc_layer_mem_m_axi_U = new fc_layer_mem_m_axi<32,64,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>("fc_layer_mem_m_axi_U");
    fc_layer_mem_m_axi_U->AWVALID(m_axi_mem_AWVALID);
    fc_layer_mem_m_axi_U->AWREADY(m_axi_mem_AWREADY);
    fc_layer_mem_m_axi_U->AWADDR(m_axi_mem_AWADDR);
    fc_layer_mem_m_axi_U->AWID(m_axi_mem_AWID);
    fc_layer_mem_m_axi_U->AWLEN(m_axi_mem_AWLEN);
    fc_layer_mem_m_axi_U->AWSIZE(m_axi_mem_AWSIZE);
    fc_layer_mem_m_axi_U->AWBURST(m_axi_mem_AWBURST);
    fc_layer_mem_m_axi_U->AWLOCK(m_axi_mem_AWLOCK);
    fc_layer_mem_m_axi_U->AWCACHE(m_axi_mem_AWCACHE);
    fc_layer_mem_m_axi_U->AWPROT(m_axi_mem_AWPROT);
    fc_layer_mem_m_axi_U->AWQOS(m_axi_mem_AWQOS);
    fc_layer_mem_m_axi_U->AWREGION(m_axi_mem_AWREGION);
    fc_layer_mem_m_axi_U->AWUSER(m_axi_mem_AWUSER);
    fc_layer_mem_m_axi_U->WVALID(m_axi_mem_WVALID);
    fc_layer_mem_m_axi_U->WREADY(m_axi_mem_WREADY);
    fc_layer_mem_m_axi_U->WDATA(m_axi_mem_WDATA);
    fc_layer_mem_m_axi_U->WSTRB(m_axi_mem_WSTRB);
    fc_layer_mem_m_axi_U->WLAST(m_axi_mem_WLAST);
    fc_layer_mem_m_axi_U->WID(m_axi_mem_WID);
    fc_layer_mem_m_axi_U->WUSER(m_axi_mem_WUSER);
    fc_layer_mem_m_axi_U->ARVALID(m_axi_mem_ARVALID);
    fc_layer_mem_m_axi_U->ARREADY(m_axi_mem_ARREADY);
    fc_layer_mem_m_axi_U->ARADDR(m_axi_mem_ARADDR);
    fc_layer_mem_m_axi_U->ARID(m_axi_mem_ARID);
    fc_layer_mem_m_axi_U->ARLEN(m_axi_mem_ARLEN);
    fc_layer_mem_m_axi_U->ARSIZE(m_axi_mem_ARSIZE);
    fc_layer_mem_m_axi_U->ARBURST(m_axi_mem_ARBURST);
    fc_layer_mem_m_axi_U->ARLOCK(m_axi_mem_ARLOCK);
    fc_layer_mem_m_axi_U->ARCACHE(m_axi_mem_ARCACHE);
    fc_layer_mem_m_axi_U->ARPROT(m_axi_mem_ARPROT);
    fc_layer_mem_m_axi_U->ARQOS(m_axi_mem_ARQOS);
    fc_layer_mem_m_axi_U->ARREGION(m_axi_mem_ARREGION);
    fc_layer_mem_m_axi_U->ARUSER(m_axi_mem_ARUSER);
    fc_layer_mem_m_axi_U->RVALID(m_axi_mem_RVALID);
    fc_layer_mem_m_axi_U->RREADY(m_axi_mem_RREADY);
    fc_layer_mem_m_axi_U->RDATA(m_axi_mem_RDATA);
    fc_layer_mem_m_axi_U->RLAST(m_axi_mem_RLAST);
    fc_layer_mem_m_axi_U->RID(m_axi_mem_RID);
    fc_layer_mem_m_axi_U->RUSER(m_axi_mem_RUSER);
    fc_layer_mem_m_axi_U->RRESP(m_axi_mem_RRESP);
    fc_layer_mem_m_axi_U->BVALID(m_axi_mem_BVALID);
    fc_layer_mem_m_axi_U->BREADY(m_axi_mem_BREADY);
    fc_layer_mem_m_axi_U->BRESP(m_axi_mem_BRESP);
    fc_layer_mem_m_axi_U->BID(m_axi_mem_BID);
    fc_layer_mem_m_axi_U->BUSER(m_axi_mem_BUSER);
    fc_layer_mem_m_axi_U->ACLK(ap_clk);
    fc_layer_mem_m_axi_U->ARESET(ap_rst_n_inv);
    fc_layer_mem_m_axi_U->ACLK_EN(ap_var_for_const0);
    fc_layer_mem_m_axi_U->I_ARVALID(mem_ARVALID);
    fc_layer_mem_m_axi_U->I_ARREADY(mem_ARREADY);
    fc_layer_mem_m_axi_U->I_ARADDR(mem_ARADDR);
    fc_layer_mem_m_axi_U->I_ARID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_ARLEN(ap_var_for_const2);
    fc_layer_mem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_ARQOS(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_ARPROT(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_ARUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_ARBURST(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_ARREGION(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_RVALID(mem_RVALID);
    fc_layer_mem_m_axi_U->I_RREADY(mem_RREADY);
    fc_layer_mem_m_axi_U->I_RDATA(mem_RDATA);
    fc_layer_mem_m_axi_U->I_RID(mem_RID);
    fc_layer_mem_m_axi_U->I_RUSER(mem_RUSER);
    fc_layer_mem_m_axi_U->I_RRESP(mem_RRESP);
    fc_layer_mem_m_axi_U->I_RLAST(mem_RLAST);
    fc_layer_mem_m_axi_U->I_AWVALID(mem_AWVALID);
    fc_layer_mem_m_axi_U->I_AWREADY(mem_AWREADY);
    fc_layer_mem_m_axi_U->I_AWADDR(reg_257);
    fc_layer_mem_m_axi_U->I_AWID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_AWLEN(ap_var_for_const2);
    fc_layer_mem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_AWQOS(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_AWPROT(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_AWUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_AWBURST(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_AWREGION(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_WVALID(mem_WVALID);
    fc_layer_mem_m_axi_U->I_WREADY(mem_WREADY);
    fc_layer_mem_m_axi_U->I_WDATA(mem_WDATA);
    fc_layer_mem_m_axi_U->I_WID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_WUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_WLAST(ap_var_for_const6);
    fc_layer_mem_m_axi_U->I_WSTRB(ap_var_for_const7);
    fc_layer_mem_m_axi_U->I_BVALID(mem_BVALID);
    fc_layer_mem_m_axi_U->I_BREADY(mem_BREADY);
    fc_layer_mem_m_axi_U->I_BRESP(mem_BRESP);
    fc_layer_mem_m_axi_U->I_BID(mem_BID);
    fc_layer_mem_m_axi_U->I_BUSER(mem_BUSER);
    fc_layer_fadd_32nbkb_U1 = new fc_layer_fadd_32nbkb<1,9,32,32,32>("fc_layer_fadd_32nbkb_U1");
    fc_layer_fadd_32nbkb_U1->clk(ap_clk);
    fc_layer_fadd_32nbkb_U1->reset(ap_rst_n_inv);
    fc_layer_fadd_32nbkb_U1->din0(tmp_16_reg_210);
    fc_layer_fadd_32nbkb_U1->din1(tmp_21_reg_688);
    fc_layer_fadd_32nbkb_U1->ce(ap_var_for_const0);
    fc_layer_fadd_32nbkb_U1->dout(grp_fu_232_p2);
    fc_layer_fmul_32ncud_U2 = new fc_layer_fmul_32ncud<1,5,32,32,32>("fc_layer_fmul_32ncud_U2");
    fc_layer_fmul_32ncud_U2->clk(ap_clk);
    fc_layer_fmul_32ncud_U2->reset(ap_rst_n_inv);
    fc_layer_fmul_32ncud_U2->din0(input_element_reg_678);
    fc_layer_fmul_32ncud_U2->din1(weight_element_reg_683);
    fc_layer_fmul_32ncud_U2->ce(ap_var_for_const0);
    fc_layer_fmul_32ncud_U2->dout(grp_fu_237_p2);
    fc_layer_fcmp_32ndEe_U3 = new fc_layer_fcmp_32ndEe<1,2,32,32,1>("fc_layer_fcmp_32ndEe_U3");
    fc_layer_fcmp_32ndEe_U3->clk(ap_clk);
    fc_layer_fcmp_32ndEe_U3->reset(ap_rst_n_inv);
    fc_layer_fcmp_32ndEe_U3->din0(tmp_16_reg_210);
    fc_layer_fcmp_32ndEe_U3->din1(ap_var_for_const8);
    fc_layer_fcmp_32ndEe_U3->ce(grp_fu_241_ce);
    fc_layer_fcmp_32ndEe_U3->opcode(ap_var_for_const9);
    fc_layer_fcmp_32ndEe_U3->dout(grp_fu_241_p2);
    fc_layer_mul_32s_eOg_U4 = new fc_layer_mul_32s_eOg<1,3,32,32,32>("fc_layer_mul_32s_eOg_U4");
    fc_layer_mul_32s_eOg_U4->clk(ap_clk);
    fc_layer_mul_32s_eOg_U4->reset(ap_rst_n_inv);
    fc_layer_mul_32s_eOg_U4->din0(num_inputs_read_reg_537);
    fc_layer_mul_32s_eOg_U4->din1(num_outputs_read_reg_529);
    fc_layer_mul_32s_eOg_U4->ce(ap_var_for_const0);
    fc_layer_mul_32s_eOg_U4->dout(grp_fu_288_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state47);
    sensitive << ( tmp_4_reg_555 );
    sensitive << ( mem_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_fu_335_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op154_fcmp_state17);
    sensitive << ( tmp_4_reg_555 );
    sensitive << ( tmp_17_fu_415_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_fu_335_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_mem_ARREADY);
    sensitive << ( mem_ARREADY );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_mem_AWREADY);
    sensitive << ( mem_AWREADY );
    sensitive << ( ap_reg_ioackin_mem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_mem_WREADY);
    sensitive << ( mem_WREADY );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_b_1_fu_340_p2);
    sensitive << ( b_reg_153 );

    SC_METHOD(thread_b_cast_fu_331_p1);
    sensitive << ( b_reg_153 );

    SC_METHOD(thread_grp_fu_241_ce);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_sig_ioackin_mem_AWREADY );

    SC_METHOD(thread_grp_fu_247_p2);
    sensitive << ( tmp_11_reg_619 );
    sensitive << ( tmp_13_reg_648 );

    SC_METHOD(thread_i_1_fu_420_p2);
    sensitive << ( i_reg_221 );

    SC_METHOD(thread_i_cast_fu_411_p1);
    sensitive << ( i_reg_221 );

    SC_METHOD(thread_mem_ARADDR);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( mem_addr_reg_637 );
    sensitive << ( mem_addr_1_reg_666 );
    sensitive << ( mem_addr_2_reg_672 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_ARVALID);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_AWVALID);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_reg_ioackin_mem_AWREADY );

    SC_METHOD(thread_mem_BREADY);
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_4_reg_555 );
    sensitive << ( mem_BVALID );

    SC_METHOD(thread_mem_RREADY);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_mem_WDATA);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_27_reg_698 );
    sensitive << ( tmp_16_reg_210 );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_mem_WVALID);
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_mem_blk_n_AR);
    sensitive << ( m_axi_mem_ARREADY );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_mem_blk_n_AW);
    sensitive << ( m_axi_mem_AWREADY );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state48 );

    SC_METHOD(thread_mem_blk_n_B);
    sensitive << ( m_axi_mem_BVALID );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_4_reg_555 );

    SC_METHOD(thread_mem_blk_n_R);
    sensitive << ( m_axi_mem_RVALID );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_mem_blk_n_W);
    sensitive << ( m_axi_mem_WREADY );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_next_mul2_fu_326_p2);
    sensitive << ( num_inputs_read_reg_537 );
    sensitive << ( phi_mul1_reg_164 );

    SC_METHOD(thread_next_mul4_fu_321_p2);
    sensitive << ( num_outputs_read_reg_529 );
    sensitive << ( phi_mul3_reg_175 );

    SC_METHOD(thread_next_mul_fu_359_p2);
    sensitive << ( num_inputs_read_reg_537 );
    sensitive << ( phi_mul_reg_198 );

    SC_METHOD(thread_notlhs_fu_497_p2);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_sig_ioackin_mem_AWREADY );
    sensitive << ( tmp_23_fu_483_p4 );

    SC_METHOD(thread_notrhs_fu_503_p2);
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_sig_ioackin_mem_AWREADY );
    sensitive << ( tmp_fu_493_p1 );

    SC_METHOD(thread_o_1_fu_373_p2);
    sensitive << ( o_reg_186 );

    SC_METHOD(thread_o_cast_fu_364_p1);
    sensitive << ( o_reg_186 );

    SC_METHOD(thread_tmp1_cast_fu_388_p1);
    sensitive << ( tmp1_fu_383_p2 );

    SC_METHOD(thread_tmp1_fu_383_p2);
    sensitive << ( tmp_2_cast_reg_576 );
    sensitive << ( tmp_13_cast_fu_379_p1 );

    SC_METHOD(thread_tmp2_fu_315_p2);
    sensitive << ( tmp_1_fu_295_p1 );
    sensitive << ( tmp_2_fu_299_p1 );

    SC_METHOD(thread_tmp3_cast_fu_444_p1);
    sensitive << ( tmp3_fu_439_p2 );

    SC_METHOD(thread_tmp3_fu_439_p2);
    sensitive << ( tmp_9_cast_reg_614 );
    sensitive << ( tmp4_cast_fu_435_p1 );

    SC_METHOD(thread_tmp4_cast_fu_435_p1);
    sensitive << ( tmp4_fu_430_p2 );

    SC_METHOD(thread_tmp4_fu_430_p2);
    sensitive << ( tmp_3_cast_reg_581 );
    sensitive << ( tmp_20_cast_fu_426_p1 );

    SC_METHOD(thread_tmp5_cast_fu_464_p1);
    sensitive << ( tmp5_fu_459_p2 );

    SC_METHOD(thread_tmp5_fu_459_p2);
    sensitive << ( tmp_17_cast_reg_653 );
    sensitive << ( tmp_20_cast_fu_426_p1 );

    SC_METHOD(thread_tmp_10_fu_350_p1);
    sensitive << ( phi_mul3_reg_175 );

    SC_METHOD(thread_tmp_11_fu_354_p2);
    sensitive << ( tmp_6_reg_586 );
    sensitive << ( tmp_10_fu_350_p1 );

    SC_METHOD(thread_tmp_12_fu_368_p2);
    sensitive << ( num_outputs_read_reg_529 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( o_cast_fu_364_p1 );

    SC_METHOD(thread_tmp_13_cast_fu_379_p1);
    sensitive << ( o_reg_186 );

    SC_METHOD(thread_tmp_13_fu_403_p1);
    sensitive << ( o_reg_186 );

    SC_METHOD(thread_tmp_15_fu_392_p2);
    sensitive << ( tmp_1_reg_570 );
    sensitive << ( tmp1_cast_fu_388_p1 );

    SC_METHOD(thread_tmp_17_cast_fu_407_p1);
    sensitive << ( phi_mul_reg_198 );

    SC_METHOD(thread_tmp_17_fu_415_p2);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( num_inputs_read_reg_537 );
    sensitive << ( i_cast_fu_411_p1 );

    SC_METHOD(thread_tmp_18_to_int_fu_479_p1);
    sensitive << ( tmp_16_reg_210 );

    SC_METHOD(thread_tmp_19_fu_448_p2);
    sensitive << ( tmp2_reg_591 );
    sensitive << ( tmp3_cast_fu_444_p1 );

    SC_METHOD(thread_tmp_1_fu_295_p1);
    sensitive << ( tmp_3_fu_292_p1 );

    SC_METHOD(thread_tmp_20_cast_fu_426_p1);
    sensitive << ( i_reg_221 );

    SC_METHOD(thread_tmp_20_fu_468_p2);
    sensitive << ( tmp_1_reg_570 );
    sensitive << ( tmp5_cast_fu_464_p1 );

    SC_METHOD(thread_tmp_23_fu_483_p4);
    sensitive << ( tmp_18_to_int_fu_479_p1 );

    SC_METHOD(thread_tmp_24_fu_509_p2);
    sensitive << ( notrhs_fu_503_p2 );
    sensitive << ( notlhs_fu_497_p2 );

    SC_METHOD(thread_tmp_26_fu_515_p2);
    sensitive << ( tmp_24_fu_509_p2 );
    sensitive << ( grp_fu_241_p2 );

    SC_METHOD(thread_tmp_27_fu_521_p3);
    sensitive << ( tmp_16_reg_210 );
    sensitive << ( tmp_26_fu_515_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_302_p1);
    sensitive << ( num_weights_reg_564 );

    SC_METHOD(thread_tmp_2_fu_299_p1);
    sensitive << ( num_weights_reg_564 );

    SC_METHOD(thread_tmp_3_cast_fu_305_p1);
    sensitive << ( num_outputs_read_reg_529 );

    SC_METHOD(thread_tmp_3_fu_292_p1);
    sensitive << ( tmp_5_reg_550 );

    SC_METHOD(thread_tmp_4_fu_272_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( enable_relu );

    SC_METHOD(thread_tmp_6_fu_311_p1);
    sensitive << ( tmp_s_fu_308_p1 );

    SC_METHOD(thread_tmp_7_fu_335_p2);
    sensitive << ( batch_size_read_reg_545 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( b_cast_fu_331_p1 );

    SC_METHOD(thread_tmp_9_cast_fu_346_p1);
    sensitive << ( phi_mul1_reg_164 );

    SC_METHOD(thread_tmp_fu_493_p1);
    sensitive << ( tmp_18_to_int_fu_479_p1 );

    SC_METHOD(thread_tmp_s_fu_308_p1);
    sensitive << ( tmp_9_reg_559 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( tmp_4_reg_555 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( mem_RVALID );
    sensitive << ( mem_BVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_17_fu_415_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_7_fu_335_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_12_fu_368_p2 );
    sensitive << ( ap_sig_ioackin_mem_AWREADY );
    sensitive << ( ap_sig_ioackin_mem_ARREADY );
    sensitive << ( ap_sig_ioackin_mem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const9);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000000001";
    ap_reg_ioackin_mem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_mem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_mem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc_layer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_mem_AWVALID, "(port)m_axi_mem_AWVALID");
    sc_trace(mVcdFile, m_axi_mem_AWREADY, "(port)m_axi_mem_AWREADY");
    sc_trace(mVcdFile, m_axi_mem_AWADDR, "(port)m_axi_mem_AWADDR");
    sc_trace(mVcdFile, m_axi_mem_AWID, "(port)m_axi_mem_AWID");
    sc_trace(mVcdFile, m_axi_mem_AWLEN, "(port)m_axi_mem_AWLEN");
    sc_trace(mVcdFile, m_axi_mem_AWSIZE, "(port)m_axi_mem_AWSIZE");
    sc_trace(mVcdFile, m_axi_mem_AWBURST, "(port)m_axi_mem_AWBURST");
    sc_trace(mVcdFile, m_axi_mem_AWLOCK, "(port)m_axi_mem_AWLOCK");
    sc_trace(mVcdFile, m_axi_mem_AWCACHE, "(port)m_axi_mem_AWCACHE");
    sc_trace(mVcdFile, m_axi_mem_AWPROT, "(port)m_axi_mem_AWPROT");
    sc_trace(mVcdFile, m_axi_mem_AWQOS, "(port)m_axi_mem_AWQOS");
    sc_trace(mVcdFile, m_axi_mem_AWREGION, "(port)m_axi_mem_AWREGION");
    sc_trace(mVcdFile, m_axi_mem_AWUSER, "(port)m_axi_mem_AWUSER");
    sc_trace(mVcdFile, m_axi_mem_WVALID, "(port)m_axi_mem_WVALID");
    sc_trace(mVcdFile, m_axi_mem_WREADY, "(port)m_axi_mem_WREADY");
    sc_trace(mVcdFile, m_axi_mem_WDATA, "(port)m_axi_mem_WDATA");
    sc_trace(mVcdFile, m_axi_mem_WSTRB, "(port)m_axi_mem_WSTRB");
    sc_trace(mVcdFile, m_axi_mem_WLAST, "(port)m_axi_mem_WLAST");
    sc_trace(mVcdFile, m_axi_mem_WID, "(port)m_axi_mem_WID");
    sc_trace(mVcdFile, m_axi_mem_WUSER, "(port)m_axi_mem_WUSER");
    sc_trace(mVcdFile, m_axi_mem_ARVALID, "(port)m_axi_mem_ARVALID");
    sc_trace(mVcdFile, m_axi_mem_ARREADY, "(port)m_axi_mem_ARREADY");
    sc_trace(mVcdFile, m_axi_mem_ARADDR, "(port)m_axi_mem_ARADDR");
    sc_trace(mVcdFile, m_axi_mem_ARID, "(port)m_axi_mem_ARID");
    sc_trace(mVcdFile, m_axi_mem_ARLEN, "(port)m_axi_mem_ARLEN");
    sc_trace(mVcdFile, m_axi_mem_ARSIZE, "(port)m_axi_mem_ARSIZE");
    sc_trace(mVcdFile, m_axi_mem_ARBURST, "(port)m_axi_mem_ARBURST");
    sc_trace(mVcdFile, m_axi_mem_ARLOCK, "(port)m_axi_mem_ARLOCK");
    sc_trace(mVcdFile, m_axi_mem_ARCACHE, "(port)m_axi_mem_ARCACHE");
    sc_trace(mVcdFile, m_axi_mem_ARPROT, "(port)m_axi_mem_ARPROT");
    sc_trace(mVcdFile, m_axi_mem_ARQOS, "(port)m_axi_mem_ARQOS");
    sc_trace(mVcdFile, m_axi_mem_ARREGION, "(port)m_axi_mem_ARREGION");
    sc_trace(mVcdFile, m_axi_mem_ARUSER, "(port)m_axi_mem_ARUSER");
    sc_trace(mVcdFile, m_axi_mem_RVALID, "(port)m_axi_mem_RVALID");
    sc_trace(mVcdFile, m_axi_mem_RREADY, "(port)m_axi_mem_RREADY");
    sc_trace(mVcdFile, m_axi_mem_RDATA, "(port)m_axi_mem_RDATA");
    sc_trace(mVcdFile, m_axi_mem_RLAST, "(port)m_axi_mem_RLAST");
    sc_trace(mVcdFile, m_axi_mem_RID, "(port)m_axi_mem_RID");
    sc_trace(mVcdFile, m_axi_mem_RUSER, "(port)m_axi_mem_RUSER");
    sc_trace(mVcdFile, m_axi_mem_RRESP, "(port)m_axi_mem_RRESP");
    sc_trace(mVcdFile, m_axi_mem_BVALID, "(port)m_axi_mem_BVALID");
    sc_trace(mVcdFile, m_axi_mem_BREADY, "(port)m_axi_mem_BREADY");
    sc_trace(mVcdFile, m_axi_mem_BRESP, "(port)m_axi_mem_BRESP");
    sc_trace(mVcdFile, m_axi_mem_BID, "(port)m_axi_mem_BID");
    sc_trace(mVcdFile, m_axi_mem_BUSER, "(port)m_axi_mem_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_offset, "input_offset");
    sc_trace(mVcdFile, output_offset, "output_offset");
    sc_trace(mVcdFile, batch_size, "batch_size");
    sc_trace(mVcdFile, num_inputs, "num_inputs");
    sc_trace(mVcdFile, num_outputs, "num_outputs");
    sc_trace(mVcdFile, enable_relu, "enable_relu");
    sc_trace(mVcdFile, mem_blk_n_AR, "mem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, mem_blk_n_R, "mem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, mem_blk_n_AW, "mem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, mem_blk_n_W, "mem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, mem_blk_n_B, "mem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, tmp_4_reg_555, "tmp_4_reg_555");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, mem_AWVALID, "mem_AWVALID");
    sc_trace(mVcdFile, mem_AWREADY, "mem_AWREADY");
    sc_trace(mVcdFile, mem_WVALID, "mem_WVALID");
    sc_trace(mVcdFile, mem_WREADY, "mem_WREADY");
    sc_trace(mVcdFile, mem_WDATA, "mem_WDATA");
    sc_trace(mVcdFile, mem_ARVALID, "mem_ARVALID");
    sc_trace(mVcdFile, mem_ARREADY, "mem_ARREADY");
    sc_trace(mVcdFile, mem_ARADDR, "mem_ARADDR");
    sc_trace(mVcdFile, mem_RVALID, "mem_RVALID");
    sc_trace(mVcdFile, mem_RREADY, "mem_RREADY");
    sc_trace(mVcdFile, mem_RDATA, "mem_RDATA");
    sc_trace(mVcdFile, mem_RLAST, "mem_RLAST");
    sc_trace(mVcdFile, mem_RID, "mem_RID");
    sc_trace(mVcdFile, mem_RUSER, "mem_RUSER");
    sc_trace(mVcdFile, mem_RRESP, "mem_RRESP");
    sc_trace(mVcdFile, mem_BVALID, "mem_BVALID");
    sc_trace(mVcdFile, mem_BREADY, "mem_BREADY");
    sc_trace(mVcdFile, mem_BRESP, "mem_BRESP");
    sc_trace(mVcdFile, mem_BID, "mem_BID");
    sc_trace(mVcdFile, mem_BUSER, "mem_BUSER");
    sc_trace(mVcdFile, reg_257, "reg_257");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_17_fu_415_p2, "tmp_17_fu_415_p2");
    sc_trace(mVcdFile, num_outputs_read_reg_529, "num_outputs_read_reg_529");
    sc_trace(mVcdFile, num_inputs_read_reg_537, "num_inputs_read_reg_537");
    sc_trace(mVcdFile, batch_size_read_reg_545, "batch_size_read_reg_545");
    sc_trace(mVcdFile, tmp_5_reg_550, "tmp_5_reg_550");
    sc_trace(mVcdFile, tmp_4_fu_272_p2, "tmp_4_fu_272_p2");
    sc_trace(mVcdFile, tmp_9_reg_559, "tmp_9_reg_559");
    sc_trace(mVcdFile, grp_fu_288_p2, "grp_fu_288_p2");
    sc_trace(mVcdFile, num_weights_reg_564, "num_weights_reg_564");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_1_fu_295_p1, "tmp_1_fu_295_p1");
    sc_trace(mVcdFile, tmp_1_reg_570, "tmp_1_reg_570");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_2_cast_fu_302_p1, "tmp_2_cast_fu_302_p1");
    sc_trace(mVcdFile, tmp_2_cast_reg_576, "tmp_2_cast_reg_576");
    sc_trace(mVcdFile, tmp_3_cast_fu_305_p1, "tmp_3_cast_fu_305_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_581, "tmp_3_cast_reg_581");
    sc_trace(mVcdFile, tmp_6_fu_311_p1, "tmp_6_fu_311_p1");
    sc_trace(mVcdFile, tmp_6_reg_586, "tmp_6_reg_586");
    sc_trace(mVcdFile, tmp2_fu_315_p2, "tmp2_fu_315_p2");
    sc_trace(mVcdFile, tmp2_reg_591, "tmp2_reg_591");
    sc_trace(mVcdFile, next_mul4_fu_321_p2, "next_mul4_fu_321_p2");
    sc_trace(mVcdFile, next_mul4_reg_596, "next_mul4_reg_596");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, next_mul2_fu_326_p2, "next_mul2_fu_326_p2");
    sc_trace(mVcdFile, next_mul2_reg_601, "next_mul2_reg_601");
    sc_trace(mVcdFile, b_1_fu_340_p2, "b_1_fu_340_p2");
    sc_trace(mVcdFile, b_1_reg_609, "b_1_reg_609");
    sc_trace(mVcdFile, tmp_9_cast_fu_346_p1, "tmp_9_cast_fu_346_p1");
    sc_trace(mVcdFile, tmp_9_cast_reg_614, "tmp_9_cast_reg_614");
    sc_trace(mVcdFile, tmp_7_fu_335_p2, "tmp_7_fu_335_p2");
    sc_trace(mVcdFile, tmp_11_fu_354_p2, "tmp_11_fu_354_p2");
    sc_trace(mVcdFile, tmp_11_reg_619, "tmp_11_reg_619");
    sc_trace(mVcdFile, next_mul_fu_359_p2, "next_mul_fu_359_p2");
    sc_trace(mVcdFile, next_mul_reg_624, "next_mul_reg_624");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, o_1_fu_373_p2, "o_1_fu_373_p2");
    sc_trace(mVcdFile, o_1_reg_632, "o_1_reg_632");
    sc_trace(mVcdFile, mem_addr_reg_637, "mem_addr_reg_637");
    sc_trace(mVcdFile, tmp_12_fu_368_p2, "tmp_12_fu_368_p2");
    sc_trace(mVcdFile, output_element_reg_643, "output_element_reg_643");
    sc_trace(mVcdFile, tmp_13_fu_403_p1, "tmp_13_fu_403_p1");
    sc_trace(mVcdFile, tmp_13_reg_648, "tmp_13_reg_648");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_17_cast_fu_407_p1, "tmp_17_cast_fu_407_p1");
    sc_trace(mVcdFile, tmp_17_cast_reg_653, "tmp_17_cast_reg_653");
    sc_trace(mVcdFile, i_1_fu_420_p2, "i_1_fu_420_p2");
    sc_trace(mVcdFile, i_1_reg_661, "i_1_reg_661");
    sc_trace(mVcdFile, mem_addr_1_reg_666, "mem_addr_1_reg_666");
    sc_trace(mVcdFile, mem_addr_2_reg_672, "mem_addr_2_reg_672");
    sc_trace(mVcdFile, input_element_reg_678, "input_element_reg_678");
    sc_trace(mVcdFile, weight_element_reg_683, "weight_element_reg_683");
    sc_trace(mVcdFile, grp_fu_237_p2, "grp_fu_237_p2");
    sc_trace(mVcdFile, tmp_21_reg_688, "tmp_21_reg_688");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, grp_fu_232_p2, "grp_fu_232_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state40, "ap_CS_fsm_state40");
    sc_trace(mVcdFile, tmp_27_fu_521_p3, "tmp_27_fu_521_p3");
    sc_trace(mVcdFile, tmp_27_reg_698, "tmp_27_reg_698");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_AWREADY, "ap_sig_ioackin_mem_AWREADY");
    sc_trace(mVcdFile, b_reg_153, "b_reg_153");
    sc_trace(mVcdFile, phi_mul1_reg_164, "phi_mul1_reg_164");
    sc_trace(mVcdFile, phi_mul3_reg_175, "phi_mul3_reg_175");
    sc_trace(mVcdFile, o_reg_186, "o_reg_186");
    sc_trace(mVcdFile, ap_block_state47, "ap_block_state47");
    sc_trace(mVcdFile, phi_mul_reg_198, "phi_mul_reg_198");
    sc_trace(mVcdFile, tmp_16_reg_210, "tmp_16_reg_210");
    sc_trace(mVcdFile, i_reg_221, "i_reg_221");
    sc_trace(mVcdFile, grp_fu_247_p2, "grp_fu_247_p2");
    sc_trace(mVcdFile, tmp_15_fu_392_p2, "tmp_15_fu_392_p2");
    sc_trace(mVcdFile, tmp_19_fu_448_p2, "tmp_19_fu_448_p2");
    sc_trace(mVcdFile, tmp_20_fu_468_p2, "tmp_20_fu_468_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_ARREADY, "ap_reg_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_ARREADY, "ap_sig_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_AWREADY, "ap_reg_ioackin_mem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_WREADY, "ap_reg_ioackin_mem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_WREADY, "ap_sig_ioackin_mem_WREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_3_fu_292_p1, "tmp_3_fu_292_p1");
    sc_trace(mVcdFile, tmp_s_fu_308_p1, "tmp_s_fu_308_p1");
    sc_trace(mVcdFile, tmp_2_fu_299_p1, "tmp_2_fu_299_p1");
    sc_trace(mVcdFile, b_cast_fu_331_p1, "b_cast_fu_331_p1");
    sc_trace(mVcdFile, tmp_10_fu_350_p1, "tmp_10_fu_350_p1");
    sc_trace(mVcdFile, o_cast_fu_364_p1, "o_cast_fu_364_p1");
    sc_trace(mVcdFile, tmp_13_cast_fu_379_p1, "tmp_13_cast_fu_379_p1");
    sc_trace(mVcdFile, tmp1_fu_383_p2, "tmp1_fu_383_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_388_p1, "tmp1_cast_fu_388_p1");
    sc_trace(mVcdFile, i_cast_fu_411_p1, "i_cast_fu_411_p1");
    sc_trace(mVcdFile, tmp_20_cast_fu_426_p1, "tmp_20_cast_fu_426_p1");
    sc_trace(mVcdFile, tmp4_fu_430_p2, "tmp4_fu_430_p2");
    sc_trace(mVcdFile, tmp4_cast_fu_435_p1, "tmp4_cast_fu_435_p1");
    sc_trace(mVcdFile, tmp3_fu_439_p2, "tmp3_fu_439_p2");
    sc_trace(mVcdFile, tmp3_cast_fu_444_p1, "tmp3_cast_fu_444_p1");
    sc_trace(mVcdFile, tmp5_fu_459_p2, "tmp5_fu_459_p2");
    sc_trace(mVcdFile, tmp5_cast_fu_464_p1, "tmp5_cast_fu_464_p1");
    sc_trace(mVcdFile, tmp_18_to_int_fu_479_p1, "tmp_18_to_int_fu_479_p1");
    sc_trace(mVcdFile, tmp_23_fu_483_p4, "tmp_23_fu_483_p4");
    sc_trace(mVcdFile, tmp_fu_493_p1, "tmp_fu_493_p1");
    sc_trace(mVcdFile, notrhs_fu_503_p2, "notrhs_fu_503_p2");
    sc_trace(mVcdFile, notlhs_fu_497_p2, "notlhs_fu_497_p2");
    sc_trace(mVcdFile, tmp_24_fu_509_p2, "tmp_24_fu_509_p2");
    sc_trace(mVcdFile, grp_fu_241_p2, "grp_fu_241_p2");
    sc_trace(mVcdFile, tmp_26_fu_515_p2, "tmp_26_fu_515_p2");
    sc_trace(mVcdFile, grp_fu_241_ce, "grp_fu_241_ce");
    sc_trace(mVcdFile, ap_predicate_op154_fcmp_state17, "ap_predicate_op154_fcmp_state17");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fc_layer.hdltvin.dat");
    mHdltvoutHandle.open("fc_layer.hdltvout.dat");
}

fc_layer::~fc_layer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fc_layer_CTRL_BUS_s_axi_U;
    delete fc_layer_mem_m_axi_U;
    delete fc_layer_fadd_32nbkb_U1;
    delete fc_layer_fmul_32ncud_U2;
    delete fc_layer_fcmp_32ndEe_U3;
    delete fc_layer_mul_32s_eOg_U4;
}

void fc_layer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc_layer::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void fc_layer::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv32_0;
}

void fc_layer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void fc_layer::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void fc_layer::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void fc_layer::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void fc_layer::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void fc_layer::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void fc_layer::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv5_2;
}

void fc_layer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())))) {
            ap_reg_ioackin_mem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_AWREADY.read())))) {
            ap_reg_ioackin_mem_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_WREADY.read())))) {
            ap_reg_ioackin_mem_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_368_p2.read()))) {
        b_reg_153 = b_1_reg_609.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_reg_153 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        i_reg_221 = i_1_reg_661.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_reg_221 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
         !((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read()))))) {
        o_reg_186 = o_1_reg_632.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_335_p2.read()))) {
        o_reg_186 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_368_p2.read()))) {
        phi_mul1_reg_164 = next_mul2_reg_601.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        phi_mul1_reg_164 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_368_p2.read()))) {
        phi_mul3_reg_175 = next_mul4_reg_596.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        phi_mul3_reg_175 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
         !((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read()))))) {
        phi_mul_reg_198 = next_mul_reg_624.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_335_p2.read()))) {
        phi_mul_reg_198 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state40.read())) {
        tmp_16_reg_210 = grp_fu_232_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_16_reg_210 = output_element_reg_643.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        b_1_reg_609 = b_1_fu_340_p2.read();
        next_mul2_reg_601 = next_mul2_fu_326_p2.read();
        next_mul4_reg_596 = next_mul4_fu_321_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        batch_size_read_reg_545 = batch_size.read();
        num_inputs_read_reg_537 = num_inputs.read();
        num_outputs_read_reg_529 = num_outputs.read();
        tmp_4_reg_555 = tmp_4_fu_272_p2.read();
        tmp_5_reg_550 = input_offset.read().range(31, 2);
        tmp_9_reg_559 = output_offset.read().range(31, 2);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        i_1_reg_661 = i_1_fu_420_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        input_element_reg_678 = mem_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_17_fu_415_p2.read()))) {
        mem_addr_1_reg_666 = tmp_19_fu_448_p2.read();
        mem_addr_2_reg_672 = tmp_20_fu_468_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_fu_368_p2.read()))) {
        mem_addr_reg_637 = tmp_15_fu_392_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        next_mul_reg_624 = next_mul_fu_359_p2.read();
        o_1_reg_632 = o_1_fu_373_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        num_weights_reg_564 = grp_fu_288_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        output_element_reg_643 = mem_RDATA.read();
    }
    if (((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_17_fu_415_p2.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_17_fu_415_p2.read())))) {
        reg_257 = grp_fu_247_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp2_reg_591 = tmp2_fu_315_p2.read();
        tmp_1_reg_570 = tmp_1_fu_295_p1.read();
        tmp_2_cast_reg_576 = tmp_2_cast_fu_302_p1.read();
        tmp_3_cast_reg_581 = tmp_3_cast_fu_305_p1.read();
        tmp_6_reg_586 = tmp_6_fu_311_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_335_p2.read()))) {
        tmp_11_reg_619 = tmp_11_fu_354_p2.read();
        tmp_9_cast_reg_614 = tmp_9_cast_fu_346_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_13_reg_648 = tmp_13_fu_403_p1.read();
        tmp_17_cast_reg_653 = tmp_17_cast_fu_407_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        tmp_21_reg_688 = grp_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
        tmp_27_reg_698 = tmp_27_fu_521_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        weight_element_reg_683 = mem_RDATA.read();
    }
}

void fc_layer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc_layer::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void fc_layer::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void fc_layer::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fc_layer::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc_layer::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fc_layer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc_layer::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void fc_layer::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void fc_layer::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void fc_layer::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fc_layer::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void fc_layer::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fc_layer::thread_ap_CS_fsm_state40() {
    ap_CS_fsm_state40 = ap_CS_fsm.read()[39];
}

void fc_layer::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void fc_layer::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void fc_layer::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void fc_layer::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void fc_layer::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void fc_layer::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fc_layer::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fc_layer::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fc_layer::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc_layer::thread_ap_block_state47() {
    ap_block_state47 = ((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())));
}

void fc_layer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_335_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_predicate_op154_fcmp_state17() {
    ap_predicate_op154_fcmp_state17 = (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_17_fu_415_p2.read()));
}

void fc_layer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_335_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fc_layer::thread_ap_sig_ioackin_mem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY.read();
    } else {
        ap_sig_ioackin_mem_ARREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_ap_sig_ioackin_mem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())) {
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY.read();
    } else {
        ap_sig_ioackin_mem_AWREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_ap_sig_ioackin_mem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) {
        ap_sig_ioackin_mem_WREADY = mem_WREADY.read();
    } else {
        ap_sig_ioackin_mem_WREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_b_1_fu_340_p2() {
    b_1_fu_340_p2 = (!b_reg_153.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(b_reg_153.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_b_cast_fu_331_p1() {
    b_cast_fu_331_p1 = esl_zext<32,31>(b_reg_153.read());
}

void fc_layer::thread_grp_fu_241_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1)))) {
        grp_fu_241_ce = ap_const_logic_1;
    } else {
        grp_fu_241_ce = ap_const_logic_0;
    }
}

void fc_layer::thread_grp_fu_247_p2() {
    grp_fu_247_p2 = (!tmp_11_reg_619.read().is_01() || !tmp_13_reg_648.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_11_reg_619.read()) + sc_biguint<64>(tmp_13_reg_648.read()));
}

void fc_layer::thread_i_1_fu_420_p2() {
    i_1_fu_420_p2 = (!i_reg_221.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_221.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_i_cast_fu_411_p1() {
    i_cast_fu_411_p1 = esl_zext<32,31>(i_reg_221.read());
}

void fc_layer::thread_mem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            mem_ARADDR = mem_addr_2_reg_672.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            mem_ARADDR = mem_addr_1_reg_666.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            mem_ARADDR = mem_addr_reg_637.read();
        } else {
            mem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        mem_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fc_layer::thread_mem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())))) {
        mem_ARVALID = ap_const_logic_1;
    } else {
        mem_ARVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())))) {
        mem_AWVALID = ap_const_logic_1;
    } else {
        mem_AWVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
          esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
          !((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
          esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
          !((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())))))) {
        mem_BREADY = ap_const_logic_1;
    } else {
        mem_BREADY = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)))) {
        mem_RREADY = ap_const_logic_1;
    } else {
        mem_RREADY = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
            mem_WDATA = tmp_16_reg_210.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read())) {
            mem_WDATA = tmp_27_reg_698.read();
        } else {
            mem_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        mem_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc_layer::thread_mem_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())))) {
        mem_WVALID = ap_const_logic_1;
    } else {
        mem_WVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        mem_blk_n_AR = m_axi_mem_ARREADY.read();
    } else {
        mem_blk_n_AR = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        mem_blk_n_AW = m_axi_mem_AWREADY.read();
    } else {
        mem_blk_n_AW = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
          esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
          esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1)))) {
        mem_blk_n_B = m_axi_mem_BVALID.read();
    } else {
        mem_blk_n_B = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        mem_blk_n_R = m_axi_mem_RVALID.read();
    } else {
        mem_blk_n_R = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()))) {
        mem_blk_n_W = m_axi_mem_WREADY.read();
    } else {
        mem_blk_n_W = ap_const_logic_1;
    }
}

void fc_layer::thread_next_mul2_fu_326_p2() {
    next_mul2_fu_326_p2 = (!phi_mul1_reg_164.read().is_01() || !num_inputs_read_reg_537.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_164.read()) + sc_bigint<32>(num_inputs_read_reg_537.read()));
}

void fc_layer::thread_next_mul4_fu_321_p2() {
    next_mul4_fu_321_p2 = (!phi_mul3_reg_175.read().is_01() || !num_outputs_read_reg_529.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul3_reg_175.read()) + sc_bigint<32>(num_outputs_read_reg_529.read()));
}

void fc_layer::thread_next_mul_fu_359_p2() {
    next_mul_fu_359_p2 = (!phi_mul_reg_198.read().is_01() || !num_inputs_read_reg_537.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_198.read()) + sc_bigint<32>(num_inputs_read_reg_537.read()));
}

void fc_layer::thread_notlhs_fu_497_p2() {
    notlhs_fu_497_p2 = (!tmp_23_fu_483_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_23_fu_483_p4.read() != ap_const_lv8_FF);
}

void fc_layer::thread_notrhs_fu_503_p2() {
    notrhs_fu_503_p2 = (!tmp_fu_493_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_493_p1.read() == ap_const_lv23_0);
}

void fc_layer::thread_o_1_fu_373_p2() {
    o_1_fu_373_p2 = (!o_reg_186.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(o_reg_186.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_o_cast_fu_364_p1() {
    o_cast_fu_364_p1 = esl_zext<32,31>(o_reg_186.read());
}

void fc_layer::thread_tmp1_cast_fu_388_p1() {
    tmp1_cast_fu_388_p1 = esl_sext<64,33>(tmp1_fu_383_p2.read());
}

void fc_layer::thread_tmp1_fu_383_p2() {
    tmp1_fu_383_p2 = (!tmp_2_cast_reg_576.read().is_01() || !tmp_13_cast_fu_379_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_2_cast_reg_576.read()) + sc_biguint<33>(tmp_13_cast_fu_379_p1.read()));
}

void fc_layer::thread_tmp2_fu_315_p2() {
    tmp2_fu_315_p2 = (!tmp_1_fu_295_p1.read().is_01() || !tmp_2_fu_299_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_1_fu_295_p1.read()) + sc_bigint<64>(tmp_2_fu_299_p1.read()));
}

void fc_layer::thread_tmp3_cast_fu_444_p1() {
    tmp3_cast_fu_444_p1 = esl_sext<64,34>(tmp3_fu_439_p2.read());
}

void fc_layer::thread_tmp3_fu_439_p2() {
    tmp3_fu_439_p2 = (!tmp4_cast_fu_435_p1.read().is_01() || !tmp_9_cast_reg_614.read().is_01())? sc_lv<34>(): (sc_bigint<34>(tmp4_cast_fu_435_p1.read()) + sc_bigint<34>(tmp_9_cast_reg_614.read()));
}

void fc_layer::thread_tmp4_cast_fu_435_p1() {
    tmp4_cast_fu_435_p1 = esl_sext<34,33>(tmp4_fu_430_p2.read());
}

void fc_layer::thread_tmp4_fu_430_p2() {
    tmp4_fu_430_p2 = (!tmp_3_cast_reg_581.read().is_01() || !tmp_20_cast_fu_426_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_3_cast_reg_581.read()) + sc_biguint<33>(tmp_20_cast_fu_426_p1.read()));
}

void fc_layer::thread_tmp5_cast_fu_464_p1() {
    tmp5_cast_fu_464_p1 = esl_sext<64,33>(tmp5_fu_459_p2.read());
}

void fc_layer::thread_tmp5_fu_459_p2() {
    tmp5_fu_459_p2 = (!tmp_17_cast_reg_653.read().is_01() || !tmp_20_cast_fu_426_p1.read().is_01())? sc_lv<33>(): (sc_bigint<33>(tmp_17_cast_reg_653.read()) + sc_biguint<33>(tmp_20_cast_fu_426_p1.read()));
}

void fc_layer::thread_tmp_10_fu_350_p1() {
    tmp_10_fu_350_p1 = esl_sext<64,32>(phi_mul3_reg_175.read());
}

void fc_layer::thread_tmp_11_fu_354_p2() {
    tmp_11_fu_354_p2 = (!tmp_6_reg_586.read().is_01() || !tmp_10_fu_350_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_6_reg_586.read()) + sc_bigint<64>(tmp_10_fu_350_p1.read()));
}

void fc_layer::thread_tmp_12_fu_368_p2() {
    tmp_12_fu_368_p2 = (!o_cast_fu_364_p1.read().is_01() || !num_outputs_read_reg_529.read().is_01())? sc_lv<1>(): (sc_bigint<32>(o_cast_fu_364_p1.read()) < sc_bigint<32>(num_outputs_read_reg_529.read()));
}

void fc_layer::thread_tmp_13_cast_fu_379_p1() {
    tmp_13_cast_fu_379_p1 = esl_zext<33,31>(o_reg_186.read());
}

void fc_layer::thread_tmp_13_fu_403_p1() {
    tmp_13_fu_403_p1 = esl_zext<64,31>(o_reg_186.read());
}

void fc_layer::thread_tmp_15_fu_392_p2() {
    tmp_15_fu_392_p2 = (!tmp1_cast_fu_388_p1.read().is_01() || !tmp_1_reg_570.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp1_cast_fu_388_p1.read()) + sc_biguint<64>(tmp_1_reg_570.read()));
}

void fc_layer::thread_tmp_17_cast_fu_407_p1() {
    tmp_17_cast_fu_407_p1 = esl_sext<33,32>(phi_mul_reg_198.read());
}

void fc_layer::thread_tmp_17_fu_415_p2() {
    tmp_17_fu_415_p2 = (!i_cast_fu_411_p1.read().is_01() || !num_inputs_read_reg_537.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_411_p1.read()) < sc_bigint<32>(num_inputs_read_reg_537.read()));
}

void fc_layer::thread_tmp_18_to_int_fu_479_p1() {
    tmp_18_to_int_fu_479_p1 = tmp_16_reg_210.read();
}

void fc_layer::thread_tmp_19_fu_448_p2() {
    tmp_19_fu_448_p2 = (!tmp3_cast_fu_444_p1.read().is_01() || !tmp2_reg_591.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp3_cast_fu_444_p1.read()) + sc_biguint<64>(tmp2_reg_591.read()));
}

void fc_layer::thread_tmp_1_fu_295_p1() {
    tmp_1_fu_295_p1 = esl_zext<64,62>(tmp_3_fu_292_p1.read());
}

void fc_layer::thread_tmp_20_cast_fu_426_p1() {
    tmp_20_cast_fu_426_p1 = esl_zext<33,31>(i_reg_221.read());
}

void fc_layer::thread_tmp_20_fu_468_p2() {
    tmp_20_fu_468_p2 = (!tmp5_cast_fu_464_p1.read().is_01() || !tmp_1_reg_570.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp5_cast_fu_464_p1.read()) + sc_biguint<64>(tmp_1_reg_570.read()));
}

void fc_layer::thread_tmp_23_fu_483_p4() {
    tmp_23_fu_483_p4 = tmp_18_to_int_fu_479_p1.read().range(30, 23);
}

void fc_layer::thread_tmp_24_fu_509_p2() {
    tmp_24_fu_509_p2 = (notrhs_fu_503_p2.read() | notlhs_fu_497_p2.read());
}

void fc_layer::thread_tmp_26_fu_515_p2() {
    tmp_26_fu_515_p2 = (tmp_24_fu_509_p2.read() & grp_fu_241_p2.read());
}

void fc_layer::thread_tmp_27_fu_521_p3() {
    tmp_27_fu_521_p3 = (!tmp_26_fu_515_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_26_fu_515_p2.read()[0].to_bool())? tmp_16_reg_210.read(): ap_const_lv32_0);
}

void fc_layer::thread_tmp_2_cast_fu_302_p1() {
    tmp_2_cast_fu_302_p1 = esl_sext<33,32>(num_weights_reg_564.read());
}

void fc_layer::thread_tmp_2_fu_299_p1() {
    tmp_2_fu_299_p1 = esl_sext<64,32>(num_weights_reg_564.read());
}

void fc_layer::thread_tmp_3_cast_fu_305_p1() {
    tmp_3_cast_fu_305_p1 = esl_sext<33,32>(num_outputs_read_reg_529.read());
}

void fc_layer::thread_tmp_3_fu_292_p1() {
    tmp_3_fu_292_p1 = esl_sext<62,30>(tmp_5_reg_550.read());
}

void fc_layer::thread_tmp_4_fu_272_p2() {
    tmp_4_fu_272_p2 = (!enable_relu.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(enable_relu.read() == ap_const_lv32_0);
}

void fc_layer::thread_tmp_6_fu_311_p1() {
    tmp_6_fu_311_p1 = esl_zext<64,62>(tmp_s_fu_308_p1.read());
}

void fc_layer::thread_tmp_7_fu_335_p2() {
    tmp_7_fu_335_p2 = (!b_cast_fu_331_p1.read().is_01() || !batch_size_read_reg_545.read().is_01())? sc_lv<1>(): (sc_bigint<32>(b_cast_fu_331_p1.read()) < sc_bigint<32>(batch_size_read_reg_545.read()));
}

void fc_layer::thread_tmp_9_cast_fu_346_p1() {
    tmp_9_cast_fu_346_p1 = esl_sext<34,32>(phi_mul1_reg_164.read());
}

void fc_layer::thread_tmp_fu_493_p1() {
    tmp_fu_493_p1 = tmp_18_to_int_fu_479_p1.read().range(23-1, 0);
}

void fc_layer::thread_tmp_s_fu_308_p1() {
    tmp_s_fu_308_p1 = esl_sext<62,30>(tmp_9_reg_559.read());
}

void fc_layer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_335_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_368_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_17_fu_415_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state48;
            } else if ((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_17_fu_415_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state41;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state27;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 1099511627776 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state42;
            } else {
                ap_NS_fsm = ap_ST_fsm_state41;
            }
            break;
        case 2199023255552 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state43;
            } else {
                ap_NS_fsm = ap_ST_fsm_state42;
            }
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && !((esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())) || (esl_seteq<1,1,1>(tmp_4_reg_555.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state47;
            }
            break;
        case 140737488355328 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state49;
            } else {
                ap_NS_fsm = ap_ST_fsm_state48;
            }
            break;
        case 281474976710656 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state50;
            } else {
                ap_NS_fsm = ap_ST_fsm_state49;
            }
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<53>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fc_layer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_mem_AWVALID\" :  \"" << m_axi_mem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_AWREADY\" :  \"" << m_axi_mem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWADDR\" :  \"" << m_axi_mem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWID\" :  \"" << m_axi_mem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLEN\" :  \"" << m_axi_mem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWSIZE\" :  \"" << m_axi_mem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWBURST\" :  \"" << m_axi_mem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLOCK\" :  \"" << m_axi_mem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWCACHE\" :  \"" << m_axi_mem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWPROT\" :  \"" << m_axi_mem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWQOS\" :  \"" << m_axi_mem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWREGION\" :  \"" << m_axi_mem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWUSER\" :  \"" << m_axi_mem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WVALID\" :  \"" << m_axi_mem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_WREADY\" :  \"" << m_axi_mem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WDATA\" :  \"" << m_axi_mem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WSTRB\" :  \"" << m_axi_mem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WLAST\" :  \"" << m_axi_mem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WID\" :  \"" << m_axi_mem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WUSER\" :  \"" << m_axi_mem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARVALID\" :  \"" << m_axi_mem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_ARREADY\" :  \"" << m_axi_mem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARADDR\" :  \"" << m_axi_mem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARID\" :  \"" << m_axi_mem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLEN\" :  \"" << m_axi_mem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARSIZE\" :  \"" << m_axi_mem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARBURST\" :  \"" << m_axi_mem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLOCK\" :  \"" << m_axi_mem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARCACHE\" :  \"" << m_axi_mem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARPROT\" :  \"" << m_axi_mem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARQOS\" :  \"" << m_axi_mem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARREGION\" :  \"" << m_axi_mem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARUSER\" :  \"" << m_axi_mem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RVALID\" :  \"" << m_axi_mem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_RREADY\" :  \"" << m_axi_mem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RDATA\" :  \"" << m_axi_mem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RLAST\" :  \"" << m_axi_mem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RID\" :  \"" << m_axi_mem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RUSER\" :  \"" << m_axi_mem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RRESP\" :  \"" << m_axi_mem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BVALID\" :  \"" << m_axi_mem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_BREADY\" :  \"" << m_axi_mem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BRESP\" :  \"" << m_axi_mem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BID\" :  \"" << m_axi_mem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BUSER\" :  \"" << m_axi_mem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=3082997775,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=5168,HLS_SYN_LUT=2830}" *)

module fc_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] batch_size;
wire   [31:0] num_inputs;
wire   [31:0] num_outputs;
wire   [31:0] enable_relu;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state8;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state26;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state41;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state42;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state47;
reg   [0:0] tmp_4_reg_555;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg   [31:0] mem_WDATA;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [63:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [63:0] reg_257;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_17_fu_415_p2;
reg  signed [31:0] num_outputs_read_reg_529;
reg  signed [31:0] num_inputs_read_reg_537;
reg   [31:0] batch_size_read_reg_545;
reg   [29:0] tmp_5_reg_550;
wire   [0:0] tmp_4_fu_272_p2;
reg   [29:0] tmp_9_reg_559;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] num_weights_reg_564;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_1_fu_295_p1;
reg   [63:0] tmp_1_reg_570;
wire    ap_CS_fsm_state5;
wire  signed [32:0] tmp_2_cast_fu_302_p1;
reg  signed [32:0] tmp_2_cast_reg_576;
wire  signed [32:0] tmp_3_cast_fu_305_p1;
reg  signed [32:0] tmp_3_cast_reg_581;
wire   [63:0] tmp_6_fu_311_p1;
reg   [63:0] tmp_6_reg_586;
wire   [63:0] tmp2_fu_315_p2;
reg   [63:0] tmp2_reg_591;
wire   [31:0] next_mul4_fu_321_p2;
reg   [31:0] next_mul4_reg_596;
wire    ap_CS_fsm_state6;
wire   [31:0] next_mul2_fu_326_p2;
reg   [31:0] next_mul2_reg_601;
wire   [30:0] b_1_fu_340_p2;
reg   [30:0] b_1_reg_609;
wire  signed [33:0] tmp_9_cast_fu_346_p1;
reg  signed [33:0] tmp_9_cast_reg_614;
wire   [0:0] tmp_7_fu_335_p2;
wire   [63:0] tmp_11_fu_354_p2;
reg   [63:0] tmp_11_reg_619;
wire   [31:0] next_mul_fu_359_p2;
reg   [31:0] next_mul_reg_624;
wire    ap_CS_fsm_state7;
wire   [30:0] o_1_fu_373_p2;
reg   [30:0] o_1_reg_632;
reg   [63:0] mem_addr_reg_637;
wire   [0:0] tmp_12_fu_368_p2;
reg   [31:0] output_element_reg_643;
wire   [63:0] tmp_13_fu_403_p1;
reg   [63:0] tmp_13_reg_648;
wire    ap_CS_fsm_state16;
wire  signed [32:0] tmp_17_cast_fu_407_p1;
reg  signed [32:0] tmp_17_cast_reg_653;
wire   [30:0] i_1_fu_420_p2;
reg   [30:0] i_1_reg_661;
reg   [63:0] mem_addr_1_reg_666;
reg   [63:0] mem_addr_2_reg_672;
reg   [31:0] input_element_reg_678;
reg   [31:0] weight_element_reg_683;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp_21_reg_688;
wire    ap_CS_fsm_state31;
wire   [31:0] grp_fu_232_p2;
wire    ap_CS_fsm_state40;
wire   [31:0] tmp_27_fu_521_p3;
reg   [31:0] tmp_27_reg_698;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [30:0] b_reg_153;
reg   [31:0] phi_mul1_reg_164;
reg   [31:0] phi_mul3_reg_175;
reg   [30:0] o_reg_186;
reg    ap_block_state47;
reg   [31:0] phi_mul_reg_198;
reg   [31:0] tmp_16_reg_210;
reg   [30:0] i_reg_221;
wire   [63:0] grp_fu_247_p2;
wire   [63:0] tmp_15_fu_392_p2;
wire   [63:0] tmp_19_fu_448_p2;
wire   [63:0] tmp_20_fu_468_p2;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state2;
wire  signed [61:0] tmp_3_fu_292_p1;
wire  signed [61:0] tmp_s_fu_308_p1;
wire  signed [63:0] tmp_2_fu_299_p1;
wire   [31:0] b_cast_fu_331_p1;
wire  signed [63:0] tmp_10_fu_350_p1;
wire   [31:0] o_cast_fu_364_p1;
wire   [32:0] tmp_13_cast_fu_379_p1;
wire   [32:0] tmp1_fu_383_p2;
wire  signed [63:0] tmp1_cast_fu_388_p1;
wire   [31:0] i_cast_fu_411_p1;
wire   [32:0] tmp_20_cast_fu_426_p1;
wire   [32:0] tmp4_fu_430_p2;
wire  signed [33:0] tmp4_cast_fu_435_p1;
wire   [33:0] tmp3_fu_439_p2;
wire  signed [63:0] tmp3_cast_fu_444_p1;
wire   [32:0] tmp5_fu_459_p2;
wire  signed [63:0] tmp5_cast_fu_464_p1;
wire   [31:0] tmp_18_to_int_fu_479_p1;
wire   [7:0] tmp_23_fu_483_p4;
wire   [22:0] tmp_fu_493_p1;
wire   [0:0] notrhs_fu_503_p2;
wire   [0:0] notlhs_fu_497_p2;
wire   [0:0] tmp_24_fu_509_p2;
wire   [0:0] grp_fu_241_p2;
wire   [0:0] tmp_26_fu_515_p2;
reg    grp_fu_241_ce;
reg    ap_predicate_op154_fcmp_state17;
reg   [52:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

fc_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
fc_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .batch_size(batch_size),
    .num_inputs(num_inputs),
    .num_outputs(num_outputs),
    .enable_relu(enable_relu)
);

fc_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
fc_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(reg_257),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(mem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

fc_layer_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_16_reg_210),
    .din1(tmp_21_reg_688),
    .ce(1'b1),
    .dout(grp_fu_232_p2)
);

fc_layer_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(input_element_reg_678),
    .din1(weight_element_reg_683),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

fc_layer_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fc_layer_fcmp_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_16_reg_210),
    .din1(32'd0),
    .ce(grp_fu_241_ce),
    .opcode(5'd2),
    .dout(grp_fu_241_p2)
);

fc_layer_mul_32s_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(num_inputs_read_reg_537),
    .din1(num_outputs_read_reg_529),
    .ce(1'b1),
    .dout(grp_fu_288_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_mem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & (1'b1 == mem_ARREADY)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_mem_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_mem_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state41) & (1'b1 == mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b1 == mem_AWREADY)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state42) & (ap_sig_ioackin_mem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state49) & (ap_sig_ioackin_mem_WREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state42) & (1'b1 == mem_WREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'b1 == mem_WREADY)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_12_fu_368_p2))) begin
        b_reg_153 <= b_1_reg_609;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        b_reg_153 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        i_reg_221 <= i_1_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_221 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & ~(((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID))))) begin
        o_reg_186 <= o_1_reg_632;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_7_fu_335_p2))) begin
        o_reg_186 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_12_fu_368_p2))) begin
        phi_mul1_reg_164 <= next_mul2_reg_601;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul1_reg_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_12_fu_368_p2))) begin
        phi_mul3_reg_175 <= next_mul4_reg_596;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul3_reg_175 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & ~(((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID))))) begin
        phi_mul_reg_198 <= next_mul_reg_624;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_7_fu_335_p2))) begin
        phi_mul_reg_198 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_16_reg_210 <= grp_fu_232_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_16_reg_210 <= output_element_reg_643;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_1_reg_609 <= b_1_fu_340_p2;
        next_mul2_reg_601 <= next_mul2_fu_326_p2;
        next_mul4_reg_596 <= next_mul4_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        batch_size_read_reg_545 <= batch_size;
        num_inputs_read_reg_537 <= num_inputs;
        num_outputs_read_reg_529 <= num_outputs;
        tmp_4_reg_555 <= tmp_4_fu_272_p2;
        tmp_5_reg_550 <= {{input_offset[31:2]}};
        tmp_9_reg_559 <= {{output_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_reg_661 <= i_1_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (mem_RVALID == 1'b1))) begin
        input_element_reg_678 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'd1 == tmp_17_fu_415_p2))) begin
        mem_addr_1_reg_666 <= tmp_19_fu_448_p2;
        mem_addr_2_reg_672 <= tmp_20_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_12_fu_368_p2))) begin
        mem_addr_reg_637 <= tmp_15_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        next_mul_reg_624 <= next_mul_fu_359_p2;
        o_1_reg_632 <= o_1_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        num_weights_reg_564 <= grp_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (mem_RVALID == 1'b1))) begin
        output_element_reg_643 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_4_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == tmp_17_fu_415_p2)) | ((tmp_4_reg_555 == 1'd1) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == tmp_17_fu_415_p2)))) begin
        reg_257 <= grp_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp2_reg_591 <= tmp2_fu_315_p2;
        tmp_1_reg_570[61 : 0] <= tmp_1_fu_295_p1[61 : 0];
        tmp_2_cast_reg_576 <= tmp_2_cast_fu_302_p1;
        tmp_3_cast_reg_581 <= tmp_3_cast_fu_305_p1;
        tmp_6_reg_586[61 : 0] <= tmp_6_fu_311_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_7_fu_335_p2))) begin
        tmp_11_reg_619 <= tmp_11_fu_354_p2;
        tmp_9_cast_reg_614 <= tmp_9_cast_fu_346_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_13_reg_648[30 : 0] <= tmp_13_fu_403_p1[30 : 0];
        tmp_17_cast_reg_653 <= tmp_17_cast_fu_407_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_21_reg_688 <= grp_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        tmp_27_reg_698 <= tmp_27_fu_521_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (mem_RVALID == 1'b1))) begin
        weight_element_reg_683 <= mem_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_7_fu_335_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_7_fu_335_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_mem_AWREADY == 1'b1)))) begin
        grp_fu_241_ce = 1'b1;
    end else begin
        grp_fu_241_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            mem_ARADDR = mem_addr_2_reg_672;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            mem_ARADDR = mem_addr_1_reg_666;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            mem_ARADDR = mem_addr_reg_637;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & (1'b0 == ap_reg_ioackin_mem_ARREADY)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_reg_ioackin_mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == ap_reg_ioackin_mem_AWREADY)))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state47) & (tmp_4_reg_555 == 1'd0) & ~(((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID)))) | ((1'b1 == ap_CS_fsm_state47) & (tmp_4_reg_555 == 1'd1) & ~(((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID)))))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state15) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (mem_RVALID == 1'b1)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            mem_WDATA = tmp_16_reg_210;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            mem_WDATA = tmp_27_reg_698;
        end else begin
            mem_WDATA = 'bx;
        end
    end else begin
        mem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state42) & (1'b0 == ap_reg_ioackin_mem_WREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'b0 == ap_reg_ioackin_mem_WREADY)))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state48))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state47) & (tmp_4_reg_555 == 1'd0)) | ((1'b1 == ap_CS_fsm_state47) & (tmp_4_reg_555 == 1'd1)))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state49))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_7_fu_335_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_12_fu_368_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((tmp_4_reg_555 == 1'd1) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == tmp_17_fu_415_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((tmp_4_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state17) & (1'd0 == tmp_17_fu_415_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & ~(((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID))))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state47 = (((tmp_4_reg_555 == 1'd0) & (1'b0 == mem_BVALID)) | ((tmp_4_reg_555 == 1'd1) & (1'b0 == mem_BVALID)));
end

always @ (*) begin
    ap_predicate_op154_fcmp_state17 = ((tmp_4_reg_555 == 1'd0) & (1'd0 == tmp_17_fu_415_p2));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_340_p2 = (b_reg_153 + 31'd1);

assign b_cast_fu_331_p1 = b_reg_153;

assign grp_fu_247_p2 = (tmp_11_reg_619 + tmp_13_reg_648);

assign i_1_fu_420_p2 = (i_reg_221 + 31'd1);

assign i_cast_fu_411_p1 = i_reg_221;

assign next_mul2_fu_326_p2 = ($signed(phi_mul1_reg_164) + $signed(num_inputs_read_reg_537));

assign next_mul4_fu_321_p2 = ($signed(phi_mul3_reg_175) + $signed(num_outputs_read_reg_529));

assign next_mul_fu_359_p2 = ($signed(phi_mul_reg_198) + $signed(num_inputs_read_reg_537));

assign notlhs_fu_497_p2 = ((tmp_23_fu_483_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_503_p2 = ((tmp_fu_493_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_1_fu_373_p2 = (o_reg_186 + 31'd1);

assign o_cast_fu_364_p1 = o_reg_186;

assign tmp1_cast_fu_388_p1 = $signed(tmp1_fu_383_p2);

assign tmp1_fu_383_p2 = ($signed(tmp_2_cast_reg_576) + $signed(tmp_13_cast_fu_379_p1));

assign tmp2_fu_315_p2 = ($signed(tmp_1_fu_295_p1) + $signed(tmp_2_fu_299_p1));

assign tmp3_cast_fu_444_p1 = $signed(tmp3_fu_439_p2);

assign tmp3_fu_439_p2 = ($signed(tmp4_cast_fu_435_p1) + $signed(tmp_9_cast_reg_614));

assign tmp4_cast_fu_435_p1 = $signed(tmp4_fu_430_p2);

assign tmp4_fu_430_p2 = ($signed(tmp_3_cast_reg_581) + $signed(tmp_20_cast_fu_426_p1));

assign tmp5_cast_fu_464_p1 = $signed(tmp5_fu_459_p2);

assign tmp5_fu_459_p2 = ($signed(tmp_17_cast_reg_653) + $signed(tmp_20_cast_fu_426_p1));

assign tmp_10_fu_350_p1 = $signed(phi_mul3_reg_175);

assign tmp_11_fu_354_p2 = ($signed(tmp_6_reg_586) + $signed(tmp_10_fu_350_p1));

assign tmp_12_fu_368_p2 = (($signed(o_cast_fu_364_p1) < $signed(num_outputs_read_reg_529)) ? 1'b1 : 1'b0);

assign tmp_13_cast_fu_379_p1 = o_reg_186;

assign tmp_13_fu_403_p1 = o_reg_186;

assign tmp_15_fu_392_p2 = ($signed(tmp1_cast_fu_388_p1) + $signed(tmp_1_reg_570));

assign tmp_17_cast_fu_407_p1 = $signed(phi_mul_reg_198);

assign tmp_17_fu_415_p2 = (($signed(i_cast_fu_411_p1) < $signed(num_inputs_read_reg_537)) ? 1'b1 : 1'b0);

assign tmp_18_to_int_fu_479_p1 = tmp_16_reg_210;

assign tmp_19_fu_448_p2 = ($signed(tmp3_cast_fu_444_p1) + $signed(tmp2_reg_591));

assign tmp_1_fu_295_p1 = $unsigned(tmp_3_fu_292_p1);

assign tmp_20_cast_fu_426_p1 = i_reg_221;

assign tmp_20_fu_468_p2 = ($signed(tmp5_cast_fu_464_p1) + $signed(tmp_1_reg_570));

assign tmp_23_fu_483_p4 = {{tmp_18_to_int_fu_479_p1[30:23]}};

assign tmp_24_fu_509_p2 = (notrhs_fu_503_p2 | notlhs_fu_497_p2);

assign tmp_26_fu_515_p2 = (tmp_24_fu_509_p2 & grp_fu_241_p2);

assign tmp_27_fu_521_p3 = ((tmp_26_fu_515_p2[0:0] === 1'b1) ? tmp_16_reg_210 : 32'd0);

assign tmp_2_cast_fu_302_p1 = $signed(num_weights_reg_564);

assign tmp_2_fu_299_p1 = $signed(num_weights_reg_564);

assign tmp_3_cast_fu_305_p1 = num_outputs_read_reg_529;

assign tmp_3_fu_292_p1 = $signed(tmp_5_reg_550);

assign tmp_4_fu_272_p2 = ((enable_relu == 32'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_311_p1 = $unsigned(tmp_s_fu_308_p1);

assign tmp_7_fu_335_p2 = (($signed(b_cast_fu_331_p1) < $signed(batch_size_read_reg_545)) ? 1'b1 : 1'b0);

assign tmp_9_cast_fu_346_p1 = $signed(phi_mul1_reg_164);

assign tmp_fu_493_p1 = tmp_18_to_int_fu_479_p1[22:0];

assign tmp_s_fu_308_p1 = $signed(tmp_9_reg_559);

always @ (posedge ap_clk) begin
    tmp_1_reg_570[63:62] <= 2'b00;
    tmp_6_reg_586[63:62] <= 2'b00;
    tmp_13_reg_648[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //fc_layer

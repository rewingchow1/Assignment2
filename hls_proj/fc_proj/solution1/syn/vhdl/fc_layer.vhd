-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fc_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu095-ffvc1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=3082997775,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=5168,HLS_SYN_LUT=2830}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_size : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs : STD_LOGIC_VECTOR (31 downto 0);
    signal num_outputs : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_relu : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal tmp_4_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_257 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_17_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_outputs_read_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs_read_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_size_read_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_550 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_559 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_weights_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_2_cast_fu_302_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_cast_reg_576 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_fu_305_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_reg_581 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_reg_591 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul4_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul2_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_fu_340_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_1_reg_609 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_cast_fu_346_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_9_cast_reg_614 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_354_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_mul_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal o_1_fu_373_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_1_reg_632 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_element_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_648 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_17_cast_fu_407_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_17_cast_reg_653 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_1_fu_420_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_661 : STD_LOGIC_VECTOR (30 downto 0);
    signal mem_addr_1_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_2_reg_672 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_element_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_element_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_27_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal b_reg_153 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul1_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_reg_186 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state47 : BOOLEAN;
    signal phi_mul_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_221 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_292_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_fu_308_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_2_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_cast_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_cast_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_379_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_fu_383_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp1_cast_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_426_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp4_fu_430_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp4_cast_fu_435_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp3_fu_439_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp3_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_fu_459_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp5_cast_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_to_int_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_483_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_493_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_241_ce : STD_LOGIC;
    signal ap_predicate_op154_fcmp_state17 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);

    component fc_layer_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fcmp_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_layer_mul_32s_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        batch_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_inputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_outputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_relu : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fc_layer_CTRL_BUS_s_axi_U : component fc_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        batch_size => batch_size,
        num_inputs => num_inputs,
        num_outputs => num_outputs,
        enable_relu => enable_relu);

    fc_layer_mem_m_axi_U : component fc_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => reg_257,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => mem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    fc_layer_fadd_32nbkb_U1 : component fc_layer_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_16_reg_210,
        din1 => tmp_21_reg_688,
        ce => ap_const_logic_1,
        dout => grp_fu_232_p2);

    fc_layer_fmul_32ncud_U2 : component fc_layer_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_element_reg_678,
        din1 => weight_element_reg_683,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);

    fc_layer_fcmp_32ndEe_U3 : component fc_layer_fcmp_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_16_reg_210,
        din1 => ap_const_lv32_0,
        ce => grp_fu_241_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_241_p2);

    fc_layer_mul_32s_eOg_U4 : component fc_layer_mul_32s_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => num_inputs_read_reg_537,
        din1 => num_outputs_read_reg_529,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_1 = mem_ARREADY)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_logic_1 = mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_1 = mem_AWREADY)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_logic_1 = mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_1 = mem_WREADY)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    b_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_12_fu_368_p2))) then 
                b_reg_153 <= b_1_reg_609;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                b_reg_153 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_reg_221 <= i_1_reg_661;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_221 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and not((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID)))))) then 
                o_reg_186 <= o_1_reg_632;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_7_fu_335_p2))) then 
                o_reg_186 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_12_fu_368_p2))) then 
                phi_mul1_reg_164 <= next_mul2_reg_601;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul1_reg_164 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_12_fu_368_p2))) then 
                phi_mul3_reg_175 <= next_mul4_reg_596;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul3_reg_175 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and not((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID)))))) then 
                phi_mul_reg_198 <= next_mul_reg_624;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_7_fu_335_p2))) then 
                phi_mul_reg_198 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_16_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                tmp_16_reg_210 <= grp_fu_232_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                tmp_16_reg_210 <= output_element_reg_643;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                b_1_reg_609 <= b_1_fu_340_p2;
                next_mul2_reg_601 <= next_mul2_fu_326_p2;
                next_mul4_reg_596 <= next_mul4_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                batch_size_read_reg_545 <= batch_size;
                num_inputs_read_reg_537 <= num_inputs;
                num_outputs_read_reg_529 <= num_outputs;
                tmp_4_reg_555 <= tmp_4_fu_272_p2;
                tmp_5_reg_550 <= input_offset(31 downto 2);
                tmp_9_reg_559 <= output_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_1_reg_661 <= i_1_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (mem_RVALID = ap_const_logic_1))) then
                input_element_reg_678 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = tmp_17_fu_415_p2))) then
                mem_addr_1_reg_666 <= tmp_19_fu_448_p2;
                mem_addr_2_reg_672 <= tmp_20_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_12_fu_368_p2))) then
                mem_addr_reg_637 <= tmp_15_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                next_mul_reg_624 <= next_mul_fu_359_p2;
                o_1_reg_632 <= o_1_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                num_weights_reg_564 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (mem_RVALID = ap_const_logic_1))) then
                output_element_reg_643 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_17_fu_415_p2)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_17_fu_415_p2)))) then
                reg_257 <= grp_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp2_reg_591 <= tmp2_fu_315_p2;
                    tmp_1_reg_570(61 downto 0) <= tmp_1_fu_295_p1(61 downto 0);
                tmp_2_cast_reg_576 <= tmp_2_cast_fu_302_p1;
                tmp_3_cast_reg_581 <= tmp_3_cast_fu_305_p1;
                    tmp_6_reg_586(61 downto 0) <= tmp_6_fu_311_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = tmp_7_fu_335_p2))) then
                tmp_11_reg_619 <= tmp_11_fu_354_p2;
                tmp_9_cast_reg_614 <= tmp_9_cast_fu_346_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    tmp_13_reg_648(30 downto 0) <= tmp_13_fu_403_p1(30 downto 0);
                tmp_17_cast_reg_653 <= tmp_17_cast_fu_407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_21_reg_688 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                tmp_27_reg_698 <= tmp_27_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (mem_RVALID = ap_const_logic_1))) then
                weight_element_reg_683 <= mem_RDATA;
            end if;
        end if;
    end process;
    tmp_1_reg_570(63 downto 62) <= "00";
    tmp_6_reg_586(63 downto 62) <= "00";
    tmp_13_reg_648(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state47, tmp_4_reg_555, ap_CS_fsm_state48, ap_CS_fsm_state49, mem_RVALID, mem_BVALID, ap_CS_fsm_state17, tmp_17_fu_415_p2, ap_CS_fsm_state6, tmp_7_fu_335_p2, ap_CS_fsm_state7, tmp_12_fu_368_p2, ap_sig_ioackin_mem_AWREADY, ap_sig_ioackin_mem_ARREADY, ap_sig_ioackin_mem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_7_fu_335_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_12_fu_368_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_17_fu_415_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = tmp_17_fu_415_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and not((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state47_assign_proc : process(tmp_4_reg_555, mem_BVALID)
    begin
                ap_block_state47 <= (((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, tmp_7_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_7_fu_335_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op154_fcmp_state17_assign_proc : process(tmp_4_reg_555, tmp_17_fu_415_p2)
    begin
                ap_predicate_op154_fcmp_state17 <= ((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_17_fu_415_p2));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, tmp_7_fu_335_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_7_fu_335_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_1_fu_340_p2 <= std_logic_vector(unsigned(b_reg_153) + unsigned(ap_const_lv31_1));
    b_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_153),32));

    grp_fu_241_ce_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state17, ap_sig_ioackin_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)))) then 
            grp_fu_241_ce <= ap_const_logic_1;
        else 
            grp_fu_241_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_247_p2 <= std_logic_vector(unsigned(tmp_11_reg_619) + unsigned(tmp_13_reg_648));
    i_1_fu_420_p2 <= std_logic_vector(unsigned(i_reg_221) + unsigned(ap_const_lv31_1));
    i_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_221),32));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19, mem_addr_reg_637, mem_addr_1_reg_666, mem_addr_2_reg_672, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                mem_ARADDR <= mem_addr_2_reg_672;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                mem_ARADDR <= mem_addr_1_reg_666;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                mem_ARADDR <= mem_addr_reg_637;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state48, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state47, tmp_4_reg_555, mem_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state47) and (tmp_4_reg_555 = ap_const_lv1_0) and not((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID))))) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (tmp_4_reg_555 = ap_const_lv1_1) and not((((tmp_4_reg_555 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)) or ((tmp_4_reg_555 = ap_const_lv1_1) and (ap_const_logic_0 = mem_BVALID))))))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state26, mem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (mem_RVALID = ap_const_logic_1)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WDATA_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state49, tmp_27_reg_698, tmp_16_reg_210, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                mem_WDATA <= tmp_16_reg_210;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                mem_WDATA <= tmp_27_reg_698;
            else 
                mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state42, ap_CS_fsm_state49, ap_reg_ioackin_mem_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state41, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state47, tmp_4_reg_555)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state47) and (tmp_4_reg_555 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (tmp_4_reg_555 = ap_const_lv1_1)))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state42, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    next_mul2_fu_326_p2 <= std_logic_vector(unsigned(phi_mul1_reg_164) + unsigned(num_inputs_read_reg_537));
    next_mul4_fu_321_p2 <= std_logic_vector(unsigned(phi_mul3_reg_175) + unsigned(num_outputs_read_reg_529));
    next_mul_fu_359_p2 <= std_logic_vector(unsigned(phi_mul_reg_198) + unsigned(num_inputs_read_reg_537));
    notlhs_fu_497_p2 <= "0" when (tmp_23_fu_483_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_503_p2 <= "1" when (tmp_fu_493_p1 = ap_const_lv23_0) else "0";
    o_1_fu_373_p2 <= std_logic_vector(unsigned(o_reg_186) + unsigned(ap_const_lv31_1));
    o_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_186),32));
        tmp1_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_383_p2),64));

    tmp1_fu_383_p2 <= std_logic_vector(signed(tmp_2_cast_reg_576) + signed(tmp_13_cast_fu_379_p1));
    tmp2_fu_315_p2 <= std_logic_vector(unsigned(tmp_1_fu_295_p1) + unsigned(tmp_2_fu_299_p1));
        tmp3_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_439_p2),64));

    tmp3_fu_439_p2 <= std_logic_vector(signed(tmp4_cast_fu_435_p1) + signed(tmp_9_cast_reg_614));
        tmp4_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_430_p2),34));

    tmp4_fu_430_p2 <= std_logic_vector(signed(tmp_3_cast_reg_581) + signed(tmp_20_cast_fu_426_p1));
        tmp5_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_459_p2),64));

    tmp5_fu_459_p2 <= std_logic_vector(signed(tmp_17_cast_reg_653) + signed(tmp_20_cast_fu_426_p1));
        tmp_10_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_mul3_reg_175),64));

    tmp_11_fu_354_p2 <= std_logic_vector(unsigned(tmp_6_reg_586) + unsigned(tmp_10_fu_350_p1));
    tmp_12_fu_368_p2 <= "1" when (signed(o_cast_fu_364_p1) < signed(num_outputs_read_reg_529)) else "0";
    tmp_13_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_186),33));
    tmp_13_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_186),64));
    tmp_15_fu_392_p2 <= std_logic_vector(signed(tmp1_cast_fu_388_p1) + signed(tmp_1_reg_570));
        tmp_17_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_mul_reg_198),33));

    tmp_17_fu_415_p2 <= "1" when (signed(i_cast_fu_411_p1) < signed(num_inputs_read_reg_537)) else "0";
    tmp_18_to_int_fu_479_p1 <= tmp_16_reg_210;
    tmp_19_fu_448_p2 <= std_logic_vector(signed(tmp3_cast_fu_444_p1) + signed(tmp2_reg_591));
    tmp_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_292_p1),64));
    tmp_20_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_221),33));
    tmp_20_fu_468_p2 <= std_logic_vector(signed(tmp5_cast_fu_464_p1) + signed(tmp_1_reg_570));
    tmp_23_fu_483_p4 <= tmp_18_to_int_fu_479_p1(30 downto 23);
    tmp_24_fu_509_p2 <= (notrhs_fu_503_p2 or notlhs_fu_497_p2);
    tmp_26_fu_515_p2 <= (tmp_24_fu_509_p2 and grp_fu_241_p2);
    tmp_27_fu_521_p3 <= 
        tmp_16_reg_210 when (tmp_26_fu_515_p2(0) = '1') else 
        ap_const_lv32_0;
        tmp_2_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_weights_reg_564),33));

        tmp_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_weights_reg_564),64));

        tmp_3_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_outputs_read_reg_529),33));

        tmp_3_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_550),62));

    tmp_4_fu_272_p2 <= "1" when (enable_relu = ap_const_lv32_0) else "0";
    tmp_6_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_308_p1),64));
    tmp_7_fu_335_p2 <= "1" when (signed(b_cast_fu_331_p1) < signed(batch_size_read_reg_545)) else "0";
        tmp_9_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_mul1_reg_164),34));

    tmp_fu_493_p1 <= tmp_18_to_int_fu_479_p1(23 - 1 downto 0);
        tmp_s_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_559),62));

end behav;
